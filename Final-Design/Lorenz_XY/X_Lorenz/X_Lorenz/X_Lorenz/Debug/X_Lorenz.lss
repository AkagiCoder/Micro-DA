
X_Lorenz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000c4c  00000ce0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800110  00800110  00000cf0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c86  00000000  00000000  00000dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007fe  00000000  00000000  00001a42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000063e  00000000  00000000  00002240  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  00002880  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000414  00000000  00000000  00002a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011de  00000000  00000000  00002e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000401e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e4       	ldi	r30, 0x4C	; 76
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 31       	cpi	r26, 0x1C	; 28
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 52 04 	call	0x8a4	; 0x8a4 <main>
  9e:	0c 94 24 06 	jmp	0xc48	; 0xc48 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <float_add>:
//------------- FLOATING POINT FUNCTIONS ----------
//-------------------------------------------------

// Floating point addition/subtraction
uint32_t float_add(uint32_t A, uint32_t B, uint8_t OP)
{
  a6:	4f 92       	push	r4
  a8:	5f 92       	push	r5
  aa:	6f 92       	push	r6
  ac:	7f 92       	push	r7
  ae:	8f 92       	push	r8
  b0:	9f 92       	push	r9
  b2:	af 92       	push	r10
  b4:	bf 92       	push	r11
  b6:	cf 92       	push	r12
  b8:	df 92       	push	r13
  ba:	ef 92       	push	r14
  bc:	ff 92       	push	r15
  be:	0f 93       	push	r16
  c0:	1f 93       	push	r17
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
  ca:	2c 97       	sbiw	r28, 0x0c	; 12
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	f8 94       	cli
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	cd bf       	out	0x3d, r28	; 61
  d6:	49 01       	movw	r8, r18
  d8:	5a 01       	movw	r10, r20
  da:	e0 2f       	mov	r30, r16
	uint32_t a = A;
	uint32_t b = B;
	uint8_t sub = OP;
	
	// Operand a
	uint8_t exp0 = a >> 23;							// Extract the exponent field of a
  dc:	6b 01       	movw	r12, r22
  de:	7c 01       	movw	r14, r24
  e0:	0b 2e       	mov	r0, r27
  e2:	b7 e1       	ldi	r27, 0x17	; 23
  e4:	f6 94       	lsr	r15
  e6:	e7 94       	ror	r14
  e8:	d7 94       	ror	r13
  ea:	c7 94       	ror	r12
  ec:	ba 95       	dec	r27
  ee:	d1 f7       	brne	.-12     	; 0xe4 <float_add+0x3e>
  f0:	b0 2d       	mov	r27, r0
  f2:	c9 86       	std	Y+9, r12	; 0x09
  f4:	da 86       	std	Y+10, r13	; 0x0a
  f6:	eb 86       	std	Y+11, r14	; 0x0b
  f8:	fc 86       	std	Y+12, r15	; 0x0c
  fa:	59 85       	ldd	r21, Y+9	; 0x09
	uint32_t mant0 = (a & 0x007FFFFF) | 0x00800000;	// Extract the mantissa field of a
  fc:	6b 01       	movw	r12, r22
  fe:	7c 01       	movw	r14, r24
 100:	e8 94       	clt
 102:	e7 f8       	bld	r14, 7
 104:	ff 24       	eor	r15, r15
 106:	26 01       	movw	r4, r12
 108:	37 01       	movw	r6, r14
 10a:	68 94       	set
 10c:	67 f8       	bld	r6, 7
	
	// Operand b
	uint8_t exp1 = b >> 23;							// Extract the exponent field of b
 10e:	85 01       	movw	r16, r10
 110:	74 01       	movw	r14, r8
 112:	0d 2e       	mov	r0, r29
 114:	d7 e1       	ldi	r29, 0x17	; 23
 116:	16 95       	lsr	r17
 118:	07 95       	ror	r16
 11a:	f7 94       	ror	r15
 11c:	e7 94       	ror	r14
 11e:	da 95       	dec	r29
 120:	d1 f7       	brne	.-12     	; 0x116 <float_add+0x70>
 122:	d0 2d       	mov	r29, r0
 124:	ed 82       	std	Y+5, r14	; 0x05
 126:	fe 82       	std	Y+6, r15	; 0x06
 128:	0f 83       	std	Y+7, r16	; 0x07
 12a:	18 87       	std	Y+8, r17	; 0x08
 12c:	4d 81       	ldd	r20, Y+5	; 0x05
	uint32_t mant1 = (b & 0x007FFFFF) | 0x00800000;	// Extract the mantissa field of b
 12e:	75 01       	movw	r14, r10
 130:	64 01       	movw	r12, r8
 132:	e8 94       	clt
 134:	e7 f8       	bld	r14, 7
 136:	ff 24       	eor	r15, r15
 138:	97 01       	movw	r18, r14
 13a:	86 01       	movw	r16, r12
 13c:	20 68       	ori	r18, 0x80	; 128
 13e:	09 83       	std	Y+1, r16	; 0x01
 140:	1a 83       	std	Y+2, r17	; 0x02
 142:	2b 83       	std	Y+3, r18	; 0x03
 144:	3c 83       	std	Y+4, r19	; 0x04
	
	// Temporary variables
	uint32_t temp = 0;
	
	// Check if the operation is subtraction
	if(sub > 0)
 146:	ee 23       	and	r30, r30
 148:	11 f0       	breq	.+4      	; 0x14e <float_add+0xa8>
	b ^= 0x80000000;
 14a:	10 e8       	ldi	r17, 0x80	; 128
 14c:	b1 1a       	sub	r11, r17
	
	// Adjust and compute the exponent
	if(exp0 > exp1)						// exp(a) > exp(b)
 14e:	45 17       	cp	r20, r21
 150:	b8 f4       	brcc	.+46     	; 0x180 <float_add+0xda>
	{
		temp = exp0 - exp1;				// shift amount = exp(a) - exp(b)
 152:	29 85       	ldd	r18, Y+9	; 0x09
 154:	42 2f       	mov	r20, r18
 156:	50 e0       	ldi	r21, 0x00	; 0
		exp = exp0;
		mant1 = mant1 >> temp;			// Adjust B
 158:	9a 01       	movw	r18, r20
 15a:	ed 81       	ldd	r30, Y+5	; 0x05
 15c:	2e 1b       	sub	r18, r30
 15e:	31 09       	sbc	r19, r1
 160:	c9 80       	ldd	r12, Y+1	; 0x01
 162:	da 80       	ldd	r13, Y+2	; 0x02
 164:	eb 80       	ldd	r14, Y+3	; 0x03
 166:	fc 80       	ldd	r15, Y+4	; 0x04
 168:	04 c0       	rjmp	.+8      	; 0x172 <float_add+0xcc>
 16a:	f6 94       	lsr	r15
 16c:	e7 94       	ror	r14
 16e:	d7 94       	ror	r13
 170:	c7 94       	ror	r12
 172:	2a 95       	dec	r18
 174:	d2 f7       	brpl	.-12     	; 0x16a <float_add+0xc4>
 176:	c9 82       	std	Y+1, r12	; 0x01
 178:	da 82       	std	Y+2, r13	; 0x02
 17a:	eb 82       	std	Y+3, r14	; 0x03
 17c:	fc 82       	std	Y+4, r15	; 0x04
 17e:	14 c0       	rjmp	.+40     	; 0x1a8 <float_add+0x102>
	}
	else if(exp1 > exp0)				// b > a
 180:	54 17       	cp	r21, r20
 182:	78 f4       	brcc	.+30     	; 0x1a2 <float_add+0xfc>
	{
		temp = exp1 - exp0;				// shift amount = exp(b) - exp(a)
 184:	dd 80       	ldd	r13, Y+5	; 0x05
 186:	4d 2d       	mov	r20, r13
 188:	50 e0       	ldi	r21, 0x00	; 0
		exp = exp1;
		mant0 = mant0 >> temp;			// Adjust A
 18a:	9a 01       	movw	r18, r20
 18c:	e9 84       	ldd	r14, Y+9	; 0x09
 18e:	2e 19       	sub	r18, r14
 190:	31 09       	sbc	r19, r1
 192:	04 c0       	rjmp	.+8      	; 0x19c <float_add+0xf6>
 194:	76 94       	lsr	r7
 196:	67 94       	ror	r6
 198:	57 94       	ror	r5
 19a:	47 94       	ror	r4
 19c:	2a 95       	dec	r18
 19e:	d2 f7       	brpl	.-12     	; 0x194 <float_add+0xee>
 1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <float_add+0x102>
	}
	else
	{
		exp = exp0;						// Equal exponents
 1a2:	f9 84       	ldd	r15, Y+9	; 0x09
 1a4:	4f 2d       	mov	r20, r15
 1a6:	50 e0       	ldi	r21, 0x00	; 0
	}
	
	// Same signs [a + b] or [(-a) + (-b)]
	if((a & 0x80000000) == (b & 0x80000000))
 1a8:	95 01       	movw	r18, r10
 1aa:	84 01       	movw	r16, r8
 1ac:	06 27       	eor	r16, r22
 1ae:	17 27       	eor	r17, r23
 1b0:	28 27       	eor	r18, r24
 1b2:	39 27       	eor	r19, r25
 1b4:	33 23       	and	r19, r19
 1b6:	e4 f0       	brlt	.+56     	; 0x1f0 <float_add+0x14a>
	{
		final |= (a & 0x80000000);		// Set sign
 1b8:	6b 01       	movw	r12, r22
 1ba:	7c 01       	movw	r14, r24
 1bc:	cc 24       	eor	r12, r12
 1be:	dd 24       	eor	r13, r13
 1c0:	ee 24       	eor	r14, r14
 1c2:	00 e8       	ldi	r16, 0x80	; 128
 1c4:	f0 22       	and	r15, r16
		mant = mant0 + mant1;			// Add the two mantissas
 1c6:	89 81       	ldd	r24, Y+1	; 0x01
 1c8:	9a 81       	ldd	r25, Y+2	; 0x02
 1ca:	ab 81       	ldd	r26, Y+3	; 0x03
 1cc:	bc 81       	ldd	r27, Y+4	; 0x04
 1ce:	84 0d       	add	r24, r4
 1d0:	95 1d       	adc	r25, r5
 1d2:	a6 1d       	adc	r26, r6
 1d4:	b7 1d       	adc	r27, r7
		
		// Normalize the mantissa
		if(mant > 0x00FFFFFF)
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	a1 05       	cpc	r26, r1
 1da:	11 e0       	ldi	r17, 0x01	; 1
 1dc:	b1 07       	cpc	r27, r17
 1de:	08 f4       	brcc	.+2      	; 0x1e2 <float_add+0x13c>
 1e0:	45 c0       	rjmp	.+138    	; 0x26c <float_add+0x1c6>
		{
			mant = mant >> 1;			// Shift mantissa to adjust the floating point
 1e2:	b6 95       	lsr	r27
 1e4:	a7 95       	ror	r26
 1e6:	97 95       	ror	r25
 1e8:	87 95       	ror	r24
			exp += 1;					// Increment the exponent
 1ea:	4f 5f       	subi	r20, 0xFF	; 255
 1ec:	5f 4f       	sbci	r21, 0xFF	; 255
 1ee:	3e c0       	rjmp	.+124    	; 0x26c <float_add+0x1c6>
	}
	// Different signs
	else
	{
		// [a - b]
		if((b & 0x80000000) == 0x80000000)
 1f0:	bb 20       	and	r11, r11
 1f2:	5c f4       	brge	.+22     	; 0x20a <float_add+0x164>
		{
			// Two's complement
			mant1 = ~mant1;
			mant1 += 1;
			// Perform the subtraction
			mant = mant0 + mant1;
 1f4:	d3 01       	movw	r26, r6
 1f6:	c2 01       	movw	r24, r4
 1f8:	c9 80       	ldd	r12, Y+1	; 0x01
 1fa:	da 80       	ldd	r13, Y+2	; 0x02
 1fc:	eb 80       	ldd	r14, Y+3	; 0x03
 1fe:	fc 80       	ldd	r15, Y+4	; 0x04
 200:	8c 19       	sub	r24, r12
 202:	9d 09       	sbc	r25, r13
 204:	ae 09       	sbc	r26, r14
 206:	bf 09       	sbc	r27, r15
 208:	08 c0       	rjmp	.+16     	; 0x21a <float_add+0x174>
		{
			// Two's complement
			mant0 = ~mant0;
			mant0 += 1;
			// Perform the subtraction
			mant = mant0 + mant1;
 20a:	89 81       	ldd	r24, Y+1	; 0x01
 20c:	9a 81       	ldd	r25, Y+2	; 0x02
 20e:	ab 81       	ldd	r26, Y+3	; 0x03
 210:	bc 81       	ldd	r27, Y+4	; 0x04
 212:	84 19       	sub	r24, r4
 214:	95 09       	sbc	r25, r5
 216:	a6 09       	sbc	r26, r6
 218:	b7 09       	sbc	r27, r7
		}
		
		// Check if the value is negative, if so, absolute value the mantissa and set sign bit to 1
		if(mant > 0x00FFFFFF)
 21a:	00 97       	sbiw	r24, 0x00	; 0
 21c:	a1 05       	cpc	r26, r1
 21e:	01 e0       	ldi	r16, 0x01	; 1
 220:	b0 07       	cpc	r27, r16
 222:	68 f0       	brcs	.+26     	; 0x23e <float_add+0x198>
		{
			mant = ~mant;
			mant += 1;
 224:	b0 95       	com	r27
 226:	a0 95       	com	r26
 228:	90 95       	com	r25
 22a:	81 95       	neg	r24
 22c:	9f 4f       	sbci	r25, 0xFF	; 255
 22e:	af 4f       	sbci	r26, 0xFF	; 255
 230:	bf 4f       	sbci	r27, 0xFF	; 255
			// Set sign as negative
			final |= 0x80000000;
 232:	c1 2c       	mov	r12, r1
 234:	d1 2c       	mov	r13, r1
 236:	76 01       	movw	r14, r12
 238:	68 94       	set
 23a:	f7 f8       	bld	r15, 7
 23c:	03 c0       	rjmp	.+6      	; 0x244 <float_add+0x19e>
	uint8_t exp1 = b >> 23;							// Extract the exponent field of b
	uint32_t mant1 = (b & 0x007FFFFF) | 0x00800000;	// Extract the mantissa field of b
	
	// Final result
	int16_t exp = 0;		// Final exponent
	uint32_t final = 0;	// Result to be returned
 23e:	c1 2c       	mov	r12, r1
 240:	d1 2c       	mov	r13, r1
 242:	76 01       	movw	r14, r12
			// Set sign as negative
			final |= 0x80000000;
		}
		
		// Normalize the mantissa
		if(mant > 0)
 244:	00 97       	sbiw	r24, 0x00	; 0
 246:	a1 05       	cpc	r26, r1
 248:	b1 05       	cpc	r27, r1
 24a:	19 f1       	breq	.+70     	; 0x292 <float_add+0x1ec>
		{
			while(mant < 0x00800000)
 24c:	00 97       	sbiw	r24, 0x00	; 0
 24e:	10 e8       	ldi	r17, 0x80	; 128
 250:	a1 07       	cpc	r26, r17
 252:	b1 05       	cpc	r27, r1
 254:	58 f4       	brcc	.+22     	; 0x26c <float_add+0x1c6>
			{
				mant = mant << 1;
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	aa 1f       	adc	r26, r26
 25c:	bb 1f       	adc	r27, r27
				exp -= 1;
 25e:	41 50       	subi	r20, 0x01	; 1
 260:	51 09       	sbc	r21, r1
		}
		
		// Normalize the mantissa
		if(mant > 0)
		{
			while(mant < 0x00800000)
 262:	00 97       	sbiw	r24, 0x00	; 0
 264:	20 e8       	ldi	r18, 0x80	; 128
 266:	a2 07       	cpc	r26, r18
 268:	b1 05       	cpc	r27, r1
 26a:	a8 f3       	brcs	.-22     	; 0x256 <float_add+0x1b0>
		exp = 0;
	}
	
	// Overflow case [Largest value]
	// Exponent cannot be larger than 254 [with bias of +127]
	if(exp > 254)
 26c:	4f 3f       	cpi	r20, 0xFF	; 255
 26e:	51 05       	cpc	r21, r1
 270:	3c f0       	brlt	.+14     	; 0x280 <float_add+0x1da>
	{
		final |= 0x7FFFFFFF;
		return final;
 272:	c7 01       	movw	r24, r14
 274:	b6 01       	movw	r22, r12
 276:	6f 6f       	ori	r22, 0xFF	; 255
 278:	7f 6f       	ori	r23, 0xFF	; 255
 27a:	8f 6f       	ori	r24, 0xFF	; 255
 27c:	9f 67       	ori	r25, 0x7F	; 127
 27e:	26 c0       	rjmp	.+76     	; 0x2cc <float_add+0x226>
	}
	// Underflow case [Smallest number]
	// Exponent cannot be smaller than 0 [with bias of +127]
	else if(exp < 0)
 280:	55 23       	and	r21, r21
 282:	4c f4       	brge	.+18     	; 0x296 <float_add+0x1f0>
	{
		final &= 0x80000000;
		return final;
 284:	c7 01       	movw	r24, r14
 286:	b6 01       	movw	r22, r12
 288:	66 27       	eor	r22, r22
 28a:	77 27       	eor	r23, r23
 28c:	88 27       	eor	r24, r24
 28e:	90 78       	andi	r25, 0x80	; 128
 290:	1d c0       	rjmp	.+58     	; 0x2cc <float_add+0x226>
				mant = mant << 1;
				exp -= 1;
			}
		}
		else
		exp = 0;
 292:	40 e0       	ldi	r20, 0x00	; 0
 294:	50 e0       	ldi	r21, 0x00	; 0
		final &= 0x80000000;
		return final;
	}
	
	mant &= 0x007FFFFF;		// Remove implicit 1
	temp = exp;
 296:	05 2e       	mov	r0, r21
 298:	00 0c       	add	r0, r0
 29a:	66 0b       	sbc	r22, r22
 29c:	77 0b       	sbc	r23, r23
 29e:	af 77       	andi	r26, 0x7F	; 127
 2a0:	bb 27       	eor	r27, r27
 2a2:	8c 29       	or	r24, r12
 2a4:	9d 29       	or	r25, r13
 2a6:	ae 29       	or	r26, r14
 2a8:	bf 29       	or	r27, r15
	temp = temp << 23;		// Shift the exponent into the correct exponent field
	final |= temp;			// Insert exponent into final
	final |= mant;			// Insert mantissa into final
 2aa:	6a 01       	movw	r12, r20
 2ac:	7b 01       	movw	r14, r22
 2ae:	0b 2e       	mov	r0, r27
 2b0:	b7 e1       	ldi	r27, 0x17	; 23
 2b2:	cc 0c       	add	r12, r12
 2b4:	dd 1c       	adc	r13, r13
 2b6:	ee 1c       	adc	r14, r14
 2b8:	ff 1c       	adc	r15, r15
 2ba:	ba 95       	dec	r27
 2bc:	d1 f7       	brne	.-12     	; 0x2b2 <float_add+0x20c>
 2be:	b0 2d       	mov	r27, r0
	
	return final;
 2c0:	bc 01       	movw	r22, r24
 2c2:	cd 01       	movw	r24, r26
 2c4:	6c 29       	or	r22, r12
 2c6:	7d 29       	or	r23, r13
 2c8:	8e 29       	or	r24, r14
 2ca:	9f 29       	or	r25, r15
}
 2cc:	2c 96       	adiw	r28, 0x0c	; 12
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	f8 94       	cli
 2d2:	de bf       	out	0x3e, r29	; 62
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	cd bf       	out	0x3d, r28	; 61
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	1f 91       	pop	r17
 2de:	0f 91       	pop	r16
 2e0:	ff 90       	pop	r15
 2e2:	ef 90       	pop	r14
 2e4:	df 90       	pop	r13
 2e6:	cf 90       	pop	r12
 2e8:	bf 90       	pop	r11
 2ea:	af 90       	pop	r10
 2ec:	9f 90       	pop	r9
 2ee:	8f 90       	pop	r8
 2f0:	7f 90       	pop	r7
 2f2:	6f 90       	pop	r6
 2f4:	5f 90       	pop	r5
 2f6:	4f 90       	pop	r4
 2f8:	08 95       	ret

000002fa <float_mult>:

// Floating point multiplication
uint32_t float_mult(uint32_t M, uint32_t R)
{
 2fa:	2f 92       	push	r2
 2fc:	3f 92       	push	r3
 2fe:	4f 92       	push	r4
 300:	5f 92       	push	r5
 302:	6f 92       	push	r6
 304:	7f 92       	push	r7
 306:	8f 92       	push	r8
 308:	9f 92       	push	r9
 30a:	af 92       	push	r10
 30c:	bf 92       	push	r11
 30e:	cf 92       	push	r12
 310:	df 92       	push	r13
 312:	ef 92       	push	r14
 314:	ff 92       	push	r15
 316:	0f 93       	push	r16
 318:	1f 93       	push	r17
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	cd b7       	in	r28, 0x3d	; 61
 320:	de b7       	in	r29, 0x3e	; 62
 322:	63 97       	sbiw	r28, 0x13	; 19
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	f8 94       	cli
 328:	de bf       	out	0x3e, r29	; 62
 32a:	0f be       	out	0x3f, r0	; 63
 32c:	cd bf       	out	0x3d, r28	; 61
 32e:	49 01       	movw	r8, r18
 330:	5a 01       	movw	r10, r20
	uint64_t A = 0;
	uint64_t S = 0;
	uint64_t P = 0;
	
	// Compute the sign
	final |= (a & 0x80000000) ^ (b & 0x80000000);	// Xor the sign bits
 332:	2b 01       	movw	r4, r22
 334:	3c 01       	movw	r6, r24
 336:	42 26       	eor	r4, r18
 338:	53 26       	eor	r5, r19
 33a:	64 26       	eor	r6, r20
 33c:	75 26       	eor	r7, r21
 33e:	44 24       	eor	r4, r4
 340:	55 24       	eor	r5, r5
 342:	66 24       	eor	r6, r6
 344:	10 e8       	ldi	r17, 0x80	; 128
 346:	71 22       	and	r7, r17
	
	// Compute the initial exponent
	exp = (exp0 + exp1) - 127;						// Add the exponents and subtract 127 [rid the redundant bias]
 348:	8b 01       	movw	r16, r22
 34a:	9c 01       	movw	r18, r24
 34c:	0f 2e       	mov	r0, r31
 34e:	f7 e1       	ldi	r31, 0x17	; 23
 350:	36 95       	lsr	r19
 352:	27 95       	ror	r18
 354:	17 95       	ror	r17
 356:	07 95       	ror	r16
 358:	fa 95       	dec	r31
 35a:	d1 f7       	brne	.-12     	; 0x350 <float_mult+0x56>
 35c:	f0 2d       	mov	r31, r0
 35e:	75 01       	movw	r14, r10
 360:	64 01       	movw	r12, r8
 362:	0b 2e       	mov	r0, r27
 364:	b7 e1       	ldi	r27, 0x17	; 23
 366:	f6 94       	lsr	r15
 368:	e7 94       	ror	r14
 36a:	d7 94       	ror	r13
 36c:	c7 94       	ror	r12
 36e:	ba 95       	dec	r27
 370:	d1 f7       	brne	.-12     	; 0x366 <float_mult+0x6c>
 372:	b0 2d       	mov	r27, r0
 374:	4c 2d       	mov	r20, r12
 376:	50 e0       	ldi	r21, 0x00	; 0
 378:	40 0f       	add	r20, r16
 37a:	51 1d       	adc	r21, r1
 37c:	4f 57       	subi	r20, 0x7F	; 127
 37e:	51 09       	sbc	r21, r1
 380:	5b 8b       	std	Y+19, r21	; 0x13
 382:	4a 8b       	std	Y+18, r20	; 0x12
	if(exp > 0x00FF)								// Early check for overflow
 384:	4f 3f       	cpi	r20, 0xFF	; 255
 386:	51 05       	cpc	r21, r1
 388:	41 f0       	breq	.+16     	; 0x39a <float_mult+0xa0>
 38a:	3c f0       	brlt	.+14     	; 0x39a <float_mult+0xa0>
	return final |= (0x7FFFFFFF);
 38c:	44 24       	eor	r4, r4
 38e:	4a 94       	dec	r4
 390:	54 2c       	mov	r5, r4
 392:	65 2c       	mov	r6, r5
 394:	5f e7       	ldi	r21, 0x7F	; 127
 396:	75 2a       	or	r7, r21
 398:	af c1       	rjmp	.+862    	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
	uint32_t a = M;
	uint32_t b = R;
	
	// Operand a
	uint8_t exp0 = a >> 23;							// Extract the exponent field of a
	uint32_t mant0 = (a & 0x007FFFFF) | 0x00800000;	// Extract the mantissa field of a
 39a:	dc 01       	movw	r26, r24
 39c:	cb 01       	movw	r24, r22
 39e:	af 77       	andi	r26, 0x7F	; 127
 3a0:	bb 27       	eor	r27, r27
 3a2:	6c 01       	movw	r12, r24
 3a4:	7d 01       	movw	r14, r26
 3a6:	68 94       	set
 3a8:	e7 f8       	bld	r14, 7
	// m = mant0		x = 25 bits
	// r = mant1		y = 25 bits
	// A = S = P = x + y + 1 = 51 bits [USE LONG INT]
	
	// Fill register A with m
	A = mant0;
 3aa:	a7 01       	movw	r20, r14
 3ac:	96 01       	movw	r18, r12
	A = A << 26;
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	70 e0       	ldi	r23, 0x00	; 0
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0a e1       	ldi	r16, 0x1A	; 26
 3b8:	0e 94 cc 05 	call	0xb98	; 0xb98 <__ashldi3>
 3bc:	f2 2f       	mov	r31, r18
 3be:	b3 2f       	mov	r27, r19
 3c0:	49 8b       	std	Y+17, r20	; 0x11
 3c2:	59 87       	std	Y+9, r21	; 0x09
 3c4:	36 2e       	mov	r3, r22
 3c6:	27 2e       	mov	r2, r23
 3c8:	18 2f       	mov	r17, r24
 3ca:	a9 2f       	mov	r26, r25
	// Two's complement of m
	mant0 = ~mant0;
	mant0 += 1;
	
	// Fill register S with -m
	S = mant0;
 3cc:	f0 94       	com	r15
 3ce:	e0 94       	com	r14
 3d0:	d0 94       	com	r13
 3d2:	c0 94       	com	r12
 3d4:	c1 1c       	adc	r12, r1
 3d6:	d1 1c       	adc	r13, r1
 3d8:	e1 1c       	adc	r14, r1
 3da:	f1 1c       	adc	r15, r1
 3dc:	a7 01       	movw	r20, r14
 3de:	96 01       	movw	r18, r12
	S = S << 26;
 3e0:	60 e0       	ldi	r22, 0x00	; 0
 3e2:	70 e0       	ldi	r23, 0x00	; 0
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 cc 05 	call	0xb98	; 0xb98 <__ashldi3>
	S &= 0x0007FFFFFFFFFFFF;
 3ec:	2a 87       	std	Y+10, r18	; 0x0a
 3ee:	3b 87       	std	Y+11, r19	; 0x0b
 3f0:	4c 87       	std	Y+12, r20	; 0x0c
 3f2:	5d 87       	std	Y+13, r21	; 0x0d
 3f4:	6e 87       	std	Y+14, r22	; 0x0e
 3f6:	7f 87       	std	Y+15, r23	; 0x0f
 3f8:	87 70       	andi	r24, 0x07	; 7
 3fa:	88 8b       	std	Y+16, r24	; 0x10
	
	// Fill register P with r
	P = mant1 << 1;
 3fc:	b5 01       	movw	r22, r10
 3fe:	a4 01       	movw	r20, r8
 400:	6f 77       	andi	r22, 0x7F	; 127
 402:	77 27       	eor	r23, r23
 404:	60 68       	ori	r22, 0x80	; 128
 406:	44 0f       	add	r20, r20
 408:	55 1f       	adc	r21, r21
 40a:	66 1f       	adc	r22, r22
 40c:	77 1f       	adc	r23, r23
 40e:	4a 01       	movw	r8, r20
 410:	5b 01       	movw	r10, r22
 412:	c1 2c       	mov	r12, r1
 414:	d1 2c       	mov	r13, r1
 416:	76 01       	movw	r14, r12
 418:	49 83       	std	Y+1, r20	; 0x01
 41a:	9a 82       	std	Y+2, r9	; 0x02
 41c:	ab 82       	std	Y+3, r10	; 0x03
 41e:	bc 82       	std	Y+4, r11	; 0x04
 420:	cd 82       	std	Y+5, r12	; 0x05
 422:	de 82       	std	Y+6, r13	; 0x06
 424:	ef 82       	std	Y+7, r14	; 0x07
 426:	f8 86       	std	Y+8, r15	; 0x08
 428:	e9 e1       	ldi	r30, 0x19	; 25
 42a:	81 2e       	mov	r8, r17
 42c:	9a 2e       	mov	r9, r26
	
	for(i = 0; i < 25; i++)
	{
		if((P & 3) == 1)
 42e:	19 81       	ldd	r17, Y+1	; 0x01
 430:	13 70       	andi	r17, 0x03	; 3
 432:	21 2f       	mov	r18, r17
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	40 e0       	ldi	r20, 0x00	; 0
 438:	50 e0       	ldi	r21, 0x00	; 0
 43a:	60 e0       	ldi	r22, 0x00	; 0
 43c:	70 e0       	ldi	r23, 0x00	; 0
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	a1 e0       	ldi	r26, 0x01	; 1
 444:	0e 94 18 06 	call	0xc30	; 0xc30 <__cmpdi2_s8>
 448:	d1 f4       	brne	.+52     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
		{
			P += A;
 44a:	2f 2f       	mov	r18, r31
 44c:	3b 2f       	mov	r19, r27
 44e:	49 89       	ldd	r20, Y+17	; 0x11
 450:	59 85       	ldd	r21, Y+9	; 0x09
 452:	63 2d       	mov	r22, r3
 454:	72 2d       	mov	r23, r2
 456:	88 2d       	mov	r24, r8
 458:	99 2d       	mov	r25, r9
 45a:	a9 80       	ldd	r10, Y+1	; 0x01
 45c:	ba 80       	ldd	r11, Y+2	; 0x02
 45e:	cb 80       	ldd	r12, Y+3	; 0x03
 460:	dc 80       	ldd	r13, Y+4	; 0x04
 462:	ed 80       	ldd	r14, Y+5	; 0x05
 464:	fe 80       	ldd	r15, Y+6	; 0x06
 466:	0f 81       	ldd	r16, Y+7	; 0x07
 468:	18 85       	ldd	r17, Y+8	; 0x08
 46a:	0e 94 03 06 	call	0xc06	; 0xc06 <__adddi3>
 46e:	29 83       	std	Y+1, r18	; 0x01
 470:	3a 83       	std	Y+2, r19	; 0x02
 472:	4b 83       	std	Y+3, r20	; 0x03
 474:	5c 83       	std	Y+4, r21	; 0x04
 476:	6d 83       	std	Y+5, r22	; 0x05
 478:	7e 83       	std	Y+6, r23	; 0x06
 47a:	8f 83       	std	Y+7, r24	; 0x07
 47c:	24 c0       	rjmp	.+72     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
		}
		else if((P & 3) == 2)
 47e:	21 2f       	mov	r18, r17
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	40 e0       	ldi	r20, 0x00	; 0
 484:	50 e0       	ldi	r21, 0x00	; 0
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	70 e0       	ldi	r23, 0x00	; 0
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	a2 e0       	ldi	r26, 0x02	; 2
 490:	0e 94 18 06 	call	0xc30	; 0xc30 <__cmpdi2_s8>
 494:	c1 f4       	brne	.+48     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
		{
			P += S;
 496:	2a 85       	ldd	r18, Y+10	; 0x0a
 498:	3b 85       	ldd	r19, Y+11	; 0x0b
 49a:	4c 85       	ldd	r20, Y+12	; 0x0c
 49c:	5d 85       	ldd	r21, Y+13	; 0x0d
 49e:	6e 85       	ldd	r22, Y+14	; 0x0e
 4a0:	7f 85       	ldd	r23, Y+15	; 0x0f
 4a2:	88 89       	ldd	r24, Y+16	; 0x10
 4a4:	a9 80       	ldd	r10, Y+1	; 0x01
 4a6:	ba 80       	ldd	r11, Y+2	; 0x02
 4a8:	cb 80       	ldd	r12, Y+3	; 0x03
 4aa:	dc 80       	ldd	r13, Y+4	; 0x04
 4ac:	ed 80       	ldd	r14, Y+5	; 0x05
 4ae:	fe 80       	ldd	r15, Y+6	; 0x06
 4b0:	0f 81       	ldd	r16, Y+7	; 0x07
 4b2:	18 85       	ldd	r17, Y+8	; 0x08
 4b4:	0e 94 03 06 	call	0xc06	; 0xc06 <__adddi3>
 4b8:	29 83       	std	Y+1, r18	; 0x01
 4ba:	3a 83       	std	Y+2, r19	; 0x02
 4bc:	4b 83       	std	Y+3, r20	; 0x03
 4be:	5c 83       	std	Y+4, r21	; 0x04
 4c0:	6d 83       	std	Y+5, r22	; 0x05
 4c2:	7e 83       	std	Y+6, r23	; 0x06
 4c4:	8f 83       	std	Y+7, r24	; 0x07
		}
		P &= 0x0007FFFFFFFFFFFF;		// Mask out the overflow
 4c6:	af 81       	ldd	r26, Y+7	; 0x07
 4c8:	a7 70       	andi	r26, 0x07	; 7
		
		// Shift negative number
		if(P >= 0x0004000000000000)
 4ca:	29 81       	ldd	r18, Y+1	; 0x01
 4cc:	3a 81       	ldd	r19, Y+2	; 0x02
 4ce:	4b 81       	ldd	r20, Y+3	; 0x03
 4d0:	5c 81       	ldd	r21, Y+4	; 0x04
 4d2:	6d 81       	ldd	r22, Y+5	; 0x05
 4d4:	7e 81       	ldd	r23, Y+6	; 0x06
 4d6:	8a 2f       	mov	r24, r26
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	2f 3f       	cpi	r18, 0xFF	; 255
 4dc:	1f ef       	ldi	r17, 0xFF	; 255
 4de:	31 07       	cpc	r19, r17
 4e0:	41 07       	cpc	r20, r17
 4e2:	51 07       	cpc	r21, r17
 4e4:	61 07       	cpc	r22, r17
 4e6:	71 07       	cpc	r23, r17
 4e8:	13 e0       	ldi	r17, 0x03	; 3
 4ea:	81 07       	cpc	r24, r17
 4ec:	91 05       	cpc	r25, r1
 4ee:	71 f0       	breq	.+28     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 4f0:	68 f0       	brcs	.+26     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
		{
			P = P >> 1;
 4f2:	01 e0       	ldi	r16, 0x01	; 1
 4f4:	0e 94 e7 05 	call	0xbce	; 0xbce <__lshrdi3>
			P |= 0x0004000000000000;
 4f8:	29 83       	std	Y+1, r18	; 0x01
 4fa:	3a 83       	std	Y+2, r19	; 0x02
 4fc:	4b 83       	std	Y+3, r20	; 0x03
 4fe:	5c 83       	std	Y+4, r21	; 0x04
 500:	6d 83       	std	Y+5, r22	; 0x05
 502:	7e 83       	std	Y+6, r23	; 0x06
 504:	84 60       	ori	r24, 0x04	; 4
 506:	8f 83       	std	Y+7, r24	; 0x07
 508:	98 87       	std	Y+8, r25	; 0x08
 50a:	13 c0       	rjmp	.+38     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
		}
		// Shift positive number
		else
		P = P >> 1;
 50c:	29 81       	ldd	r18, Y+1	; 0x01
 50e:	3a 81       	ldd	r19, Y+2	; 0x02
 510:	4b 81       	ldd	r20, Y+3	; 0x03
 512:	5c 81       	ldd	r21, Y+4	; 0x04
 514:	6d 81       	ldd	r22, Y+5	; 0x05
 516:	7e 81       	ldd	r23, Y+6	; 0x06
 518:	8a 2f       	mov	r24, r26
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	01 e0       	ldi	r16, 0x01	; 1
 51e:	0e 94 e7 05 	call	0xbce	; 0xbce <__lshrdi3>
 522:	29 83       	std	Y+1, r18	; 0x01
 524:	3a 83       	std	Y+2, r19	; 0x02
 526:	4b 83       	std	Y+3, r20	; 0x03
 528:	5c 83       	std	Y+4, r21	; 0x04
 52a:	6d 83       	std	Y+5, r22	; 0x05
 52c:	7e 83       	std	Y+6, r23	; 0x06
 52e:	8f 83       	std	Y+7, r24	; 0x07
 530:	98 87       	std	Y+8, r25	; 0x08
 532:	e1 50       	subi	r30, 0x01	; 1
	S &= 0x0007FFFFFFFFFFFF;
	
	// Fill register P with r
	P = mant1 << 1;
	
	for(i = 0; i < 25; i++)
 534:	09 f0       	breq	.+2      	; 0x538 <__LOCK_REGION_LENGTH__+0x138>
 536:	7b cf       	rjmp	.-266    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 538:	8a 88       	ldd	r8, Y+18	; 0x12
 53a:	9b 88       	ldd	r9, Y+19	; 0x13
		}
		// Shift positive number
		else
		P = P >> 1;
	}
	P = P >> 1;		// One last shift to complete the Booth algorithm
 53c:	29 81       	ldd	r18, Y+1	; 0x01
 53e:	3a 81       	ldd	r19, Y+2	; 0x02
 540:	4b 81       	ldd	r20, Y+3	; 0x03
 542:	5c 81       	ldd	r21, Y+4	; 0x04
 544:	6d 81       	ldd	r22, Y+5	; 0x05
 546:	7e 81       	ldd	r23, Y+6	; 0x06
 548:	8f 81       	ldd	r24, Y+7	; 0x07
 54a:	98 85       	ldd	r25, Y+8	; 0x08
 54c:	01 e0       	ldi	r16, 0x01	; 1
 54e:	0e 94 e7 05 	call	0xbce	; 0xbce <__lshrdi3>
 552:	12 2f       	mov	r17, r18
 554:	b3 2f       	mov	r27, r19
 556:	f4 2f       	mov	r31, r20
 558:	e5 2f       	mov	r30, r21
 55a:	c6 2e       	mov	r12, r22
 55c:	d7 2e       	mov	r13, r23
 55e:	e8 2e       	mov	r14, r24
 560:	f9 2e       	mov	r15, r25
	
	// Normalize the result
	while(P > 0x00007FFFFFFFFFFF)
 562:	2f 3f       	cpi	r18, 0xFF	; 255
 564:	af ef       	ldi	r26, 0xFF	; 255
 566:	3a 07       	cpc	r19, r26
 568:	4a 07       	cpc	r20, r26
 56a:	5a 07       	cpc	r21, r26
 56c:	6a 07       	cpc	r22, r26
 56e:	af e7       	ldi	r26, 0x7F	; 127
 570:	7a 07       	cpc	r23, r26
 572:	81 05       	cpc	r24, r1
 574:	91 05       	cpc	r25, r1
 576:	41 f1       	breq	.+80     	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
 578:	38 f1       	brcs	.+78     	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
 57a:	54 01       	movw	r10, r8
 57c:	03 2f       	mov	r16, r19
	{
		P = P >> 1;
 57e:	21 2f       	mov	r18, r17
 580:	30 2f       	mov	r19, r16
 582:	4f 2f       	mov	r20, r31
 584:	5e 2f       	mov	r21, r30
 586:	6c 2d       	mov	r22, r12
 588:	7d 2d       	mov	r23, r13
 58a:	8e 2d       	mov	r24, r14
 58c:	9f 2d       	mov	r25, r15
 58e:	01 e0       	ldi	r16, 0x01	; 1
 590:	0e 94 e7 05 	call	0xbce	; 0xbce <__lshrdi3>
 594:	12 2f       	mov	r17, r18
 596:	03 2f       	mov	r16, r19
 598:	f4 2f       	mov	r31, r20
 59a:	e5 2f       	mov	r30, r21
 59c:	c6 2e       	mov	r12, r22
 59e:	d7 2e       	mov	r13, r23
 5a0:	e8 2e       	mov	r14, r24
 5a2:	f9 2e       	mov	r15, r25
		exp += 1;
 5a4:	bf ef       	ldi	r27, 0xFF	; 255
 5a6:	ab 1a       	sub	r10, r27
 5a8:	bb 0a       	sbc	r11, r27
		P = P >> 1;
	}
	P = P >> 1;		// One last shift to complete the Booth algorithm
	
	// Normalize the result
	while(P > 0x00007FFFFFFFFFFF)
 5aa:	2f 3f       	cpi	r18, 0xFF	; 255
 5ac:	af ef       	ldi	r26, 0xFF	; 255
 5ae:	3a 07       	cpc	r19, r26
 5b0:	4a 07       	cpc	r20, r26
 5b2:	5a 07       	cpc	r21, r26
 5b4:	6a 07       	cpc	r22, r26
 5b6:	af e7       	ldi	r26, 0x7F	; 127
 5b8:	7a 07       	cpc	r23, r26
 5ba:	81 05       	cpc	r24, r1
 5bc:	91 05       	cpc	r25, r1
 5be:	09 f0       	breq	.+2      	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
 5c0:	f0 f6       	brcc	.-68     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 5c2:	bb 8a       	std	Y+19, r11	; 0x13
 5c4:	aa 8a       	std	Y+18, r10	; 0x12
 5c6:	b3 2f       	mov	r27, r19
	{
		P = P >> 1;
		exp += 1;
	}
	while(P < 0x00003FFFFFFFFFFF && P > 0)
 5c8:	21 2f       	mov	r18, r17
 5ca:	3b 2f       	mov	r19, r27
 5cc:	4f 2f       	mov	r20, r31
 5ce:	5e 2f       	mov	r21, r30
 5d0:	6c 2d       	mov	r22, r12
 5d2:	7d 2d       	mov	r23, r13
 5d4:	8e 2d       	mov	r24, r14
 5d6:	9f 2d       	mov	r25, r15
 5d8:	af ef       	ldi	r26, 0xFF	; 255
 5da:	0e 94 0c 06 	call	0xc18	; 0xc18 <__adddi3_s8>
 5de:	2d 3f       	cpi	r18, 0xFD	; 253
 5e0:	3f 4f       	sbci	r19, 0xFF	; 255
 5e2:	4f 4f       	sbci	r20, 0xFF	; 255
 5e4:	5f 4f       	sbci	r21, 0xFF	; 255
 5e6:	6f 4f       	sbci	r22, 0xFF	; 255
 5e8:	7f 43       	sbci	r23, 0x3F	; 63
 5ea:	81 05       	cpc	r24, r1
 5ec:	91 05       	cpc	r25, r1
 5ee:	09 f0       	breq	.+2      	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
 5f0:	48 f5       	brcc	.+82     	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
 5f2:	aa 88       	ldd	r10, Y+18	; 0x12
 5f4:	bb 88       	ldd	r11, Y+19	; 0x13
 5f6:	0b 2f       	mov	r16, r27
	{
		P = P << 1;
 5f8:	21 2f       	mov	r18, r17
 5fa:	30 2f       	mov	r19, r16
 5fc:	4f 2f       	mov	r20, r31
 5fe:	5e 2f       	mov	r21, r30
 600:	6c 2d       	mov	r22, r12
 602:	7d 2d       	mov	r23, r13
 604:	8e 2d       	mov	r24, r14
 606:	9f 2d       	mov	r25, r15
 608:	01 e0       	ldi	r16, 0x01	; 1
 60a:	0e 94 cc 05 	call	0xb98	; 0xb98 <__ashldi3>
 60e:	12 2f       	mov	r17, r18
 610:	03 2f       	mov	r16, r19
 612:	f4 2f       	mov	r31, r20
 614:	e5 2f       	mov	r30, r21
 616:	c6 2e       	mov	r12, r22
 618:	d7 2e       	mov	r13, r23
 61a:	e8 2e       	mov	r14, r24
 61c:	f9 2e       	mov	r15, r25
		exp -= 1;
 61e:	b1 e0       	ldi	r27, 0x01	; 1
 620:	ab 1a       	sub	r10, r27
 622:	b1 08       	sbc	r11, r1
	while(P > 0x00007FFFFFFFFFFF)
	{
		P = P >> 1;
		exp += 1;
	}
	while(P < 0x00003FFFFFFFFFFF && P > 0)
 624:	af ef       	ldi	r26, 0xFF	; 255
 626:	0e 94 0c 06 	call	0xc18	; 0xc18 <__adddi3_s8>
 62a:	2d 3f       	cpi	r18, 0xFD	; 253
 62c:	3f 4f       	sbci	r19, 0xFF	; 255
 62e:	4f 4f       	sbci	r20, 0xFF	; 255
 630:	5f 4f       	sbci	r21, 0xFF	; 255
 632:	6f 4f       	sbci	r22, 0xFF	; 255
 634:	7f 43       	sbci	r23, 0x3F	; 63
 636:	81 05       	cpc	r24, r1
 638:	91 05       	cpc	r25, r1
 63a:	f1 f2       	breq	.-68     	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
 63c:	e8 f2       	brcs	.-70     	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
 63e:	bb 8a       	std	Y+19, r11	; 0x13
 640:	aa 8a       	std	Y+18, r10	; 0x12
 642:	b0 2f       	mov	r27, r16
		P = P << 1;
		exp -= 1;
	}

	// Truncate
	while(P >= 0x0000000001000000)
 644:	21 2f       	mov	r18, r17
 646:	3b 2f       	mov	r19, r27
 648:	4f 2f       	mov	r20, r31
 64a:	5e 2f       	mov	r21, r30
 64c:	6c 2d       	mov	r22, r12
 64e:	7d 2d       	mov	r23, r13
 650:	8e 2d       	mov	r24, r14
 652:	9f 2d       	mov	r25, r15
 654:	2f 3f       	cpi	r18, 0xFF	; 255
 656:	3f 4f       	sbci	r19, 0xFF	; 255
 658:	4f 4f       	sbci	r20, 0xFF	; 255
 65a:	51 05       	cpc	r21, r1
 65c:	61 05       	cpc	r22, r1
 65e:	71 05       	cpc	r23, r1
 660:	81 05       	cpc	r24, r1
 662:	91 05       	cpc	r25, r1
 664:	f1 f0       	breq	.+60     	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
 666:	e8 f0       	brcs	.+58     	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
	P = P >> 1;
 668:	21 2f       	mov	r18, r17
 66a:	3b 2f       	mov	r19, r27
 66c:	4f 2f       	mov	r20, r31
 66e:	5e 2f       	mov	r21, r30
 670:	6c 2d       	mov	r22, r12
 672:	7d 2d       	mov	r23, r13
 674:	8e 2d       	mov	r24, r14
 676:	9f 2d       	mov	r25, r15
 678:	01 e0       	ldi	r16, 0x01	; 1
 67a:	0e 94 e7 05 	call	0xbce	; 0xbce <__lshrdi3>
 67e:	12 2f       	mov	r17, r18
 680:	b3 2f       	mov	r27, r19
 682:	f4 2f       	mov	r31, r20
 684:	e5 2f       	mov	r30, r21
 686:	c6 2e       	mov	r12, r22
 688:	d7 2e       	mov	r13, r23
 68a:	e8 2e       	mov	r14, r24
 68c:	f9 2e       	mov	r15, r25
		P = P << 1;
		exp -= 1;
	}

	// Truncate
	while(P >= 0x0000000001000000)
 68e:	2f 3f       	cpi	r18, 0xFF	; 255
 690:	3f 4f       	sbci	r19, 0xFF	; 255
 692:	4f 4f       	sbci	r20, 0xFF	; 255
 694:	51 05       	cpc	r21, r1
 696:	61 05       	cpc	r22, r1
 698:	71 05       	cpc	r23, r1
 69a:	81 05       	cpc	r24, r1
 69c:	91 05       	cpc	r25, r1
 69e:	09 f0       	breq	.+2      	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
 6a0:	18 f7       	brcc	.-58     	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
	P = P >> 1;
	
	// Overflow case [Largest value]
	// Exponent cannot be larger than 254 [with bias of +127]
	if(exp > 254)
 6a2:	2a 89       	ldd	r18, Y+18	; 0x12
 6a4:	3b 89       	ldd	r19, Y+19	; 0x13
 6a6:	2f 3f       	cpi	r18, 0xFF	; 255
 6a8:	31 05       	cpc	r19, r1
 6aa:	3c f0       	brlt	.+14     	; 0x6ba <__LOCK_REGION_LENGTH__+0x2ba>
	{
		final |= 0x7FFFFFFF;
		return final;
 6ac:	44 24       	eor	r4, r4
 6ae:	4a 94       	dec	r4
 6b0:	54 2c       	mov	r5, r4
 6b2:	65 2c       	mov	r6, r5
 6b4:	3f e7       	ldi	r19, 0x7F	; 127
 6b6:	73 2a       	or	r7, r19
 6b8:	1f c0       	rjmp	.+62     	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
	}
	// Underflow case [Smallest number]
	// Exponent cannot be smaller than 0 [with bias of +127]
	else if(exp < 0)
 6ba:	8a 88       	ldd	r8, Y+18	; 0x12
 6bc:	9b 88       	ldd	r9, Y+19	; 0x13
 6be:	99 20       	and	r9, r9
 6c0:	dc f0       	brlt	.+54     	; 0x6f8 <__LOCK_REGION_LENGTH__+0x2f8>
	{
		final &= 0x80000000;
		return final;
	}
	
	mant0 = exp;
 6c2:	a4 01       	movw	r20, r8
 6c4:	99 0c       	add	r9, r9
 6c6:	66 0b       	sbc	r22, r22
 6c8:	77 0b       	sbc	r23, r23
	mant0 = mant0 << 23;		// Extract the final exponent
	final |= mant0;				// Insert the exponent into final
 6ca:	03 2e       	mov	r0, r19
 6cc:	37 e1       	ldi	r19, 0x17	; 23
 6ce:	44 0f       	add	r20, r20
 6d0:	55 1f       	adc	r21, r21
 6d2:	66 1f       	adc	r22, r22
 6d4:	77 1f       	adc	r23, r23
 6d6:	3a 95       	dec	r19
 6d8:	d1 f7       	brne	.-12     	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
 6da:	30 2d       	mov	r19, r0
 6dc:	44 2a       	or	r4, r20
 6de:	55 2a       	or	r5, r21
 6e0:	66 2a       	or	r6, r22
 6e2:	77 2a       	or	r7, r23
	mant0 = P;
 6e4:	41 2f       	mov	r20, r17
 6e6:	5b 2f       	mov	r21, r27
 6e8:	6f 2f       	mov	r22, r31
 6ea:	7e 2f       	mov	r23, r30
	mant0 &= 0x007FFFFF;		// Extract the final mantissa
	final |= mant0;				// Insert the mantissa into final
 6ec:	6f 77       	andi	r22, 0x7F	; 127
 6ee:	77 27       	eor	r23, r23
	return final;
 6f0:	44 2a       	or	r4, r20
 6f2:	55 2a       	or	r5, r21
 6f4:	66 2a       	or	r6, r22
 6f6:	77 2a       	or	r7, r23
}
 6f8:	c3 01       	movw	r24, r6
 6fa:	b2 01       	movw	r22, r4
 6fc:	63 96       	adiw	r28, 0x13	; 19
 6fe:	0f b6       	in	r0, 0x3f	; 63
 700:	f8 94       	cli
 702:	de bf       	out	0x3e, r29	; 62
 704:	0f be       	out	0x3f, r0	; 63
 706:	cd bf       	out	0x3d, r28	; 61
 708:	df 91       	pop	r29
 70a:	cf 91       	pop	r28
 70c:	1f 91       	pop	r17
 70e:	0f 91       	pop	r16
 710:	ff 90       	pop	r15
 712:	ef 90       	pop	r14
 714:	df 90       	pop	r13
 716:	cf 90       	pop	r12
 718:	bf 90       	pop	r11
 71a:	af 90       	pop	r10
 71c:	9f 90       	pop	r9
 71e:	8f 90       	pop	r8
 720:	7f 90       	pop	r7
 722:	6f 90       	pop	r6
 724:	5f 90       	pop	r5
 726:	4f 90       	pop	r4
 728:	3f 90       	pop	r3
 72a:	2f 90       	pop	r2
 72c:	08 95       	ret

0000072e <float_digital>:

uint16_t float_digital(uint32_t Num)
{
 72e:	4f 92       	push	r4
 730:	5f 92       	push	r5
 732:	6f 92       	push	r6
 734:	7f 92       	push	r7
 736:	8f 92       	push	r8
 738:	9f 92       	push	r9
 73a:	af 92       	push	r10
 73c:	bf 92       	push	r11
 73e:	cf 92       	push	r12
 740:	df 92       	push	r13
 742:	ef 92       	push	r14
 744:	ff 92       	push	r15
 746:	0f 93       	push	r16
 748:	2b 01       	movw	r4, r22
 74a:	3c 01       	movw	r6, r24
	uint32_t a = Num;
	
	uint16_t final = 0;
	int8_t temp = (a >> 23) - 127;
 74c:	dc 01       	movw	r26, r24
 74e:	cb 01       	movw	r24, r22
 750:	07 2e       	mov	r0, r23
 752:	77 e1       	ldi	r23, 0x17	; 23
 754:	b6 95       	lsr	r27
 756:	a7 95       	ror	r26
 758:	97 95       	ror	r25
 75a:	87 95       	ror	r24
 75c:	7a 95       	dec	r23
 75e:	d1 f7       	brne	.-12     	; 0x754 <float_digital+0x26>
 760:	70 2d       	mov	r23, r0
 762:	e1 e8       	ldi	r30, 0x81	; 129
 764:	e8 0f       	add	r30, r24
	uint64_t mant = (a & 0x007FFFFF) | 0x00800000;
 766:	53 01       	movw	r10, r6
 768:	42 01       	movw	r8, r4
 76a:	e8 94       	clt
 76c:	a7 f8       	bld	r10, 7
 76e:	bb 24       	eor	r11, r11
 770:	68 94       	set
 772:	a7 f8       	bld	r10, 7
 774:	c1 2c       	mov	r12, r1
 776:	d1 2c       	mov	r13, r1
 778:	76 01       	movw	r14, r12
	
	// Denormalize the floating point
	while(temp != 0)
 77a:	ee 23       	and	r30, r30
 77c:	79 f1       	breq	.+94     	; 0x7dc <float_digital+0xae>
	{
		if(temp > 0)
 77e:	1e 16       	cp	r1, r30
 780:	ac f4       	brge	.+42     	; 0x7ac <float_digital+0x7e>
		{
			temp--;
 782:	e1 50       	subi	r30, 0x01	; 1
			mant = mant << 1;
 784:	28 2d       	mov	r18, r8
 786:	39 2d       	mov	r19, r9
 788:	4a 2d       	mov	r20, r10
 78a:	5b 2d       	mov	r21, r11
 78c:	6c 2d       	mov	r22, r12
 78e:	7d 2d       	mov	r23, r13
 790:	8e 2d       	mov	r24, r14
 792:	9f 2d       	mov	r25, r15
 794:	01 e0       	ldi	r16, 0x01	; 1
 796:	0e 94 cc 05 	call	0xb98	; 0xb98 <__ashldi3>
 79a:	82 2e       	mov	r8, r18
 79c:	93 2e       	mov	r9, r19
 79e:	a4 2e       	mov	r10, r20
 7a0:	b5 2e       	mov	r11, r21
 7a2:	c6 2e       	mov	r12, r22
 7a4:	d7 2e       	mov	r13, r23
 7a6:	e8 2e       	mov	r14, r24
 7a8:	f9 2e       	mov	r15, r25
 7aa:	16 c0       	rjmp	.+44     	; 0x7d8 <float_digital+0xaa>
		}
		else if(temp < 0)
 7ac:	ee 23       	and	r30, r30
 7ae:	a4 f4       	brge	.+40     	; 0x7d8 <float_digital+0xaa>
		{
			temp++;
 7b0:	ef 5f       	subi	r30, 0xFF	; 255
			mant = mant >> 1;
 7b2:	28 2d       	mov	r18, r8
 7b4:	39 2d       	mov	r19, r9
 7b6:	4a 2d       	mov	r20, r10
 7b8:	5b 2d       	mov	r21, r11
 7ba:	6c 2d       	mov	r22, r12
 7bc:	7d 2d       	mov	r23, r13
 7be:	8e 2d       	mov	r24, r14
 7c0:	9f 2d       	mov	r25, r15
 7c2:	01 e0       	ldi	r16, 0x01	; 1
 7c4:	0e 94 e7 05 	call	0xbce	; 0xbce <__lshrdi3>
 7c8:	82 2e       	mov	r8, r18
 7ca:	93 2e       	mov	r9, r19
 7cc:	a4 2e       	mov	r10, r20
 7ce:	b5 2e       	mov	r11, r21
 7d0:	c6 2e       	mov	r12, r22
 7d2:	d7 2e       	mov	r13, r23
 7d4:	e8 2e       	mov	r14, r24
 7d6:	f9 2e       	mov	r15, r25
	uint16_t final = 0;
	int8_t temp = (a >> 23) - 127;
	uint64_t mant = (a & 0x007FFFFF) | 0x00800000;
	
	// Denormalize the floating point
	while(temp != 0)
 7d8:	e1 11       	cpse	r30, r1
 7da:	d1 cf       	rjmp	.-94     	; 0x77e <float_digital+0x50>
		{
			temp++;
			mant = mant >> 1;
		}
	}
	mant = mant << SCALE;		// Scale the value
 7dc:	28 2d       	mov	r18, r8
 7de:	39 2d       	mov	r19, r9
 7e0:	4a 2d       	mov	r20, r10
 7e2:	5b 2d       	mov	r21, r11
 7e4:	6c 2d       	mov	r22, r12
 7e6:	7d 2d       	mov	r23, r13
 7e8:	8e 2d       	mov	r24, r14
 7ea:	9f 2d       	mov	r25, r15
 7ec:	05 e0       	ldi	r16, 0x05	; 5
 7ee:	0e 94 cc 05 	call	0xb98	; 0xb98 <__ashldi3>

	mant = mant >> 23;
	final |= mant & 0x0000000000000FFF;
 7f2:	07 e1       	ldi	r16, 0x17	; 23
 7f4:	0e 94 e7 05 	call	0xbce	; 0xbce <__lshrdi3>
 7f8:	82 2e       	mov	r8, r18
 7fa:	93 2e       	mov	r9, r19
 7fc:	8f e0       	ldi	r24, 0x0F	; 15
 7fe:	98 22       	and	r9, r24
	
	if((a & 0x80000000) == 0x80000000)
 800:	77 20       	and	r7, r7
 802:	2c f4       	brge	.+10     	; 0x80e <float_digital+0xe0>
	final = 0x07FF - final;		// Negative
 804:	8f ef       	ldi	r24, 0xFF	; 255
 806:	97 e0       	ldi	r25, 0x07	; 7
 808:	88 19       	sub	r24, r8
 80a:	99 09       	sbc	r25, r9
 80c:	03 c0       	rjmp	.+6      	; 0x814 <float_digital+0xe6>
	else
	final = 0x07FF + final;		// Positive
 80e:	c4 01       	movw	r24, r8
 810:	81 50       	subi	r24, 0x01	; 1
 812:	98 4f       	sbci	r25, 0xF8	; 248
	
	return final;
}
 814:	0f 91       	pop	r16
 816:	ff 90       	pop	r15
 818:	ef 90       	pop	r14
 81a:	df 90       	pop	r13
 81c:	cf 90       	pop	r12
 81e:	bf 90       	pop	r11
 820:	af 90       	pop	r10
 822:	9f 90       	pop	r9
 824:	8f 90       	pop	r8
 826:	7f 90       	pop	r7
 828:	6f 90       	pop	r6
 82a:	5f 90       	pop	r5
 82c:	4f 90       	pop	r4
 82e:	08 95       	ret

00000830 <i2c_init>:
}

// I2C initialization
void i2c_init(void)
{
	TWSR = 0x00;										// Set prescalar to 0
 830:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR = 0x48;										// SCL = 50 KHz (Fosc = 8 MHz)
 834:	88 e4       	ldi	r24, 0x48	; 72
 836:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	TWCR = (1 << TWEN);									// Enable TWI
 83a:	84 e0       	ldi	r24, 0x04	; 4
 83c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 840:	08 95       	ret

00000842 <i2c_write>:
}

// Write to the I2C
void i2c_write(unsigned char data)
{
	TWDR = data;										// Data to be transmitted
 842:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1 << TWINT) | (1 << TWEN);					// Use TWI module and write
 846:	84 e8       	ldi	r24, 0x84	; 132
 848:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while((TWCR & (1 << TWINT)) == 0);					// Wait for TWI to complete
 84c:	ec eb       	ldi	r30, 0xBC	; 188
 84e:	f0 e0       	ldi	r31, 0x00	; 0
 850:	80 81       	ld	r24, Z
 852:	88 23       	and	r24, r24
 854:	ec f7       	brge	.-6      	; 0x850 <i2c_write+0xe>
}
 856:	08 95       	ret

00000858 <i2c_start>:

// I2C start condition
void i2c_start(void)
{
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);	// Transmit START condition
 858:	84 ea       	ldi	r24, 0xA4	; 164
 85a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while((TWCR & (1 << TWINT)) == 0);					// Wait for TWI to complete
 85e:	ec eb       	ldi	r30, 0xBC	; 188
 860:	f0 e0       	ldi	r31, 0x00	; 0
 862:	80 81       	ld	r24, Z
 864:	88 23       	and	r24, r24
 866:	ec f7       	brge	.-6      	; 0x862 <i2c_start+0xa>
}
 868:	08 95       	ret

0000086a <dac>:
// | STA | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 || ACK || 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 || ACK || D11 | D10 | D9 | D8 | D7 | D6 | D5 | D4 || ACK || D3 | D2 | D1 | D0 | 0 | 0 | 0 | 0 || ACK | STO |
//                        A2  A1  A0  R/W		  C2  C1  C0   x   x  PD1 PD0  x

// DAC function
void dac(unsigned int input)
{
 86a:	cf 93       	push	r28
 86c:	df 93       	push	r29
 86e:	ec 01       	movw	r28, r24
	i2c_start();
 870:	0e 94 2c 04 	call	0x858	; 0x858 <i2c_start>
	i2c_write(0b11000000);
 874:	80 ec       	ldi	r24, 0xC0	; 192
 876:	0e 94 21 04 	call	0x842	; 0x842 <i2c_write>
	i2c_write(0b01000000);
 87a:	80 e4       	ldi	r24, 0x40	; 64
 87c:	0e 94 21 04 	call	0x842	; 0x842 <i2c_write>
	i2c_write(input >> 4);
 880:	ce 01       	movw	r24, r28
 882:	92 95       	swap	r25
 884:	82 95       	swap	r24
 886:	8f 70       	andi	r24, 0x0F	; 15
 888:	89 27       	eor	r24, r25
 88a:	9f 70       	andi	r25, 0x0F	; 15
 88c:	89 27       	eor	r24, r25
 88e:	0e 94 21 04 	call	0x842	; 0x842 <i2c_write>
	i2c_write(input);
 892:	8c 2f       	mov	r24, r28
 894:	0e 94 21 04 	call	0x842	; 0x842 <i2c_write>
}

// I2C stop condition
void i2c_stop(void)
{
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);	// Transmit STOP condition
 898:	84 e9       	ldi	r24, 0x94	; 148
 89a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	i2c_write(0b11000000);
	i2c_write(0b01000000);
	i2c_write(input >> 4);
	i2c_write(input);
	i2c_stop();
}
 89e:	df 91       	pop	r29
 8a0:	cf 91       	pop	r28
 8a2:	08 95       	ret

000008a4 <main>:
{
	uint32_t temp;		// Temporary variable
	uint32_t osc_out;	// Value to output to the DAC
	uint16_t i;			// Iterative variable
	
	DDRB = (1 << 1);	// PB1
 8a4:	82 e0       	ldi	r24, 0x02	; 2
 8a6:	84 b9       	out	0x04, r24	; 4
	
	i2c_init();			// Initialize the I2C
 8a8:	0e 94 18 04 	call	0x830	; 0x830 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8ac:	2f ef       	ldi	r18, 0xFF	; 255
 8ae:	83 e2       	ldi	r24, 0x23	; 35
 8b0:	94 ef       	ldi	r25, 0xF4	; 244
 8b2:	21 50       	subi	r18, 0x01	; 1
 8b4:	80 40       	sbci	r24, 0x00	; 0
 8b6:	90 40       	sbci	r25, 0x00	; 0
 8b8:	e1 f7       	brne	.-8      	; 0x8b2 <main+0xe>
 8ba:	00 c0       	rjmp	.+0      	; 0x8bc <main+0x18>
 8bc:	00 00       	nop
			x = float_add(x, dx, ADD);		// Update the change to X
			y = float_add(y, dy, ADD);		// Update the change to Y
			z = float_add(z, dz, ADD);		// Update the change to Z
			
			osc_out = float_digital(x);		// Output X
			PORTB = (1 << 1);
 8be:	12 e0       	ldi	r17, 0x02	; 2
volatile uint32_t j = 0;
volatile uint32_t k = 27;
volatile uint16_t num_out;

int main(void)
{
 8c0:	c8 ee       	ldi	r28, 0xE8	; 232
 8c2:	d3 e0       	ldi	r29, 0x03	; 3
	_delay_ms(5000);
	while (1)
	{
		for(i = 0; i < 1000; i++) {
			// dx/dt = SIGMA(y-x)
			dx = float_add(y, x, SUB);
 8c4:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <x>
 8c8:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <x+0x1>
 8cc:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <x+0x2>
 8d0:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <x+0x3>
 8d4:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <y>
 8d8:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <y+0x1>
 8dc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <y+0x2>
 8e0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <y+0x3>
 8e4:	01 e0       	ldi	r16, 0x01	; 1
 8e6:	0e 94 53 00 	call	0xa6	; 0xa6 <float_add>
 8ea:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <dx>
 8ee:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <dx+0x1>
 8f2:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <dx+0x2>
 8f6:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <dx+0x3>
			dx = float_mult(SIGMA, dx);
 8fa:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <dx>
 8fe:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <dx+0x1>
 902:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <dx+0x2>
 906:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <dx+0x3>
 90a:	60 e0       	ldi	r22, 0x00	; 0
 90c:	70 e0       	ldi	r23, 0x00	; 0
 90e:	80 e2       	ldi	r24, 0x20	; 32
 910:	91 e4       	ldi	r25, 0x41	; 65
 912:	0e 94 7d 01 	call	0x2fa	; 0x2fa <float_mult>
 916:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <dx>
 91a:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <dx+0x1>
 91e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <dx+0x2>
 922:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <dx+0x3>
			dx = float_mult(dx, dt);
 926:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <dt>
 92a:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <dt+0x1>
 92e:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <dt+0x2>
 932:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <dt+0x3>
 936:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <dx>
 93a:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <dx+0x1>
 93e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <dx+0x2>
 942:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <dx+0x3>
 946:	0e 94 7d 01 	call	0x2fa	; 0x2fa <float_mult>
 94a:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <dx>
 94e:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <dx+0x1>
 952:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <dx+0x2>
 956:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <dx+0x3>
			
			// dy/dt = x(RHO-z)-y
			dy = float_add(RHO, z, SUB);
 95a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 95e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 962:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_start+0x2>
 966:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_start+0x3>
 96a:	60 e0       	ldi	r22, 0x00	; 0
 96c:	70 e0       	ldi	r23, 0x00	; 0
 96e:	80 ee       	ldi	r24, 0xE0	; 224
 970:	91 e4       	ldi	r25, 0x41	; 65
 972:	0e 94 53 00 	call	0xa6	; 0xa6 <float_add>
 976:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <dy>
 97a:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <dy+0x1>
 97e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <dy+0x2>
 982:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <dy+0x3>
			dy = float_mult(dy, x);
 986:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <x>
 98a:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <x+0x1>
 98e:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <x+0x2>
 992:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <x+0x3>
 996:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <dy>
 99a:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <dy+0x1>
 99e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <dy+0x2>
 9a2:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <dy+0x3>
 9a6:	0e 94 7d 01 	call	0x2fa	; 0x2fa <float_mult>
 9aa:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <dy>
 9ae:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <dy+0x1>
 9b2:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <dy+0x2>
 9b6:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <dy+0x3>
			dy = float_add(dy, y, SUB);
 9ba:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <y>
 9be:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <y+0x1>
 9c2:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <y+0x2>
 9c6:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <y+0x3>
 9ca:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <dy>
 9ce:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <dy+0x1>
 9d2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <dy+0x2>
 9d6:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <dy+0x3>
 9da:	0e 94 53 00 	call	0xa6	; 0xa6 <float_add>
 9de:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <dy>
 9e2:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <dy+0x1>
 9e6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <dy+0x2>
 9ea:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <dy+0x3>
			dy = float_mult(dy, dt);
 9ee:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <dt>
 9f2:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <dt+0x1>
 9f6:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <dt+0x2>
 9fa:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <dt+0x3>
 9fe:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <dy>
 a02:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <dy+0x1>
 a06:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <dy+0x2>
 a0a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <dy+0x3>
 a0e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <float_mult>
 a12:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <dy>
 a16:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <dy+0x1>
 a1a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <dy+0x2>
 a1e:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <dy+0x3>
			
			// dz/dt = xy-(BETA)z
			temp = float_mult(x, y);
 a22:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <y>
 a26:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <y+0x1>
 a2a:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <y+0x2>
 a2e:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <y+0x3>
 a32:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <x>
 a36:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <x+0x1>
 a3a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <x+0x2>
 a3e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <x+0x3>
 a42:	0e 94 7d 01 	call	0x2fa	; 0x2fa <float_mult>
 a46:	6b 01       	movw	r12, r22
 a48:	7c 01       	movw	r14, r24
			dz = float_mult(BETA, z);
 a4a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 a4e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 a52:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_start+0x2>
 a56:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_start+0x3>
 a5a:	6b ea       	ldi	r22, 0xAB	; 171
 a5c:	7a ea       	ldi	r23, 0xAA	; 170
 a5e:	8a e2       	ldi	r24, 0x2A	; 42
 a60:	90 e4       	ldi	r25, 0x40	; 64
 a62:	0e 94 7d 01 	call	0x2fa	; 0x2fa <float_mult>
 a66:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <__data_end>
 a6a:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <__data_end+0x1>
 a6e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end+0x2>
 a72:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x3>
			dz = float_add(temp, dz, SUB);
 a76:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__data_end>
 a7a:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__data_end+0x1>
 a7e:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__data_end+0x2>
 a82:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__data_end+0x3>
 a86:	c7 01       	movw	r24, r14
 a88:	b6 01       	movw	r22, r12
 a8a:	0e 94 53 00 	call	0xa6	; 0xa6 <float_add>
 a8e:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <__data_end>
 a92:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <__data_end+0x1>
 a96:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end+0x2>
 a9a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x3>
			dz = float_mult(dz, dt);
 a9e:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <dt>
 aa2:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <dt+0x1>
 aa6:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <dt+0x2>
 aaa:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <dt+0x3>
 aae:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <__data_end>
 ab2:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <__data_end+0x1>
 ab6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end+0x2>
 aba:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x3>
 abe:	0e 94 7d 01 	call	0x2fa	; 0x2fa <float_mult>
 ac2:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <__data_end>
 ac6:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <__data_end+0x1>
 aca:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end+0x2>
 ace:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x3>
			
			x = float_add(x, dx, ADD);		// Update the change to X
 ad2:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <dx>
 ad6:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <dx+0x1>
 ada:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <dx+0x2>
 ade:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <dx+0x3>
 ae2:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <x>
 ae6:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <x+0x1>
 aea:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <x+0x2>
 aee:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <x+0x3>
 af2:	00 e0       	ldi	r16, 0x00	; 0
 af4:	0e 94 53 00 	call	0xa6	; 0xa6 <float_add>
 af8:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <x>
 afc:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <x+0x1>
 b00:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <x+0x2>
 b04:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <x+0x3>
			y = float_add(y, dy, ADD);		// Update the change to Y
 b08:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <dy>
 b0c:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <dy+0x1>
 b10:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <dy+0x2>
 b14:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <dy+0x3>
 b18:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <y>
 b1c:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <y+0x1>
 b20:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <y+0x2>
 b24:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <y+0x3>
 b28:	0e 94 53 00 	call	0xa6	; 0xa6 <float_add>
 b2c:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <y>
 b30:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <y+0x1>
 b34:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <y+0x2>
 b38:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <y+0x3>
			z = float_add(z, dz, ADD);		// Update the change to Z
 b3c:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__data_end>
 b40:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__data_end+0x1>
 b44:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__data_end+0x2>
 b48:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__data_end+0x3>
 b4c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 b50:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 b54:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 b58:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 b5c:	0e 94 53 00 	call	0xa6	; 0xa6 <float_add>
 b60:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 b64:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 b68:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 b6c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
			
			osc_out = float_digital(x);		// Output X
 b70:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <x>
 b74:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <x+0x1>
 b78:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <x+0x2>
 b7c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <x+0x3>
 b80:	0e 94 97 03 	call	0x72e	; 0x72e <float_digital>
			PORTB = (1 << 1);
 b84:	15 b9       	out	0x05, r17	; 5
			while((PINB & 0x4) != 0x4);
 b86:	1a 9b       	sbis	0x03, 2	; 3
 b88:	fe cf       	rjmp	.-4      	; 0xb86 <__stack+0x287>
			PORTB = 0x0;
 b8a:	15 b8       	out	0x05, r1	; 5
			dac(osc_out);
 b8c:	0e 94 35 04 	call	0x86a	; 0x86a <dac>
 b90:	21 97       	sbiw	r28, 0x01	; 1
	i2c_init();			// Initialize the I2C

	_delay_ms(5000);
	while (1)
	{
		for(i = 0; i < 1000; i++) {
 b92:	09 f0       	breq	.+2      	; 0xb96 <__stack+0x297>
 b94:	97 ce       	rjmp	.-722    	; 0x8c4 <main+0x20>
 b96:	94 ce       	rjmp	.-728    	; 0x8c0 <main+0x1c>

00000b98 <__ashldi3>:
 b98:	0f 93       	push	r16
 b9a:	08 30       	cpi	r16, 0x08	; 8
 b9c:	90 f0       	brcs	.+36     	; 0xbc2 <__ashldi3+0x2a>
 b9e:	98 2f       	mov	r25, r24
 ba0:	87 2f       	mov	r24, r23
 ba2:	76 2f       	mov	r23, r22
 ba4:	65 2f       	mov	r22, r21
 ba6:	54 2f       	mov	r21, r20
 ba8:	43 2f       	mov	r20, r19
 baa:	32 2f       	mov	r19, r18
 bac:	22 27       	eor	r18, r18
 bae:	08 50       	subi	r16, 0x08	; 8
 bb0:	f4 cf       	rjmp	.-24     	; 0xb9a <__ashldi3+0x2>
 bb2:	22 0f       	add	r18, r18
 bb4:	33 1f       	adc	r19, r19
 bb6:	44 1f       	adc	r20, r20
 bb8:	55 1f       	adc	r21, r21
 bba:	66 1f       	adc	r22, r22
 bbc:	77 1f       	adc	r23, r23
 bbe:	88 1f       	adc	r24, r24
 bc0:	99 1f       	adc	r25, r25
 bc2:	0a 95       	dec	r16
 bc4:	b2 f7       	brpl	.-20     	; 0xbb2 <__ashldi3+0x1a>
 bc6:	0f 91       	pop	r16
 bc8:	08 95       	ret

00000bca <__ashrdi3>:
 bca:	97 fb       	bst	r25, 7
 bcc:	10 f8       	bld	r1, 0

00000bce <__lshrdi3>:
 bce:	16 94       	lsr	r1
 bd0:	00 08       	sbc	r0, r0
 bd2:	0f 93       	push	r16
 bd4:	08 30       	cpi	r16, 0x08	; 8
 bd6:	98 f0       	brcs	.+38     	; 0xbfe <__lshrdi3+0x30>
 bd8:	08 50       	subi	r16, 0x08	; 8
 bda:	23 2f       	mov	r18, r19
 bdc:	34 2f       	mov	r19, r20
 bde:	45 2f       	mov	r20, r21
 be0:	56 2f       	mov	r21, r22
 be2:	67 2f       	mov	r22, r23
 be4:	78 2f       	mov	r23, r24
 be6:	89 2f       	mov	r24, r25
 be8:	90 2d       	mov	r25, r0
 bea:	f4 cf       	rjmp	.-24     	; 0xbd4 <__lshrdi3+0x6>
 bec:	05 94       	asr	r0
 bee:	97 95       	ror	r25
 bf0:	87 95       	ror	r24
 bf2:	77 95       	ror	r23
 bf4:	67 95       	ror	r22
 bf6:	57 95       	ror	r21
 bf8:	47 95       	ror	r20
 bfa:	37 95       	ror	r19
 bfc:	27 95       	ror	r18
 bfe:	0a 95       	dec	r16
 c00:	aa f7       	brpl	.-22     	; 0xbec <__lshrdi3+0x1e>
 c02:	0f 91       	pop	r16
 c04:	08 95       	ret

00000c06 <__adddi3>:
 c06:	2a 0d       	add	r18, r10
 c08:	3b 1d       	adc	r19, r11
 c0a:	4c 1d       	adc	r20, r12
 c0c:	5d 1d       	adc	r21, r13
 c0e:	6e 1d       	adc	r22, r14
 c10:	7f 1d       	adc	r23, r15
 c12:	80 1f       	adc	r24, r16
 c14:	91 1f       	adc	r25, r17
 c16:	08 95       	ret

00000c18 <__adddi3_s8>:
 c18:	00 24       	eor	r0, r0
 c1a:	a7 fd       	sbrc	r26, 7
 c1c:	00 94       	com	r0
 c1e:	2a 0f       	add	r18, r26
 c20:	30 1d       	adc	r19, r0
 c22:	40 1d       	adc	r20, r0
 c24:	50 1d       	adc	r21, r0
 c26:	60 1d       	adc	r22, r0
 c28:	70 1d       	adc	r23, r0
 c2a:	80 1d       	adc	r24, r0
 c2c:	90 1d       	adc	r25, r0
 c2e:	08 95       	ret

00000c30 <__cmpdi2_s8>:
 c30:	00 24       	eor	r0, r0
 c32:	a7 fd       	sbrc	r26, 7
 c34:	00 94       	com	r0
 c36:	2a 17       	cp	r18, r26
 c38:	30 05       	cpc	r19, r0
 c3a:	40 05       	cpc	r20, r0
 c3c:	50 05       	cpc	r21, r0
 c3e:	60 05       	cpc	r22, r0
 c40:	70 05       	cpc	r23, r0
 c42:	80 05       	cpc	r24, r0
 c44:	90 05       	cpc	r25, r0
 c46:	08 95       	ret

00000c48 <_exit>:
 c48:	f8 94       	cli

00000c4a <__stop_program>:
 c4a:	ff cf       	rjmp	.-2      	; 0xc4a <__stop_program>
