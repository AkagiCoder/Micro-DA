
Non-Linear_ODE[Lorenz].elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000410  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000979  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000796  00000000  00000000  00000ea1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000062c  00000000  00000000  00001637  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001c64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003dc  00000000  00000000  00001d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000190  00000000  00000000  00002100  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002290  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <main>
  78:	0c 94 06 02 	jmp	0x40c	; 0x40c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <i2c_init>:
	}
	mant &= 0x01FF;				// Remove implicit 1
	exp = exp << 9;				// Shift the exponent to correct position
	final |= (exp | mant);		// Result
	return final;
}
  80:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  84:	88 e4       	ldi	r24, 0x48	; 72
  86:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  8a:	84 e0       	ldi	r24, 0x04	; 4
  8c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  90:	08 95       	ret

00000092 <float_mult>:

// Multiplies two floating points
uint16_t float_mult(volatile uint16_t a, volatile uint16_t b)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	69 97       	sbiw	r28, 0x19	; 25
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
  a6:	9f 8b       	std	Y+23, r25	; 0x17
  a8:	8e 8b       	std	Y+22, r24	; 0x16
  aa:	79 8f       	std	Y+25, r23	; 0x19
  ac:	68 8f       	std	Y+24, r22	; 0x18
	// 6-bit field
	volatile uint8_t exp0 = 0x00;		// Exponent field of a
  ae:	19 82       	std	Y+1, r1	; 0x01
	volatile uint8_t exp1 = 0x00;		// Exponent field of b
  b0:	1a 82       	std	Y+2, r1	; 0x02
	
	// 9-bit field
	volatile uint16_t mant0 = 0x0000;		// Mantissa field of a
  b2:	1c 82       	std	Y+4, r1	; 0x04
  b4:	1b 82       	std	Y+3, r1	; 0x03
	volatile uint16_t mant1 = 0x0000;		// Mantissa field of b
  b6:	1e 82       	std	Y+6, r1	; 0x06
  b8:	1d 82       	std	Y+5, r1	; 0x05
	volatile uint16_t i = 0x0000;			// Loop iterations
  ba:	18 86       	std	Y+8, r1	; 0x08
  bc:	1f 82       	std	Y+7, r1	; 0x07
	volatile uint16_t exp = 0x0000;			// Result of the exponents
  be:	1a 86       	std	Y+10, r1	; 0x0a
  c0:	19 86       	std	Y+9, r1	; 0x09
	volatile uint16_t final = 0x0000;		// Result of the addition
  c2:	1c 86       	std	Y+12, r1	; 0x0c
  c4:	1b 86       	std	Y+11, r1	; 0x0b
	volatile uint16_t A;				// Multiplicand
	volatile uint16_t S;				// Multiplier
	volatile uint16_t P;				// Product
	
								// ******* Num 0 ********
	exp0 = a >> 9;				// Extract exponent field
  c6:	8e 89       	ldd	r24, Y+22	; 0x16
  c8:	9f 89       	ldd	r25, Y+23	; 0x17
  ca:	89 2f       	mov	r24, r25
  cc:	86 95       	lsr	r24
  ce:	89 83       	std	Y+1, r24	; 0x01
	exp0 = 0x3F & exp0;			// Mask out bit 6 and 7
  d0:	89 81       	ldd	r24, Y+1	; 0x01
  d2:	8f 73       	andi	r24, 0x3F	; 63
  d4:	89 83       	std	Y+1, r24	; 0x01
	mant0 = 0x01FF & a;			// Extract mantissa
  d6:	8e 89       	ldd	r24, Y+22	; 0x16
  d8:	9f 89       	ldd	r25, Y+23	; 0x17
  da:	91 70       	andi	r25, 0x01	; 1
  dc:	9c 83       	std	Y+4, r25	; 0x04
  de:	8b 83       	std	Y+3, r24	; 0x03
	mant0 |= 0x0200;			// Append the implicit 1
  e0:	8b 81       	ldd	r24, Y+3	; 0x03
  e2:	9c 81       	ldd	r25, Y+4	; 0x04
  e4:	92 60       	ori	r25, 0x02	; 2
  e6:	9c 83       	std	Y+4, r25	; 0x04
  e8:	8b 83       	std	Y+3, r24	; 0x03
	
								// ******* Num 1 ********
	exp1 = b >> 9;				// Extract exponent field
  ea:	88 8d       	ldd	r24, Y+24	; 0x18
  ec:	99 8d       	ldd	r25, Y+25	; 0x19
  ee:	89 2f       	mov	r24, r25
  f0:	86 95       	lsr	r24
  f2:	8a 83       	std	Y+2, r24	; 0x02
	exp1 = 0x003F & exp1;		// Mask out bit 6 and 7
  f4:	8a 81       	ldd	r24, Y+2	; 0x02
  f6:	8f 73       	andi	r24, 0x3F	; 63
  f8:	8a 83       	std	Y+2, r24	; 0x02
	mant1 = 0x01FF & b;			// Extract mantissa
  fa:	88 8d       	ldd	r24, Y+24	; 0x18
  fc:	99 8d       	ldd	r25, Y+25	; 0x19
  fe:	91 70       	andi	r25, 0x01	; 1
 100:	9e 83       	std	Y+6, r25	; 0x06
 102:	8d 83       	std	Y+5, r24	; 0x05
	mant1 |= 0x0200;			// Append the implicit 1
 104:	8d 81       	ldd	r24, Y+5	; 0x05
 106:	9e 81       	ldd	r25, Y+6	; 0x06
 108:	92 60       	ori	r25, 0x02	; 2
 10a:	9e 83       	std	Y+6, r25	; 0x06
 10c:	8d 83       	std	Y+5, r24	; 0x05
	
	// Compute the initial exponent
	exp = exp0 + exp1;
 10e:	29 81       	ldd	r18, Y+1	; 0x01
 110:	8a 81       	ldd	r24, Y+2	; 0x02
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	82 0f       	add	r24, r18
 116:	91 1d       	adc	r25, r1
 118:	9a 87       	std	Y+10, r25	; 0x0a
 11a:	89 87       	std	Y+9, r24	; 0x09
	
	// Compute the sign
	final |= (a & 0x8000) ^ (b & 0x8000);
 11c:	8e 89       	ldd	r24, Y+22	; 0x16
 11e:	9f 89       	ldd	r25, Y+23	; 0x17
 120:	28 8d       	ldd	r18, Y+24	; 0x18
 122:	39 8d       	ldd	r19, Y+25	; 0x19
 124:	4b 85       	ldd	r20, Y+11	; 0x0b
 126:	5c 85       	ldd	r21, Y+12	; 0x0c
 128:	82 27       	eor	r24, r18
 12a:	93 27       	eor	r25, r19
 12c:	88 27       	eor	r24, r24
 12e:	90 78       	andi	r25, 0x80	; 128
 130:	84 2b       	or	r24, r20
 132:	95 2b       	or	r25, r21
 134:	9c 87       	std	Y+12, r25	; 0x0c
 136:	8b 87       	std	Y+11, r24	; 0x0b
	// m = mant0		x = 11 bits
	// r = mant1		y = 11 bits
	// A = S = P = x + y + 1 = 23 [UReg + Reg = 24; Ignore bit 23]
	
	// Fill register A with m
	UA = mant0 >> 4;
 138:	8b 81       	ldd	r24, Y+3	; 0x03
 13a:	9c 81       	ldd	r25, Y+4	; 0x04
 13c:	92 95       	swap	r25
 13e:	82 95       	swap	r24
 140:	8f 70       	andi	r24, 0x0F	; 15
 142:	89 27       	eor	r24, r25
 144:	9f 70       	andi	r25, 0x0F	; 15
 146:	89 27       	eor	r24, r25
 148:	8d 87       	std	Y+13, r24	; 0x0d
	A = mant0 << 12;
 14a:	8b 81       	ldd	r24, Y+3	; 0x03
 14c:	9c 81       	ldd	r25, Y+4	; 0x04
 14e:	98 2f       	mov	r25, r24
 150:	88 27       	eor	r24, r24
 152:	92 95       	swap	r25
 154:	90 7f       	andi	r25, 0xF0	; 240
 156:	99 8b       	std	Y+17, r25	; 0x11
 158:	88 8b       	std	Y+16, r24	; 0x10
	
	// Two's complement of m
	mant0 = ~mant0;
 15a:	8b 81       	ldd	r24, Y+3	; 0x03
 15c:	9c 81       	ldd	r25, Y+4	; 0x04
 15e:	80 95       	com	r24
 160:	90 95       	com	r25
 162:	9c 83       	std	Y+4, r25	; 0x04
 164:	8b 83       	std	Y+3, r24	; 0x03
	mant0 += 0x0001;
 166:	8b 81       	ldd	r24, Y+3	; 0x03
 168:	9c 81       	ldd	r25, Y+4	; 0x04
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	9c 83       	std	Y+4, r25	; 0x04
 16e:	8b 83       	std	Y+3, r24	; 0x03
	mant0 &= 0x07FF;
 170:	8b 81       	ldd	r24, Y+3	; 0x03
 172:	9c 81       	ldd	r25, Y+4	; 0x04
 174:	97 70       	andi	r25, 0x07	; 7
 176:	9c 83       	std	Y+4, r25	; 0x04
 178:	8b 83       	std	Y+3, r24	; 0x03
	
	// Fill register S with -m
	US = mant0 >> 4;
 17a:	8b 81       	ldd	r24, Y+3	; 0x03
 17c:	9c 81       	ldd	r25, Y+4	; 0x04
 17e:	92 95       	swap	r25
 180:	82 95       	swap	r24
 182:	8f 70       	andi	r24, 0x0F	; 15
 184:	89 27       	eor	r24, r25
 186:	9f 70       	andi	r25, 0x0F	; 15
 188:	89 27       	eor	r24, r25
 18a:	8e 87       	std	Y+14, r24	; 0x0e
	S = mant0 << 12;
 18c:	8b 81       	ldd	r24, Y+3	; 0x03
 18e:	9c 81       	ldd	r25, Y+4	; 0x04
 190:	98 2f       	mov	r25, r24
 192:	88 27       	eor	r24, r24
 194:	92 95       	swap	r25
 196:	90 7f       	andi	r25, 0xF0	; 240
 198:	9b 8b       	std	Y+19, r25	; 0x13
 19a:	8a 8b       	std	Y+18, r24	; 0x12
	
	// Fill register P
	P = mant1 << 1;
 19c:	8d 81       	ldd	r24, Y+5	; 0x05
 19e:	9e 81       	ldd	r25, Y+6	; 0x06
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	9d 8b       	std	Y+21, r25	; 0x15
 1a6:	8c 8b       	std	Y+20, r24	; 0x14
	for(i = 0x0000; i < 11; i++)
 1a8:	18 86       	std	Y+8, r1	; 0x08
 1aa:	1f 82       	std	Y+7, r1	; 0x07
 1ac:	8f 81       	ldd	r24, Y+7	; 0x07
 1ae:	98 85       	ldd	r25, Y+8	; 0x08
 1b0:	0b 97       	sbiw	r24, 0x0b	; 11
 1b2:	08 f0       	brcs	.+2      	; 0x1b6 <float_mult+0x124>
 1b4:	71 c0       	rjmp	.+226    	; 0x298 <float_mult+0x206>
	{
		if((P & 0x0003) == 0x0001)
 1b6:	8c 89       	ldd	r24, Y+20	; 0x14
 1b8:	9d 89       	ldd	r25, Y+21	; 0x15
 1ba:	83 70       	andi	r24, 0x03	; 3
 1bc:	99 27       	eor	r25, r25
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	e9 f4       	brne	.+58     	; 0x1fc <float_mult+0x16a>
		{
			P += A;
 1c2:	28 89       	ldd	r18, Y+16	; 0x10
 1c4:	39 89       	ldd	r19, Y+17	; 0x11
 1c6:	8c 89       	ldd	r24, Y+20	; 0x14
 1c8:	9d 89       	ldd	r25, Y+21	; 0x15
 1ca:	82 0f       	add	r24, r18
 1cc:	93 1f       	adc	r25, r19
 1ce:	9d 8b       	std	Y+21, r25	; 0x15
 1d0:	8c 8b       	std	Y+20, r24	; 0x14
			if(P < A)
 1d2:	2c 89       	ldd	r18, Y+20	; 0x14
 1d4:	3d 89       	ldd	r19, Y+21	; 0x15
 1d6:	88 89       	ldd	r24, Y+16	; 0x10
 1d8:	99 89       	ldd	r25, Y+17	; 0x11
 1da:	28 17       	cp	r18, r24
 1dc:	39 07       	cpc	r19, r25
 1de:	30 f4       	brcc	.+12     	; 0x1ec <float_mult+0x15a>
				UP += UA + 1;
 1e0:	9d 85       	ldd	r25, Y+13	; 0x0d
 1e2:	8f 85       	ldd	r24, Y+15	; 0x0f
 1e4:	89 0f       	add	r24, r25
 1e6:	8f 5f       	subi	r24, 0xFF	; 255
 1e8:	8f 87       	std	Y+15, r24	; 0x0f
 1ea:	04 c0       	rjmp	.+8      	; 0x1f4 <float_mult+0x162>
			else
				UP += UA;
 1ec:	9d 85       	ldd	r25, Y+13	; 0x0d
 1ee:	8f 85       	ldd	r24, Y+15	; 0x0f
 1f0:	89 0f       	add	r24, r25
 1f2:	8f 87       	std	Y+15, r24	; 0x0f
			UP &= 0x7F;
 1f4:	8f 85       	ldd	r24, Y+15	; 0x0f
 1f6:	8f 77       	andi	r24, 0x7F	; 127
 1f8:	8f 87       	std	Y+15, r24	; 0x0f
 1fa:	1f c0       	rjmp	.+62     	; 0x23a <float_mult+0x1a8>
		}
		else if((P & 0x0003) == 0x0002)
 1fc:	8c 89       	ldd	r24, Y+20	; 0x14
 1fe:	9d 89       	ldd	r25, Y+21	; 0x15
 200:	83 70       	andi	r24, 0x03	; 3
 202:	99 27       	eor	r25, r25
 204:	02 97       	sbiw	r24, 0x02	; 2
 206:	c9 f4       	brne	.+50     	; 0x23a <float_mult+0x1a8>
		{
			P += S;
 208:	2a 89       	ldd	r18, Y+18	; 0x12
 20a:	3b 89       	ldd	r19, Y+19	; 0x13
 20c:	8c 89       	ldd	r24, Y+20	; 0x14
 20e:	9d 89       	ldd	r25, Y+21	; 0x15
 210:	82 0f       	add	r24, r18
 212:	93 1f       	adc	r25, r19
 214:	9d 8b       	std	Y+21, r25	; 0x15
 216:	8c 8b       	std	Y+20, r24	; 0x14
			if(P < S)
 218:	2c 89       	ldd	r18, Y+20	; 0x14
 21a:	3d 89       	ldd	r19, Y+21	; 0x15
 21c:	8a 89       	ldd	r24, Y+18	; 0x12
 21e:	9b 89       	ldd	r25, Y+19	; 0x13
 220:	28 17       	cp	r18, r24
 222:	39 07       	cpc	r19, r25
 224:	30 f4       	brcc	.+12     	; 0x232 <float_mult+0x1a0>
				UP = UP + US + 1;
 226:	9f 85       	ldd	r25, Y+15	; 0x0f
 228:	8e 85       	ldd	r24, Y+14	; 0x0e
 22a:	89 0f       	add	r24, r25
 22c:	8f 5f       	subi	r24, 0xFF	; 255
 22e:	8f 87       	std	Y+15, r24	; 0x0f
 230:	04 c0       	rjmp	.+8      	; 0x23a <float_mult+0x1a8>
			else
				UP += US;
 232:	9e 85       	ldd	r25, Y+14	; 0x0e
 234:	8f 85       	ldd	r24, Y+15	; 0x0f
 236:	89 0f       	add	r24, r25
 238:	8f 87       	std	Y+15, r24	; 0x0f
		}
		
		// Adjust for arithmetic shift
		if((UP & 0x40) == 0x40)
 23a:	8f 85       	ldd	r24, Y+15	; 0x0f
 23c:	86 ff       	sbrs	r24, 6
 23e:	04 c0       	rjmp	.+8      	; 0x248 <float_mult+0x1b6>
			UP |= 0x80;
 240:	8f 85       	ldd	r24, Y+15	; 0x0f
 242:	80 68       	ori	r24, 0x80	; 128
 244:	8f 87       	std	Y+15, r24	; 0x0f
 246:	03 c0       	rjmp	.+6      	; 0x24e <float_mult+0x1bc>
		else
			UP &= 0x7F;
 248:	8f 85       	ldd	r24, Y+15	; 0x0f
 24a:	8f 77       	andi	r24, 0x7F	; 127
 24c:	8f 87       	std	Y+15, r24	; 0x0f
		
		// Shift register P down to the right by 1
		if((UP & 0x01) == 0x01)
 24e:	8f 85       	ldd	r24, Y+15	; 0x0f
 250:	80 ff       	sbrs	r24, 0
 252:	0f c0       	rjmp	.+30     	; 0x272 <float_mult+0x1e0>
		{
			UP = UP >> 1;
 254:	8f 85       	ldd	r24, Y+15	; 0x0f
 256:	86 95       	lsr	r24
 258:	8f 87       	std	Y+15, r24	; 0x0f
			P = P >> 1;
 25a:	8c 89       	ldd	r24, Y+20	; 0x14
 25c:	9d 89       	ldd	r25, Y+21	; 0x15
 25e:	96 95       	lsr	r25
 260:	87 95       	ror	r24
 262:	9d 8b       	std	Y+21, r25	; 0x15
 264:	8c 8b       	std	Y+20, r24	; 0x14
			P |= 0x8000;
 266:	8c 89       	ldd	r24, Y+20	; 0x14
 268:	9d 89       	ldd	r25, Y+21	; 0x15
 26a:	90 68       	ori	r25, 0x80	; 128
 26c:	9d 8b       	std	Y+21, r25	; 0x15
 26e:	8c 8b       	std	Y+20, r24	; 0x14
 270:	09 c0       	rjmp	.+18     	; 0x284 <float_mult+0x1f2>
		}
		else
		{
			UP = UP >> 1;
 272:	8f 85       	ldd	r24, Y+15	; 0x0f
 274:	86 95       	lsr	r24
 276:	8f 87       	std	Y+15, r24	; 0x0f
			P = P >> 1;
 278:	8c 89       	ldd	r24, Y+20	; 0x14
 27a:	9d 89       	ldd	r25, Y+21	; 0x15
 27c:	96 95       	lsr	r25
 27e:	87 95       	ror	r24
 280:	9d 8b       	std	Y+21, r25	; 0x15
 282:	8c 8b       	std	Y+20, r24	; 0x14
	US = mant0 >> 4;
	S = mant0 << 12;
	
	// Fill register P
	P = mant1 << 1;
	for(i = 0x0000; i < 11; i++)
 284:	8f 81       	ldd	r24, Y+7	; 0x07
 286:	98 85       	ldd	r25, Y+8	; 0x08
 288:	01 96       	adiw	r24, 0x01	; 1
 28a:	98 87       	std	Y+8, r25	; 0x08
 28c:	8f 83       	std	Y+7, r24	; 0x07
 28e:	8f 81       	ldd	r24, Y+7	; 0x07
 290:	98 85       	ldd	r25, Y+8	; 0x08
 292:	0b 97       	sbiw	r24, 0x0b	; 11
 294:	08 f4       	brcc	.+2      	; 0x298 <float_mult+0x206>
 296:	8f cf       	rjmp	.-226    	; 0x1b6 <float_mult+0x124>
		}
	}
	
	// Final shift [rid the implicit 1 of P]
	// Note that final answer must be positive, hence, no arithmetic shift
	if((UP & 0x01) == 0x01)
 298:	8f 85       	ldd	r24, Y+15	; 0x0f
 29a:	80 ff       	sbrs	r24, 0
 29c:	0f c0       	rjmp	.+30     	; 0x2bc <float_mult+0x22a>
	{
		UP = UP >> 1;
 29e:	8f 85       	ldd	r24, Y+15	; 0x0f
 2a0:	86 95       	lsr	r24
 2a2:	8f 87       	std	Y+15, r24	; 0x0f
		P = P >> 1;
 2a4:	8c 89       	ldd	r24, Y+20	; 0x14
 2a6:	9d 89       	ldd	r25, Y+21	; 0x15
 2a8:	96 95       	lsr	r25
 2aa:	87 95       	ror	r24
 2ac:	9d 8b       	std	Y+21, r25	; 0x15
 2ae:	8c 8b       	std	Y+20, r24	; 0x14
		P |= 0x8000;
 2b0:	8c 89       	ldd	r24, Y+20	; 0x14
 2b2:	9d 89       	ldd	r25, Y+21	; 0x15
 2b4:	90 68       	ori	r25, 0x80	; 128
 2b6:	9d 8b       	std	Y+21, r25	; 0x15
 2b8:	8c 8b       	std	Y+20, r24	; 0x14
 2ba:	09 c0       	rjmp	.+18     	; 0x2ce <float_mult+0x23c>
	}
	else
	{
		UP = UP >> 1;
 2bc:	8f 85       	ldd	r24, Y+15	; 0x0f
 2be:	86 95       	lsr	r24
 2c0:	8f 87       	std	Y+15, r24	; 0x0f
		P = P >> 1;
 2c2:	8c 89       	ldd	r24, Y+20	; 0x14
 2c4:	9d 89       	ldd	r25, Y+21	; 0x15
 2c6:	96 95       	lsr	r25
 2c8:	87 95       	ror	r24
 2ca:	9d 8b       	std	Y+21, r25	; 0x15
 2cc:	8c 8b       	std	Y+20, r24	; 0x14
	}
	
	// Normalize the result
	if(UP > 0x04)				// [Mantissa too large]
 2ce:	8f 85       	ldd	r24, Y+15	; 0x0f
 2d0:	85 30       	cpi	r24, 0x05	; 5
 2d2:	40 f1       	brcs	.+80     	; 0x324 <float_mult+0x292>
	{
		while(UP > 0x04)
 2d4:	8f 85       	ldd	r24, Y+15	; 0x0f
 2d6:	85 30       	cpi	r24, 0x05	; 5
 2d8:	08 f4       	brcc	.+2      	; 0x2dc <float_mult+0x24a>
 2da:	4c c0       	rjmp	.+152    	; 0x374 <float_mult+0x2e2>
		{
			if((UP & 0x01) == 0x01)
 2dc:	8f 85       	ldd	r24, Y+15	; 0x0f
 2de:	80 ff       	sbrs	r24, 0
 2e0:	0f c0       	rjmp	.+30     	; 0x300 <float_mult+0x26e>
			{
				UP = UP >> 1;
 2e2:	8f 85       	ldd	r24, Y+15	; 0x0f
 2e4:	86 95       	lsr	r24
 2e6:	8f 87       	std	Y+15, r24	; 0x0f
				P = P >> 1;
 2e8:	8c 89       	ldd	r24, Y+20	; 0x14
 2ea:	9d 89       	ldd	r25, Y+21	; 0x15
 2ec:	96 95       	lsr	r25
 2ee:	87 95       	ror	r24
 2f0:	9d 8b       	std	Y+21, r25	; 0x15
 2f2:	8c 8b       	std	Y+20, r24	; 0x14
				P |= 0x8000;
 2f4:	8c 89       	ldd	r24, Y+20	; 0x14
 2f6:	9d 89       	ldd	r25, Y+21	; 0x15
 2f8:	90 68       	ori	r25, 0x80	; 128
 2fa:	9d 8b       	std	Y+21, r25	; 0x15
 2fc:	8c 8b       	std	Y+20, r24	; 0x14
 2fe:	09 c0       	rjmp	.+18     	; 0x312 <float_mult+0x280>
			}
			else
			{
				UP = UP >> 1;
 300:	8f 85       	ldd	r24, Y+15	; 0x0f
 302:	86 95       	lsr	r24
 304:	8f 87       	std	Y+15, r24	; 0x0f
				P = P >> 1;
 306:	8c 89       	ldd	r24, Y+20	; 0x14
 308:	9d 89       	ldd	r25, Y+21	; 0x15
 30a:	96 95       	lsr	r25
 30c:	87 95       	ror	r24
 30e:	9d 8b       	std	Y+21, r25	; 0x15
 310:	8c 8b       	std	Y+20, r24	; 0x14
			}
			exp += 0x0001;		// Update exponent
 312:	89 85       	ldd	r24, Y+9	; 0x09
 314:	9a 85       	ldd	r25, Y+10	; 0x0a
 316:	01 96       	adiw	r24, 0x01	; 1
 318:	9a 87       	std	Y+10, r25	; 0x0a
 31a:	89 87       	std	Y+9, r24	; 0x09
	}
	
	// Normalize the result
	if(UP > 0x04)				// [Mantissa too large]
	{
		while(UP > 0x04)
 31c:	8f 85       	ldd	r24, Y+15	; 0x0f
 31e:	85 30       	cpi	r24, 0x05	; 5
 320:	e8 f6       	brcc	.-70     	; 0x2dc <float_mult+0x24a>
 322:	28 c0       	rjmp	.+80     	; 0x374 <float_mult+0x2e2>
				P = P >> 1;
			}
			exp += 0x0001;		// Update exponent
		}
	}
	else if(UP < 0x04)			// [Mantissa too small]
 324:	8f 85       	ldd	r24, Y+15	; 0x0f
 326:	84 30       	cpi	r24, 0x04	; 4
 328:	28 f5       	brcc	.+74     	; 0x374 <float_mult+0x2e2>
	{
		while(UP < 0x04)
 32a:	8f 85       	ldd	r24, Y+15	; 0x0f
 32c:	84 30       	cpi	r24, 0x04	; 4
 32e:	10 f5       	brcc	.+68     	; 0x374 <float_mult+0x2e2>
		{
			if((P & 0x8000) == 0x8000)
 330:	8c 89       	ldd	r24, Y+20	; 0x14
 332:	9d 89       	ldd	r25, Y+21	; 0x15
 334:	99 23       	and	r25, r25
 336:	6c f4       	brge	.+26     	; 0x352 <float_mult+0x2c0>
			{
				P = P << 1;
 338:	8c 89       	ldd	r24, Y+20	; 0x14
 33a:	9d 89       	ldd	r25, Y+21	; 0x15
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	9d 8b       	std	Y+21, r25	; 0x15
 342:	8c 8b       	std	Y+20, r24	; 0x14
				UP = UP << 1;
 344:	8f 85       	ldd	r24, Y+15	; 0x0f
 346:	88 0f       	add	r24, r24
 348:	8f 87       	std	Y+15, r24	; 0x0f
				UP |= 0x01;
 34a:	8f 85       	ldd	r24, Y+15	; 0x0f
 34c:	81 60       	ori	r24, 0x01	; 1
 34e:	8f 87       	std	Y+15, r24	; 0x0f
 350:	09 c0       	rjmp	.+18     	; 0x364 <float_mult+0x2d2>
			}
			else
			{
				P = P << 1;
 352:	8c 89       	ldd	r24, Y+20	; 0x14
 354:	9d 89       	ldd	r25, Y+21	; 0x15
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	9d 8b       	std	Y+21, r25	; 0x15
 35c:	8c 8b       	std	Y+20, r24	; 0x14
				UP = UP << 1;
 35e:	8f 85       	ldd	r24, Y+15	; 0x0f
 360:	88 0f       	add	r24, r24
 362:	8f 87       	std	Y+15, r24	; 0x0f
			}
			exp -= 0x0001;
 364:	89 85       	ldd	r24, Y+9	; 0x09
 366:	9a 85       	ldd	r25, Y+10	; 0x0a
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	9a 87       	std	Y+10, r25	; 0x0a
 36c:	89 87       	std	Y+9, r24	; 0x09
			exp += 0x0001;		// Update exponent
		}
	}
	else if(UP < 0x04)			// [Mantissa too small]
	{
		while(UP < 0x04)
 36e:	8f 85       	ldd	r24, Y+15	; 0x0f
 370:	84 30       	cpi	r24, 0x04	; 4
 372:	f0 f2       	brcs	.-68     	; 0x330 <float_mult+0x29e>
			exp -= 0x0001;
		}
	}
	
	// Check for overflow
	if(exp > 0x003F)
 374:	89 85       	ldd	r24, Y+9	; 0x09
 376:	9a 85       	ldd	r25, Y+10	; 0x0a
 378:	80 34       	cpi	r24, 0x40	; 64
 37a:	91 05       	cpc	r25, r1
 37c:	38 f0       	brcs	.+14     	; 0x38c <float_mult+0x2fa>
	{
		// Max out the range
		final |= 0x3FFF;
 37e:	8b 85       	ldd	r24, Y+11	; 0x0b
 380:	9c 85       	ldd	r25, Y+12	; 0x0c
 382:	8f 6f       	ori	r24, 0xFF	; 255
 384:	9f 63       	ori	r25, 0x3F	; 63
 386:	9c 87       	std	Y+12, r25	; 0x0c
 388:	8b 87       	std	Y+11, r24	; 0x0b
 38a:	28 c0       	rjmp	.+80     	; 0x3dc <float_mult+0x34a>
	}
	// Check for underflow
	else if(exp < 0x001F)
 38c:	89 85       	ldd	r24, Y+9	; 0x09
 38e:	9a 85       	ldd	r25, Y+10	; 0x0a
 390:	4f 97       	sbiw	r24, 0x1f	; 31
 392:	18 f4       	brcc	.+6      	; 0x39a <float_mult+0x308>
	{
		// Set to 0
		final = 0x0000;
 394:	1c 86       	std	Y+12, r1	; 0x0c
 396:	1b 86       	std	Y+11, r1	; 0x0b
 398:	21 c0       	rjmp	.+66     	; 0x3dc <float_mult+0x34a>
	}
	else
	{
		final |= exp << 9;
 39a:	89 85       	ldd	r24, Y+9	; 0x09
 39c:	9a 85       	ldd	r25, Y+10	; 0x0a
 39e:	2b 85       	ldd	r18, Y+11	; 0x0b
 3a0:	3c 85       	ldd	r19, Y+12	; 0x0c
 3a2:	98 2f       	mov	r25, r24
 3a4:	88 27       	eor	r24, r24
 3a6:	99 0f       	add	r25, r25
 3a8:	82 2b       	or	r24, r18
 3aa:	93 2b       	or	r25, r19
 3ac:	9c 87       	std	Y+12, r25	; 0x0c
 3ae:	8b 87       	std	Y+11, r24	; 0x0b
		final |= UP << 6;
 3b0:	8f 85       	ldd	r24, Y+15	; 0x0f
 3b2:	2b 85       	ldd	r18, Y+11	; 0x0b
 3b4:	3c 85       	ldd	r19, Y+12	; 0x0c
 3b6:	40 e4       	ldi	r20, 0x40	; 64
 3b8:	84 9f       	mul	r24, r20
 3ba:	c0 01       	movw	r24, r0
 3bc:	11 24       	eor	r1, r1
 3be:	82 2b       	or	r24, r18
 3c0:	93 2b       	or	r25, r19
 3c2:	9c 87       	std	Y+12, r25	; 0x0c
 3c4:	8b 87       	std	Y+11, r24	; 0x0b
		final |= P >> 9;
 3c6:	8c 89       	ldd	r24, Y+20	; 0x14
 3c8:	9d 89       	ldd	r25, Y+21	; 0x15
 3ca:	2b 85       	ldd	r18, Y+11	; 0x0b
 3cc:	3c 85       	ldd	r19, Y+12	; 0x0c
 3ce:	89 2f       	mov	r24, r25
 3d0:	99 27       	eor	r25, r25
 3d2:	86 95       	lsr	r24
 3d4:	82 2b       	or	r24, r18
 3d6:	93 2b       	or	r25, r19
 3d8:	9c 87       	std	Y+12, r25	; 0x0c
 3da:	8b 87       	std	Y+11, r24	; 0x0b
	}
	return final;
 3dc:	8b 85       	ldd	r24, Y+11	; 0x0b
 3de:	9c 85       	ldd	r25, Y+12	; 0x0c
 3e0:	69 96       	adiw	r28, 0x19	; 25
 3e2:	0f b6       	in	r0, 0x3f	; 63
 3e4:	f8 94       	cli
 3e6:	de bf       	out	0x3e, r29	; 62
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	cd bf       	out	0x3d, r28	; 61
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	08 95       	ret

000003f2 <main>:
uint16_t float_add(volatile uint16_t a, volatile uint16_t b);
uint16_t float_mult(volatile uint16_t a, volatile uint16_t b);

int main(void)
{
	PORTC = (1 << 5) | (1 << 4);	// Pull-up the resistors on the SDA and SCL line
 3f2:	80 e3       	ldi	r24, 0x30	; 48
 3f4:	88 b9       	out	0x08, r24	; 8
	i2c_init();						// Initialize DAC module [Look at function for specific speed]
 3f6:	0e 94 40 00 	call	0x80	; 0x80 <i2c_init>
	
	uint16_t a = 0x4608;
	uint16_t b = 0xC8D8;
	uint16_t c = 0x0000;
	c = float_mult(a, b);
 3fa:	68 ed       	ldi	r22, 0xD8	; 216
 3fc:	78 ec       	ldi	r23, 0xC8	; 200
 3fe:	88 e0       	ldi	r24, 0x08	; 8
 400:	96 e4       	ldi	r25, 0x46	; 70
 402:	0e 94 49 00 	call	0x92	; 0x92 <float_mult>
	
	PORTB = c;
 406:	85 b9       	out	0x05, r24	; 5
	PORTB = 0x00;
 408:	15 b8       	out	0x05, r1	; 5
 40a:	ff cf       	rjmp	.-2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>

0000040c <_exit>:
 40c:	f8 94       	cli

0000040e <__stop_program>:
 40e:	ff cf       	rjmp	.-2      	; 0x40e <__stop_program>
