
Lorenz_32-bit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000121a  000012ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000121a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800110  00800110  000012be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000012f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000132c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b2a  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000069b  00000000  00000000  00001e86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005f6  00000000  00000000  00002521  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00002b18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a8  00000000  00000000  00002bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ce  00000000  00000000  00002f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00003232  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e1       	ldi	r30, 0x1A	; 26
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 31       	cpi	r26, 0x10	; 16
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a0 e1       	ldi	r26, 0x10	; 16
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a0 32       	cpi	r26, 0x20	; 32
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <main>
      9e:	0c 94 0b 09 	jmp	0x1216	; 0x1216 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <float_add>:
		z = float_add(z, dz, ADD);
    }
}

uint32_t float_add(uint32_t A, uint32_t B, uint8_t OP)
{
      a6:	0f 93       	push	r16
      a8:	cf 93       	push	r28
      aa:	df 93       	push	r29
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
      b0:	a1 97       	sbiw	r28, 0x21	; 33
      b2:	0f b6       	in	r0, 0x3f	; 63
      b4:	f8 94       	cli
      b6:	de bf       	out	0x3e, r29	; 62
      b8:	0f be       	out	0x3f, r0	; 63
      ba:	cd bf       	out	0x3d, r28	; 61
	// Save function arguments
	volatile uint32_t a = A;
      bc:	69 83       	std	Y+1, r22	; 0x01
      be:	7a 83       	std	Y+2, r23	; 0x02
      c0:	8b 83       	std	Y+3, r24	; 0x03
      c2:	9c 83       	std	Y+4, r25	; 0x04
	volatile uint32_t b = B;
      c4:	2d 83       	std	Y+5, r18	; 0x05
      c6:	3e 83       	std	Y+6, r19	; 0x06
      c8:	4f 83       	std	Y+7, r20	; 0x07
      ca:	58 87       	std	Y+8, r21	; 0x08
	volatile uint8_t sub = OP;
      cc:	09 87       	std	Y+9, r16	; 0x09
	
	// Operand a
	volatile uint8_t exp0 = a >> 23;							// Extract the exponent field of a
      ce:	89 81       	ldd	r24, Y+1	; 0x01
      d0:	9a 81       	ldd	r25, Y+2	; 0x02
      d2:	ab 81       	ldd	r26, Y+3	; 0x03
      d4:	bc 81       	ldd	r27, Y+4	; 0x04
      d6:	07 2e       	mov	r0, r23
      d8:	77 e1       	ldi	r23, 0x17	; 23
      da:	b6 95       	lsr	r27
      dc:	a7 95       	ror	r26
      de:	97 95       	ror	r25
      e0:	87 95       	ror	r24
      e2:	7a 95       	dec	r23
      e4:	d1 f7       	brne	.-12     	; 0xda <float_add+0x34>
      e6:	70 2d       	mov	r23, r0
      e8:	8a 87       	std	Y+10, r24	; 0x0a
	volatile uint32_t mant0 = (a & 0x007FFFFF) | 0x00800000;	// Extract the mantissa field of a
      ea:	89 81       	ldd	r24, Y+1	; 0x01
      ec:	9a 81       	ldd	r25, Y+2	; 0x02
      ee:	ab 81       	ldd	r26, Y+3	; 0x03
      f0:	bc 81       	ldd	r27, Y+4	; 0x04
      f2:	af 77       	andi	r26, 0x7F	; 127
      f4:	bb 27       	eor	r27, r27
      f6:	a0 68       	ori	r26, 0x80	; 128
      f8:	8b 87       	std	Y+11, r24	; 0x0b
      fa:	9c 87       	std	Y+12, r25	; 0x0c
      fc:	ad 87       	std	Y+13, r26	; 0x0d
      fe:	be 87       	std	Y+14, r27	; 0x0e
	
	// Operand b
	volatile uint8_t exp1 = b >> 23;							// Extract the exponent field of b
     100:	8d 81       	ldd	r24, Y+5	; 0x05
     102:	9e 81       	ldd	r25, Y+6	; 0x06
     104:	af 81       	ldd	r26, Y+7	; 0x07
     106:	b8 85       	ldd	r27, Y+8	; 0x08
     108:	07 2e       	mov	r0, r23
     10a:	77 e1       	ldi	r23, 0x17	; 23
     10c:	b6 95       	lsr	r27
     10e:	a7 95       	ror	r26
     110:	97 95       	ror	r25
     112:	87 95       	ror	r24
     114:	7a 95       	dec	r23
     116:	d1 f7       	brne	.-12     	; 0x10c <float_add+0x66>
     118:	70 2d       	mov	r23, r0
     11a:	8f 87       	std	Y+15, r24	; 0x0f
	volatile uint32_t mant1 = (b & 0x007FFFFF) | 0x00800000;	// Extract the mantissa field of b
     11c:	8d 81       	ldd	r24, Y+5	; 0x05
     11e:	9e 81       	ldd	r25, Y+6	; 0x06
     120:	af 81       	ldd	r26, Y+7	; 0x07
     122:	b8 85       	ldd	r27, Y+8	; 0x08
     124:	af 77       	andi	r26, 0x7F	; 127
     126:	bb 27       	eor	r27, r27
     128:	a0 68       	ori	r26, 0x80	; 128
     12a:	88 8b       	std	Y+16, r24	; 0x10
     12c:	99 8b       	std	Y+17, r25	; 0x11
     12e:	aa 8b       	std	Y+18, r26	; 0x12
     130:	bb 8b       	std	Y+19, r27	; 0x13
	
	// Final result
	volatile int16_t exp = 0;		// Final exponent
     132:	1d 8a       	std	Y+21, r1	; 0x15
     134:	1c 8a       	std	Y+20, r1	; 0x14
	volatile uint32_t final = 0;	// Result to be returned
     136:	1e 8a       	std	Y+22, r1	; 0x16
     138:	1f 8a       	std	Y+23, r1	; 0x17
     13a:	18 8e       	std	Y+24, r1	; 0x18
     13c:	19 8e       	std	Y+25, r1	; 0x19
	volatile uint32_t mant = 0;		// Final mantissa
     13e:	1a 8e       	std	Y+26, r1	; 0x1a
     140:	1b 8e       	std	Y+27, r1	; 0x1b
     142:	1c 8e       	std	Y+28, r1	; 0x1c
     144:	1d 8e       	std	Y+29, r1	; 0x1d
	
	// Temporary variables
	volatile uint32_t temp = 0;
     146:	1e 8e       	std	Y+30, r1	; 0x1e
     148:	1f 8e       	std	Y+31, r1	; 0x1f
     14a:	18 a2       	std	Y+32, r1	; 0x20
     14c:	19 a2       	std	Y+33, r1	; 0x21
	
	// Check if the operation is subtraction
	if(sub > 0)
     14e:	89 85       	ldd	r24, Y+9	; 0x09
     150:	88 23       	and	r24, r24
     152:	49 f0       	breq	.+18     	; 0x166 <float_add+0xc0>
		b |= 0x80000000;
     154:	8d 81       	ldd	r24, Y+5	; 0x05
     156:	9e 81       	ldd	r25, Y+6	; 0x06
     158:	af 81       	ldd	r26, Y+7	; 0x07
     15a:	b8 85       	ldd	r27, Y+8	; 0x08
     15c:	b0 68       	ori	r27, 0x80	; 128
     15e:	8d 83       	std	Y+5, r24	; 0x05
     160:	9e 83       	std	Y+6, r25	; 0x06
     162:	af 83       	std	Y+7, r26	; 0x07
     164:	b8 87       	std	Y+8, r27	; 0x08
	
	// Adjust and compute the exponent
	if(exp0 > exp1)						// exp(a) > exp(b)
     166:	9a 85       	ldd	r25, Y+10	; 0x0a
     168:	8f 85       	ldd	r24, Y+15	; 0x0f
     16a:	89 17       	cp	r24, r25
     16c:	28 f5       	brcc	.+74     	; 0x1b8 <float_add+0x112>
	{
		temp = exp0 - exp1;				// shift amount = exp(a) - exp(b)
     16e:	8a 85       	ldd	r24, Y+10	; 0x0a
     170:	2f 85       	ldd	r18, Y+15	; 0x0f
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	82 1b       	sub	r24, r18
     176:	91 09       	sbc	r25, r1
     178:	09 2e       	mov	r0, r25
     17a:	00 0c       	add	r0, r0
     17c:	aa 0b       	sbc	r26, r26
     17e:	bb 0b       	sbc	r27, r27
     180:	8e 8f       	std	Y+30, r24	; 0x1e
     182:	9f 8f       	std	Y+31, r25	; 0x1f
     184:	a8 a3       	std	Y+32, r26	; 0x20
     186:	b9 a3       	std	Y+33, r27	; 0x21
		exp = exp0;
     188:	8a 85       	ldd	r24, Y+10	; 0x0a
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	9d 8b       	std	Y+21, r25	; 0x15
     18e:	8c 8b       	std	Y+20, r24	; 0x14
		mant1 = mant1 >> temp;			// Adjust B
     190:	88 89       	ldd	r24, Y+16	; 0x10
     192:	99 89       	ldd	r25, Y+17	; 0x11
     194:	aa 89       	ldd	r26, Y+18	; 0x12
     196:	bb 89       	ldd	r27, Y+19	; 0x13
     198:	4e 8d       	ldd	r20, Y+30	; 0x1e
     19a:	5f 8d       	ldd	r21, Y+31	; 0x1f
     19c:	68 a1       	ldd	r22, Y+32	; 0x20
     19e:	79 a1       	ldd	r23, Y+33	; 0x21
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <float_add+0x104>
     1a2:	b6 95       	lsr	r27
     1a4:	a7 95       	ror	r26
     1a6:	97 95       	ror	r25
     1a8:	87 95       	ror	r24
     1aa:	4a 95       	dec	r20
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <float_add+0xfc>
     1ae:	88 8b       	std	Y+16, r24	; 0x10
     1b0:	99 8b       	std	Y+17, r25	; 0x11
     1b2:	aa 8b       	std	Y+18, r26	; 0x12
     1b4:	bb 8b       	std	Y+19, r27	; 0x13
     1b6:	2d c0       	rjmp	.+90     	; 0x212 <float_add+0x16c>
	}
	else if(exp1 > exp0)				// b > a
     1b8:	9f 85       	ldd	r25, Y+15	; 0x0f
     1ba:	8a 85       	ldd	r24, Y+10	; 0x0a
     1bc:	89 17       	cp	r24, r25
     1be:	28 f5       	brcc	.+74     	; 0x20a <float_add+0x164>
	{
		temp = exp1 - exp0;				// shift amount = exp(b) - exp(a)
     1c0:	8f 85       	ldd	r24, Y+15	; 0x0f
     1c2:	2a 85       	ldd	r18, Y+10	; 0x0a
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	82 1b       	sub	r24, r18
     1c8:	91 09       	sbc	r25, r1
     1ca:	09 2e       	mov	r0, r25
     1cc:	00 0c       	add	r0, r0
     1ce:	aa 0b       	sbc	r26, r26
     1d0:	bb 0b       	sbc	r27, r27
     1d2:	8e 8f       	std	Y+30, r24	; 0x1e
     1d4:	9f 8f       	std	Y+31, r25	; 0x1f
     1d6:	a8 a3       	std	Y+32, r26	; 0x20
     1d8:	b9 a3       	std	Y+33, r27	; 0x21
		exp = exp1;
     1da:	8f 85       	ldd	r24, Y+15	; 0x0f
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	9d 8b       	std	Y+21, r25	; 0x15
     1e0:	8c 8b       	std	Y+20, r24	; 0x14
		mant0 = mant0 >> temp;			// Adjust A
     1e2:	8b 85       	ldd	r24, Y+11	; 0x0b
     1e4:	9c 85       	ldd	r25, Y+12	; 0x0c
     1e6:	ad 85       	ldd	r26, Y+13	; 0x0d
     1e8:	be 85       	ldd	r27, Y+14	; 0x0e
     1ea:	4e 8d       	ldd	r20, Y+30	; 0x1e
     1ec:	5f 8d       	ldd	r21, Y+31	; 0x1f
     1ee:	68 a1       	ldd	r22, Y+32	; 0x20
     1f0:	79 a1       	ldd	r23, Y+33	; 0x21
     1f2:	04 c0       	rjmp	.+8      	; 0x1fc <float_add+0x156>
     1f4:	b6 95       	lsr	r27
     1f6:	a7 95       	ror	r26
     1f8:	97 95       	ror	r25
     1fa:	87 95       	ror	r24
     1fc:	4a 95       	dec	r20
     1fe:	d2 f7       	brpl	.-12     	; 0x1f4 <float_add+0x14e>
     200:	8b 87       	std	Y+11, r24	; 0x0b
     202:	9c 87       	std	Y+12, r25	; 0x0c
     204:	ad 87       	std	Y+13, r26	; 0x0d
     206:	be 87       	std	Y+14, r27	; 0x0e
     208:	04 c0       	rjmp	.+8      	; 0x212 <float_add+0x16c>
	}
	else
	{
		exp = exp0;						// Equal exponents
     20a:	8a 85       	ldd	r24, Y+10	; 0x0a
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	9d 8b       	std	Y+21, r25	; 0x15
     210:	8c 8b       	std	Y+20, r24	; 0x14
	}
	
	// Same signs [a + b] or [(-a) + (-b)]
	if((a & 0x80000000) == (b & 0x80000000))
     212:	49 81       	ldd	r20, Y+1	; 0x01
     214:	5a 81       	ldd	r21, Y+2	; 0x02
     216:	6b 81       	ldd	r22, Y+3	; 0x03
     218:	7c 81       	ldd	r23, Y+4	; 0x04
     21a:	8d 81       	ldd	r24, Y+5	; 0x05
     21c:	9e 81       	ldd	r25, Y+6	; 0x06
     21e:	af 81       	ldd	r26, Y+7	; 0x07
     220:	b8 85       	ldd	r27, Y+8	; 0x08
     222:	84 27       	eor	r24, r20
     224:	95 27       	eor	r25, r21
     226:	a6 27       	eor	r26, r22
     228:	b7 27       	eor	r27, r23
     22a:	bb 23       	and	r27, r27
     22c:	0c f4       	brge	.+2      	; 0x230 <float_add+0x18a>
     22e:	3f c0       	rjmp	.+126    	; 0x2ae <float_add+0x208>
	{
		final |= (a & 0x80000000);		// Set sign
     230:	89 81       	ldd	r24, Y+1	; 0x01
     232:	9a 81       	ldd	r25, Y+2	; 0x02
     234:	ab 81       	ldd	r26, Y+3	; 0x03
     236:	bc 81       	ldd	r27, Y+4	; 0x04
     238:	4e 89       	ldd	r20, Y+22	; 0x16
     23a:	5f 89       	ldd	r21, Y+23	; 0x17
     23c:	68 8d       	ldd	r22, Y+24	; 0x18
     23e:	79 8d       	ldd	r23, Y+25	; 0x19
     240:	88 27       	eor	r24, r24
     242:	99 27       	eor	r25, r25
     244:	aa 27       	eor	r26, r26
     246:	b0 78       	andi	r27, 0x80	; 128
     248:	84 2b       	or	r24, r20
     24a:	95 2b       	or	r25, r21
     24c:	a6 2b       	or	r26, r22
     24e:	b7 2b       	or	r27, r23
     250:	8e 8b       	std	Y+22, r24	; 0x16
     252:	9f 8b       	std	Y+23, r25	; 0x17
     254:	a8 8f       	std	Y+24, r26	; 0x18
     256:	b9 8f       	std	Y+25, r27	; 0x19
		mant = mant0 + mant1;			// Add the two mantissas
     258:	4b 85       	ldd	r20, Y+11	; 0x0b
     25a:	5c 85       	ldd	r21, Y+12	; 0x0c
     25c:	6d 85       	ldd	r22, Y+13	; 0x0d
     25e:	7e 85       	ldd	r23, Y+14	; 0x0e
     260:	88 89       	ldd	r24, Y+16	; 0x10
     262:	99 89       	ldd	r25, Y+17	; 0x11
     264:	aa 89       	ldd	r26, Y+18	; 0x12
     266:	bb 89       	ldd	r27, Y+19	; 0x13
     268:	84 0f       	add	r24, r20
     26a:	95 1f       	adc	r25, r21
     26c:	a6 1f       	adc	r26, r22
     26e:	b7 1f       	adc	r27, r23
     270:	8a 8f       	std	Y+26, r24	; 0x1a
     272:	9b 8f       	std	Y+27, r25	; 0x1b
     274:	ac 8f       	std	Y+28, r26	; 0x1c
     276:	bd 8f       	std	Y+29, r27	; 0x1d
		
		// Normalize the mantissa
		if(mant > 0x00FFFFFF)
     278:	8a 8d       	ldd	r24, Y+26	; 0x1a
     27a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     27c:	ac 8d       	ldd	r26, Y+28	; 0x1c
     27e:	bd 8d       	ldd	r27, Y+29	; 0x1d
     280:	00 97       	sbiw	r24, 0x00	; 0
     282:	a1 05       	cpc	r26, r1
     284:	b1 40       	sbci	r27, 0x01	; 1
     286:	08 f4       	brcc	.+2      	; 0x28a <float_add+0x1e4>
     288:	bb c0       	rjmp	.+374    	; 0x400 <__LOCK_REGION_LENGTH__>
		{
			mant = mant >> 1;			// Shift mantissa to adjust the floating point
     28a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     28c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     28e:	ac 8d       	ldd	r26, Y+28	; 0x1c
     290:	bd 8d       	ldd	r27, Y+29	; 0x1d
     292:	b6 95       	lsr	r27
     294:	a7 95       	ror	r26
     296:	97 95       	ror	r25
     298:	87 95       	ror	r24
     29a:	8a 8f       	std	Y+26, r24	; 0x1a
     29c:	9b 8f       	std	Y+27, r25	; 0x1b
     29e:	ac 8f       	std	Y+28, r26	; 0x1c
     2a0:	bd 8f       	std	Y+29, r27	; 0x1d
			exp += 1;					// Increment the exponent
     2a2:	8c 89       	ldd	r24, Y+20	; 0x14
     2a4:	9d 89       	ldd	r25, Y+21	; 0x15
     2a6:	01 96       	adiw	r24, 0x01	; 1
     2a8:	9d 8b       	std	Y+21, r25	; 0x15
     2aa:	8c 8b       	std	Y+20, r24	; 0x14
     2ac:	a9 c0       	rjmp	.+338    	; 0x400 <__LOCK_REGION_LENGTH__>
	}
	// Different signs
	else
	{
		// [a - b]
		if((b & 0x80000000) == 0x80000000)
     2ae:	8d 81       	ldd	r24, Y+5	; 0x05
     2b0:	9e 81       	ldd	r25, Y+6	; 0x06
     2b2:	af 81       	ldd	r26, Y+7	; 0x07
     2b4:	b8 85       	ldd	r27, Y+8	; 0x08
     2b6:	bb 23       	and	r27, r27
     2b8:	44 f5       	brge	.+80     	; 0x30a <float_add+0x264>
		{
			// Two's complement
			mant1 = ~mant1;
     2ba:	88 89       	ldd	r24, Y+16	; 0x10
     2bc:	99 89       	ldd	r25, Y+17	; 0x11
     2be:	aa 89       	ldd	r26, Y+18	; 0x12
     2c0:	bb 89       	ldd	r27, Y+19	; 0x13
     2c2:	80 95       	com	r24
     2c4:	90 95       	com	r25
     2c6:	a0 95       	com	r26
     2c8:	b0 95       	com	r27
     2ca:	88 8b       	std	Y+16, r24	; 0x10
     2cc:	99 8b       	std	Y+17, r25	; 0x11
     2ce:	aa 8b       	std	Y+18, r26	; 0x12
     2d0:	bb 8b       	std	Y+19, r27	; 0x13
			mant1 += 1;
     2d2:	88 89       	ldd	r24, Y+16	; 0x10
     2d4:	99 89       	ldd	r25, Y+17	; 0x11
     2d6:	aa 89       	ldd	r26, Y+18	; 0x12
     2d8:	bb 89       	ldd	r27, Y+19	; 0x13
     2da:	01 96       	adiw	r24, 0x01	; 1
     2dc:	a1 1d       	adc	r26, r1
     2de:	b1 1d       	adc	r27, r1
     2e0:	88 8b       	std	Y+16, r24	; 0x10
     2e2:	99 8b       	std	Y+17, r25	; 0x11
     2e4:	aa 8b       	std	Y+18, r26	; 0x12
     2e6:	bb 8b       	std	Y+19, r27	; 0x13
			// Perform the subtraction
			mant = mant0 + mant1;
     2e8:	4b 85       	ldd	r20, Y+11	; 0x0b
     2ea:	5c 85       	ldd	r21, Y+12	; 0x0c
     2ec:	6d 85       	ldd	r22, Y+13	; 0x0d
     2ee:	7e 85       	ldd	r23, Y+14	; 0x0e
     2f0:	88 89       	ldd	r24, Y+16	; 0x10
     2f2:	99 89       	ldd	r25, Y+17	; 0x11
     2f4:	aa 89       	ldd	r26, Y+18	; 0x12
     2f6:	bb 89       	ldd	r27, Y+19	; 0x13
     2f8:	84 0f       	add	r24, r20
     2fa:	95 1f       	adc	r25, r21
     2fc:	a6 1f       	adc	r26, r22
     2fe:	b7 1f       	adc	r27, r23
     300:	8a 8f       	std	Y+26, r24	; 0x1a
     302:	9b 8f       	std	Y+27, r25	; 0x1b
     304:	ac 8f       	std	Y+28, r26	; 0x1c
     306:	bd 8f       	std	Y+29, r27	; 0x1d
     308:	27 c0       	rjmp	.+78     	; 0x358 <float_add+0x2b2>
		}
		// [b - a]
		else
		{
			// Two's complement
			mant0 = ~mant0;
     30a:	8b 85       	ldd	r24, Y+11	; 0x0b
     30c:	9c 85       	ldd	r25, Y+12	; 0x0c
     30e:	ad 85       	ldd	r26, Y+13	; 0x0d
     310:	be 85       	ldd	r27, Y+14	; 0x0e
     312:	80 95       	com	r24
     314:	90 95       	com	r25
     316:	a0 95       	com	r26
     318:	b0 95       	com	r27
     31a:	8b 87       	std	Y+11, r24	; 0x0b
     31c:	9c 87       	std	Y+12, r25	; 0x0c
     31e:	ad 87       	std	Y+13, r26	; 0x0d
     320:	be 87       	std	Y+14, r27	; 0x0e
			mant0 += 1;
     322:	8b 85       	ldd	r24, Y+11	; 0x0b
     324:	9c 85       	ldd	r25, Y+12	; 0x0c
     326:	ad 85       	ldd	r26, Y+13	; 0x0d
     328:	be 85       	ldd	r27, Y+14	; 0x0e
     32a:	01 96       	adiw	r24, 0x01	; 1
     32c:	a1 1d       	adc	r26, r1
     32e:	b1 1d       	adc	r27, r1
     330:	8b 87       	std	Y+11, r24	; 0x0b
     332:	9c 87       	std	Y+12, r25	; 0x0c
     334:	ad 87       	std	Y+13, r26	; 0x0d
     336:	be 87       	std	Y+14, r27	; 0x0e
			// Perform the subtraction
			mant = mant0 + mant1;
     338:	4b 85       	ldd	r20, Y+11	; 0x0b
     33a:	5c 85       	ldd	r21, Y+12	; 0x0c
     33c:	6d 85       	ldd	r22, Y+13	; 0x0d
     33e:	7e 85       	ldd	r23, Y+14	; 0x0e
     340:	88 89       	ldd	r24, Y+16	; 0x10
     342:	99 89       	ldd	r25, Y+17	; 0x11
     344:	aa 89       	ldd	r26, Y+18	; 0x12
     346:	bb 89       	ldd	r27, Y+19	; 0x13
     348:	84 0f       	add	r24, r20
     34a:	95 1f       	adc	r25, r21
     34c:	a6 1f       	adc	r26, r22
     34e:	b7 1f       	adc	r27, r23
     350:	8a 8f       	std	Y+26, r24	; 0x1a
     352:	9b 8f       	std	Y+27, r25	; 0x1b
     354:	ac 8f       	std	Y+28, r26	; 0x1c
     356:	bd 8f       	std	Y+29, r27	; 0x1d
		}
		
		// Check if the value is negative, if so, absolute value the mantissa and set sign bit to 1
		if(mant > 0x00FFFFFF)
     358:	8a 8d       	ldd	r24, Y+26	; 0x1a
     35a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     35c:	ac 8d       	ldd	r26, Y+28	; 0x1c
     35e:	bd 8d       	ldd	r27, Y+29	; 0x1d
     360:	00 97       	sbiw	r24, 0x00	; 0
     362:	a1 05       	cpc	r26, r1
     364:	b1 40       	sbci	r27, 0x01	; 1
     366:	00 f1       	brcs	.+64     	; 0x3a8 <float_add+0x302>
		{
			mant = ~mant;
     368:	8a 8d       	ldd	r24, Y+26	; 0x1a
     36a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     36c:	ac 8d       	ldd	r26, Y+28	; 0x1c
     36e:	bd 8d       	ldd	r27, Y+29	; 0x1d
     370:	80 95       	com	r24
     372:	90 95       	com	r25
     374:	a0 95       	com	r26
     376:	b0 95       	com	r27
     378:	8a 8f       	std	Y+26, r24	; 0x1a
     37a:	9b 8f       	std	Y+27, r25	; 0x1b
     37c:	ac 8f       	std	Y+28, r26	; 0x1c
     37e:	bd 8f       	std	Y+29, r27	; 0x1d
			mant += 1;
     380:	8a 8d       	ldd	r24, Y+26	; 0x1a
     382:	9b 8d       	ldd	r25, Y+27	; 0x1b
     384:	ac 8d       	ldd	r26, Y+28	; 0x1c
     386:	bd 8d       	ldd	r27, Y+29	; 0x1d
     388:	01 96       	adiw	r24, 0x01	; 1
     38a:	a1 1d       	adc	r26, r1
     38c:	b1 1d       	adc	r27, r1
     38e:	8a 8f       	std	Y+26, r24	; 0x1a
     390:	9b 8f       	std	Y+27, r25	; 0x1b
     392:	ac 8f       	std	Y+28, r26	; 0x1c
     394:	bd 8f       	std	Y+29, r27	; 0x1d
			// Set sign as negative
			final |= 0x80000000;
     396:	8e 89       	ldd	r24, Y+22	; 0x16
     398:	9f 89       	ldd	r25, Y+23	; 0x17
     39a:	a8 8d       	ldd	r26, Y+24	; 0x18
     39c:	b9 8d       	ldd	r27, Y+25	; 0x19
     39e:	b0 68       	ori	r27, 0x80	; 128
     3a0:	8e 8b       	std	Y+22, r24	; 0x16
     3a2:	9f 8b       	std	Y+23, r25	; 0x17
     3a4:	a8 8f       	std	Y+24, r26	; 0x18
     3a6:	b9 8f       	std	Y+25, r27	; 0x19
		}
		
		// Normalize the mantissa
		if(mant > 0)
     3a8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     3aa:	9b 8d       	ldd	r25, Y+27	; 0x1b
     3ac:	ac 8d       	ldd	r26, Y+28	; 0x1c
     3ae:	bd 8d       	ldd	r27, Y+29	; 0x1d
     3b0:	89 2b       	or	r24, r25
     3b2:	8a 2b       	or	r24, r26
     3b4:	8b 2b       	or	r24, r27
     3b6:	11 f1       	breq	.+68     	; 0x3fc <float_add+0x356>
		{
			while(mant < 0x00800000)
     3b8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     3ba:	9b 8d       	ldd	r25, Y+27	; 0x1b
     3bc:	ac 8d       	ldd	r26, Y+28	; 0x1c
     3be:	bd 8d       	ldd	r27, Y+29	; 0x1d
     3c0:	00 97       	sbiw	r24, 0x00	; 0
     3c2:	a0 48       	sbci	r26, 0x80	; 128
     3c4:	b1 05       	cpc	r27, r1
     3c6:	e0 f4       	brcc	.+56     	; 0x400 <__LOCK_REGION_LENGTH__>
			{
				mant = mant << 1;
     3c8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     3ca:	9b 8d       	ldd	r25, Y+27	; 0x1b
     3cc:	ac 8d       	ldd	r26, Y+28	; 0x1c
     3ce:	bd 8d       	ldd	r27, Y+29	; 0x1d
     3d0:	88 0f       	add	r24, r24
     3d2:	99 1f       	adc	r25, r25
     3d4:	aa 1f       	adc	r26, r26
     3d6:	bb 1f       	adc	r27, r27
     3d8:	8a 8f       	std	Y+26, r24	; 0x1a
     3da:	9b 8f       	std	Y+27, r25	; 0x1b
     3dc:	ac 8f       	std	Y+28, r26	; 0x1c
     3de:	bd 8f       	std	Y+29, r27	; 0x1d
				exp -= 1;
     3e0:	8c 89       	ldd	r24, Y+20	; 0x14
     3e2:	9d 89       	ldd	r25, Y+21	; 0x15
     3e4:	01 97       	sbiw	r24, 0x01	; 1
     3e6:	9d 8b       	std	Y+21, r25	; 0x15
     3e8:	8c 8b       	std	Y+20, r24	; 0x14
		}
		
		// Normalize the mantissa
		if(mant > 0)
		{
			while(mant < 0x00800000)
     3ea:	8a 8d       	ldd	r24, Y+26	; 0x1a
     3ec:	9b 8d       	ldd	r25, Y+27	; 0x1b
     3ee:	ac 8d       	ldd	r26, Y+28	; 0x1c
     3f0:	bd 8d       	ldd	r27, Y+29	; 0x1d
     3f2:	00 97       	sbiw	r24, 0x00	; 0
     3f4:	a0 48       	sbci	r26, 0x80	; 128
     3f6:	b1 05       	cpc	r27, r1
     3f8:	38 f3       	brcs	.-50     	; 0x3c8 <float_add+0x322>
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
				mant = mant << 1;
				exp -= 1;
			}
		}
		else
			exp = 0;
     3fc:	1d 8a       	std	Y+21, r1	; 0x15
     3fe:	1c 8a       	std	Y+20, r1	; 0x14
	}
	
	// Overflow case [Largest value]
	// Exponent cannot be larger than 254 [with bias of +127]
	if(exp > 254)
     400:	8c 89       	ldd	r24, Y+20	; 0x14
     402:	9d 89       	ldd	r25, Y+21	; 0x15
     404:	8f 3f       	cpi	r24, 0xFF	; 255
     406:	91 05       	cpc	r25, r1
     408:	8c f0       	brlt	.+34     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	{
		final |= 0x7FFFFFFF;
     40a:	8e 89       	ldd	r24, Y+22	; 0x16
     40c:	9f 89       	ldd	r25, Y+23	; 0x17
     40e:	a8 8d       	ldd	r26, Y+24	; 0x18
     410:	b9 8d       	ldd	r27, Y+25	; 0x19
     412:	8f 6f       	ori	r24, 0xFF	; 255
     414:	9f 6f       	ori	r25, 0xFF	; 255
     416:	af 6f       	ori	r26, 0xFF	; 255
     418:	bf 67       	ori	r27, 0x7F	; 127
     41a:	8e 8b       	std	Y+22, r24	; 0x16
     41c:	9f 8b       	std	Y+23, r25	; 0x17
     41e:	a8 8f       	std	Y+24, r26	; 0x18
     420:	b9 8f       	std	Y+25, r27	; 0x19
		return final;
     422:	6e 89       	ldd	r22, Y+22	; 0x16
     424:	7f 89       	ldd	r23, Y+23	; 0x17
     426:	88 8d       	ldd	r24, Y+24	; 0x18
     428:	99 8d       	ldd	r25, Y+25	; 0x19
     42a:	5e c0       	rjmp	.+188    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
	}
	// Underflow case [Smallest number]
	// Exponent cannot be smaller than 0 [with bias of +127]
	else if(exp < 0)
     42c:	8c 89       	ldd	r24, Y+20	; 0x14
     42e:	9d 89       	ldd	r25, Y+21	; 0x15
     430:	99 23       	and	r25, r25
     432:	8c f4       	brge	.+34     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
	{
		final &= 0x80000000;
     434:	8e 89       	ldd	r24, Y+22	; 0x16
     436:	9f 89       	ldd	r25, Y+23	; 0x17
     438:	a8 8d       	ldd	r26, Y+24	; 0x18
     43a:	b9 8d       	ldd	r27, Y+25	; 0x19
     43c:	88 27       	eor	r24, r24
     43e:	99 27       	eor	r25, r25
     440:	aa 27       	eor	r26, r26
     442:	b0 78       	andi	r27, 0x80	; 128
     444:	8e 8b       	std	Y+22, r24	; 0x16
     446:	9f 8b       	std	Y+23, r25	; 0x17
     448:	a8 8f       	std	Y+24, r26	; 0x18
     44a:	b9 8f       	std	Y+25, r27	; 0x19
		return final;
     44c:	6e 89       	ldd	r22, Y+22	; 0x16
     44e:	7f 89       	ldd	r23, Y+23	; 0x17
     450:	88 8d       	ldd	r24, Y+24	; 0x18
     452:	99 8d       	ldd	r25, Y+25	; 0x19
     454:	49 c0       	rjmp	.+146    	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
	}
	
	mant &= 0x007FFFFF;		// Remove implicit 1
     456:	8a 8d       	ldd	r24, Y+26	; 0x1a
     458:	9b 8d       	ldd	r25, Y+27	; 0x1b
     45a:	ac 8d       	ldd	r26, Y+28	; 0x1c
     45c:	bd 8d       	ldd	r27, Y+29	; 0x1d
     45e:	af 77       	andi	r26, 0x7F	; 127
     460:	bb 27       	eor	r27, r27
     462:	8a 8f       	std	Y+26, r24	; 0x1a
     464:	9b 8f       	std	Y+27, r25	; 0x1b
     466:	ac 8f       	std	Y+28, r26	; 0x1c
     468:	bd 8f       	std	Y+29, r27	; 0x1d
	temp = exp;
     46a:	8c 89       	ldd	r24, Y+20	; 0x14
     46c:	9d 89       	ldd	r25, Y+21	; 0x15
     46e:	09 2e       	mov	r0, r25
     470:	00 0c       	add	r0, r0
     472:	aa 0b       	sbc	r26, r26
     474:	bb 0b       	sbc	r27, r27
     476:	8e 8f       	std	Y+30, r24	; 0x1e
     478:	9f 8f       	std	Y+31, r25	; 0x1f
     47a:	a8 a3       	std	Y+32, r26	; 0x20
     47c:	b9 a3       	std	Y+33, r27	; 0x21
	temp = temp << 23;		// Shift the exponent into the correct exponent field
     47e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     480:	9f 8d       	ldd	r25, Y+31	; 0x1f
     482:	a8 a1       	ldd	r26, Y+32	; 0x20
     484:	b9 a1       	ldd	r27, Y+33	; 0x21
     486:	07 2e       	mov	r0, r23
     488:	77 e1       	ldi	r23, 0x17	; 23
     48a:	88 0f       	add	r24, r24
     48c:	99 1f       	adc	r25, r25
     48e:	aa 1f       	adc	r26, r26
     490:	bb 1f       	adc	r27, r27
     492:	7a 95       	dec	r23
     494:	d1 f7       	brne	.-12     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     496:	70 2d       	mov	r23, r0
     498:	8e 8f       	std	Y+30, r24	; 0x1e
     49a:	9f 8f       	std	Y+31, r25	; 0x1f
     49c:	a8 a3       	std	Y+32, r26	; 0x20
     49e:	b9 a3       	std	Y+33, r27	; 0x21
	final |= temp;			// Insert exponent into final
     4a0:	4e 8d       	ldd	r20, Y+30	; 0x1e
     4a2:	5f 8d       	ldd	r21, Y+31	; 0x1f
     4a4:	68 a1       	ldd	r22, Y+32	; 0x20
     4a6:	79 a1       	ldd	r23, Y+33	; 0x21
     4a8:	8e 89       	ldd	r24, Y+22	; 0x16
     4aa:	9f 89       	ldd	r25, Y+23	; 0x17
     4ac:	a8 8d       	ldd	r26, Y+24	; 0x18
     4ae:	b9 8d       	ldd	r27, Y+25	; 0x19
     4b0:	84 2b       	or	r24, r20
     4b2:	95 2b       	or	r25, r21
     4b4:	a6 2b       	or	r26, r22
     4b6:	b7 2b       	or	r27, r23
     4b8:	8e 8b       	std	Y+22, r24	; 0x16
     4ba:	9f 8b       	std	Y+23, r25	; 0x17
     4bc:	a8 8f       	std	Y+24, r26	; 0x18
     4be:	b9 8f       	std	Y+25, r27	; 0x19
	final |= mant;			// Insert mantissa into final
     4c0:	4a 8d       	ldd	r20, Y+26	; 0x1a
     4c2:	5b 8d       	ldd	r21, Y+27	; 0x1b
     4c4:	6c 8d       	ldd	r22, Y+28	; 0x1c
     4c6:	7d 8d       	ldd	r23, Y+29	; 0x1d
     4c8:	8e 89       	ldd	r24, Y+22	; 0x16
     4ca:	9f 89       	ldd	r25, Y+23	; 0x17
     4cc:	a8 8d       	ldd	r26, Y+24	; 0x18
     4ce:	b9 8d       	ldd	r27, Y+25	; 0x19
     4d0:	84 2b       	or	r24, r20
     4d2:	95 2b       	or	r25, r21
     4d4:	a6 2b       	or	r26, r22
     4d6:	b7 2b       	or	r27, r23
     4d8:	8e 8b       	std	Y+22, r24	; 0x16
     4da:	9f 8b       	std	Y+23, r25	; 0x17
     4dc:	a8 8f       	std	Y+24, r26	; 0x18
     4de:	b9 8f       	std	Y+25, r27	; 0x19
	
	return final;
     4e0:	6e 89       	ldd	r22, Y+22	; 0x16
     4e2:	7f 89       	ldd	r23, Y+23	; 0x17
     4e4:	88 8d       	ldd	r24, Y+24	; 0x18
     4e6:	99 8d       	ldd	r25, Y+25	; 0x19
}
     4e8:	a1 96       	adiw	r28, 0x21	; 33
     4ea:	0f b6       	in	r0, 0x3f	; 63
     4ec:	f8 94       	cli
     4ee:	de bf       	out	0x3e, r29	; 62
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	cd bf       	out	0x3d, r28	; 61
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	0f 91       	pop	r16
     4fa:	08 95       	ret

000004fc <float_mult>:

uint32_t float_mult(uint32_t M, uint32_t R)
{
     4fc:	af 92       	push	r10
     4fe:	bf 92       	push	r11
     500:	cf 92       	push	r12
     502:	df 92       	push	r13
     504:	ef 92       	push	r14
     506:	ff 92       	push	r15
     508:	0f 93       	push	r16
     50a:	1f 93       	push	r17
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	cd b7       	in	r28, 0x3d	; 61
     512:	de b7       	in	r29, 0x3e	; 62
     514:	e1 97       	sbiw	r28, 0x31	; 49
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	f8 94       	cli
     51a:	de bf       	out	0x3e, r29	; 62
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	cd bf       	out	0x3d, r28	; 61
	// Save function arguments
	volatile uint32_t a = M;
     520:	69 83       	std	Y+1, r22	; 0x01
     522:	7a 83       	std	Y+2, r23	; 0x02
     524:	8b 83       	std	Y+3, r24	; 0x03
     526:	9c 83       	std	Y+4, r25	; 0x04
	volatile uint32_t b = R;
     528:	2d 83       	std	Y+5, r18	; 0x05
     52a:	3e 83       	std	Y+6, r19	; 0x06
     52c:	4f 83       	std	Y+7, r20	; 0x07
     52e:	58 87       	std	Y+8, r21	; 0x08
	
	// Operand a
	volatile uint8_t exp0 = a >> 23;							// Extract the exponent field of a
     530:	89 81       	ldd	r24, Y+1	; 0x01
     532:	9a 81       	ldd	r25, Y+2	; 0x02
     534:	ab 81       	ldd	r26, Y+3	; 0x03
     536:	bc 81       	ldd	r27, Y+4	; 0x04
     538:	07 2e       	mov	r0, r23
     53a:	77 e1       	ldi	r23, 0x17	; 23
     53c:	b6 95       	lsr	r27
     53e:	a7 95       	ror	r26
     540:	97 95       	ror	r25
     542:	87 95       	ror	r24
     544:	7a 95       	dec	r23
     546:	d1 f7       	brne	.-12     	; 0x53c <float_mult+0x40>
     548:	70 2d       	mov	r23, r0
     54a:	89 87       	std	Y+9, r24	; 0x09
	volatile uint32_t mant0 = (a & 0x007FFFFF) | 0x00800000;	// Extract the mantissa field of a
     54c:	89 81       	ldd	r24, Y+1	; 0x01
     54e:	9a 81       	ldd	r25, Y+2	; 0x02
     550:	ab 81       	ldd	r26, Y+3	; 0x03
     552:	bc 81       	ldd	r27, Y+4	; 0x04
     554:	af 77       	andi	r26, 0x7F	; 127
     556:	bb 27       	eor	r27, r27
     558:	a0 68       	ori	r26, 0x80	; 128
     55a:	8a 87       	std	Y+10, r24	; 0x0a
     55c:	9b 87       	std	Y+11, r25	; 0x0b
     55e:	ac 87       	std	Y+12, r26	; 0x0c
     560:	bd 87       	std	Y+13, r27	; 0x0d
	
	// Operand b
	volatile uint8_t exp1 = b >> 23;							// Extract the exponent field of b
     562:	8d 81       	ldd	r24, Y+5	; 0x05
     564:	9e 81       	ldd	r25, Y+6	; 0x06
     566:	af 81       	ldd	r26, Y+7	; 0x07
     568:	b8 85       	ldd	r27, Y+8	; 0x08
     56a:	07 2e       	mov	r0, r23
     56c:	77 e1       	ldi	r23, 0x17	; 23
     56e:	b6 95       	lsr	r27
     570:	a7 95       	ror	r26
     572:	97 95       	ror	r25
     574:	87 95       	ror	r24
     576:	7a 95       	dec	r23
     578:	d1 f7       	brne	.-12     	; 0x56e <float_mult+0x72>
     57a:	70 2d       	mov	r23, r0
     57c:	8e 87       	std	Y+14, r24	; 0x0e
	volatile uint32_t mant1 = (b & 0x007FFFFF) | 0x00800000;	// Extract the mantissa field of b
     57e:	8d 81       	ldd	r24, Y+5	; 0x05
     580:	9e 81       	ldd	r25, Y+6	; 0x06
     582:	af 81       	ldd	r26, Y+7	; 0x07
     584:	b8 85       	ldd	r27, Y+8	; 0x08
     586:	af 77       	andi	r26, 0x7F	; 127
     588:	bb 27       	eor	r27, r27
     58a:	a0 68       	ori	r26, 0x80	; 128
     58c:	8f 87       	std	Y+15, r24	; 0x0f
     58e:	98 8b       	std	Y+16, r25	; 0x10
     590:	a9 8b       	std	Y+17, r26	; 0x11
     592:	ba 8b       	std	Y+18, r27	; 0x12
	
	// Final result
	volatile int16_t exp = 0;		// Final exponent
     594:	1c 8a       	std	Y+20, r1	; 0x14
     596:	1b 8a       	std	Y+19, r1	; 0x13
	volatile uint32_t final = 0;	// Result to be returned
     598:	1d 8a       	std	Y+21, r1	; 0x15
     59a:	1e 8a       	std	Y+22, r1	; 0x16
     59c:	1f 8a       	std	Y+23, r1	; 0x17
     59e:	18 8e       	std	Y+24, r1	; 0x18
	
	// Booth Multiplier Variables
	volatile uint8_t i = 0;
     5a0:	19 8e       	std	Y+25, r1	; 0x19
	volatile uint64_t A = 0;
     5a2:	1a 8e       	std	Y+26, r1	; 0x1a
     5a4:	1b 8e       	std	Y+27, r1	; 0x1b
     5a6:	1c 8e       	std	Y+28, r1	; 0x1c
     5a8:	1d 8e       	std	Y+29, r1	; 0x1d
     5aa:	1e 8e       	std	Y+30, r1	; 0x1e
     5ac:	1f 8e       	std	Y+31, r1	; 0x1f
     5ae:	18 a2       	std	Y+32, r1	; 0x20
     5b0:	19 a2       	std	Y+33, r1	; 0x21
	volatile uint64_t S = 0;
     5b2:	1a a2       	std	Y+34, r1	; 0x22
     5b4:	1b a2       	std	Y+35, r1	; 0x23
     5b6:	1c a2       	std	Y+36, r1	; 0x24
     5b8:	1d a2       	std	Y+37, r1	; 0x25
     5ba:	1e a2       	std	Y+38, r1	; 0x26
     5bc:	1f a2       	std	Y+39, r1	; 0x27
     5be:	18 a6       	std	Y+40, r1	; 0x28
     5c0:	19 a6       	std	Y+41, r1	; 0x29
	volatile uint64_t P = 0;
     5c2:	1a a6       	std	Y+42, r1	; 0x2a
     5c4:	1b a6       	std	Y+43, r1	; 0x2b
     5c6:	1c a6       	std	Y+44, r1	; 0x2c
     5c8:	1d a6       	std	Y+45, r1	; 0x2d
     5ca:	1e a6       	std	Y+46, r1	; 0x2e
     5cc:	1f a6       	std	Y+47, r1	; 0x2f
     5ce:	18 aa       	std	Y+48, r1	; 0x30
     5d0:	19 aa       	std	Y+49, r1	; 0x31
	
	// Compute the sign
	final |= (a & 0x80000000) ^ (b & 0x80000000);	// Xor the sign bits
     5d2:	89 81       	ldd	r24, Y+1	; 0x01
     5d4:	9a 81       	ldd	r25, Y+2	; 0x02
     5d6:	ab 81       	ldd	r26, Y+3	; 0x03
     5d8:	bc 81       	ldd	r27, Y+4	; 0x04
     5da:	4d 81       	ldd	r20, Y+5	; 0x05
     5dc:	5e 81       	ldd	r21, Y+6	; 0x06
     5de:	6f 81       	ldd	r22, Y+7	; 0x07
     5e0:	78 85       	ldd	r23, Y+8	; 0x08
     5e2:	0d 89       	ldd	r16, Y+21	; 0x15
     5e4:	1e 89       	ldd	r17, Y+22	; 0x16
     5e6:	2f 89       	ldd	r18, Y+23	; 0x17
     5e8:	38 8d       	ldd	r19, Y+24	; 0x18
     5ea:	84 27       	eor	r24, r20
     5ec:	95 27       	eor	r25, r21
     5ee:	a6 27       	eor	r26, r22
     5f0:	b7 27       	eor	r27, r23
     5f2:	88 27       	eor	r24, r24
     5f4:	99 27       	eor	r25, r25
     5f6:	aa 27       	eor	r26, r26
     5f8:	b0 78       	andi	r27, 0x80	; 128
     5fa:	80 2b       	or	r24, r16
     5fc:	91 2b       	or	r25, r17
     5fe:	a2 2b       	or	r26, r18
     600:	b3 2b       	or	r27, r19
     602:	8d 8b       	std	Y+21, r24	; 0x15
     604:	9e 8b       	std	Y+22, r25	; 0x16
     606:	af 8b       	std	Y+23, r26	; 0x17
     608:	b8 8f       	std	Y+24, r27	; 0x18
	
	// Compute the initial exponent
	exp = (exp0 + exp1) - 127;						// Add the exponents and subtract 127 [rid the redundant bias]
     60a:	29 85       	ldd	r18, Y+9	; 0x09
     60c:	8e 85       	ldd	r24, Y+14	; 0x0e
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	82 0f       	add	r24, r18
     612:	91 1d       	adc	r25, r1
     614:	8f 57       	subi	r24, 0x7F	; 127
     616:	91 09       	sbc	r25, r1
     618:	9c 8b       	std	Y+20, r25	; 0x14
     61a:	8b 8b       	std	Y+19, r24	; 0x13
	if(exp > 0x00FF)								// Early check for overflow
     61c:	8b 89       	ldd	r24, Y+19	; 0x13
     61e:	9c 89       	ldd	r25, Y+20	; 0x14
     620:	8f 3f       	cpi	r24, 0xFF	; 255
     622:	91 05       	cpc	r25, r1
     624:	81 f0       	breq	.+32     	; 0x646 <float_mult+0x14a>
     626:	7c f0       	brlt	.+30     	; 0x646 <float_mult+0x14a>
		return final |= (0x7FFFFFFF);
     628:	8d 89       	ldd	r24, Y+21	; 0x15
     62a:	9e 89       	ldd	r25, Y+22	; 0x16
     62c:	af 89       	ldd	r26, Y+23	; 0x17
     62e:	b8 8d       	ldd	r27, Y+24	; 0x18
     630:	bc 01       	movw	r22, r24
     632:	cd 01       	movw	r24, r26
     634:	6f 6f       	ori	r22, 0xFF	; 255
     636:	7f 6f       	ori	r23, 0xFF	; 255
     638:	8f 6f       	ori	r24, 0xFF	; 255
     63a:	9f 67       	ori	r25, 0x7F	; 127
     63c:	6d 8b       	std	Y+21, r22	; 0x15
     63e:	7e 8b       	std	Y+22, r23	; 0x16
     640:	8f 8b       	std	Y+23, r24	; 0x17
     642:	98 8f       	std	Y+24, r25	; 0x18
     644:	9b c2       	rjmp	.+1334   	; 0xb7c <__stack+0x27d>
	// m = mant0		x = 25 bits
	// r = mant1		y = 25 bits
	// A = S = P = x + y + 1 = 51 bits [USE LONG INT]
	
	// Fill register A with m
	A = mant0;
     646:	0a 85       	ldd	r16, Y+10	; 0x0a
     648:	1b 85       	ldd	r17, Y+11	; 0x0b
     64a:	2c 85       	ldd	r18, Y+12	; 0x0c
     64c:	3d 85       	ldd	r19, Y+13	; 0x0d
     64e:	0a 8f       	std	Y+26, r16	; 0x1a
     650:	1b 8f       	std	Y+27, r17	; 0x1b
     652:	2c 8f       	std	Y+28, r18	; 0x1c
     654:	3d 8f       	std	Y+29, r19	; 0x1d
     656:	1e 8e       	std	Y+30, r1	; 0x1e
     658:	1f 8e       	std	Y+31, r1	; 0x1f
     65a:	18 a2       	std	Y+32, r1	; 0x20
     65c:	19 a2       	std	Y+33, r1	; 0x21
	A = A << 26;
     65e:	2a 8d       	ldd	r18, Y+26	; 0x1a
     660:	3b 8d       	ldd	r19, Y+27	; 0x1b
     662:	4c 8d       	ldd	r20, Y+28	; 0x1c
     664:	5d 8d       	ldd	r21, Y+29	; 0x1d
     666:	6e 8d       	ldd	r22, Y+30	; 0x1e
     668:	7f 8d       	ldd	r23, Y+31	; 0x1f
     66a:	88 a1       	ldd	r24, Y+32	; 0x20
     66c:	99 a1       	ldd	r25, Y+33	; 0x21
     66e:	0a e1       	ldi	r16, 0x1A	; 26
     670:	0e 94 bf 08 	call	0x117e	; 0x117e <__ashldi3>
     674:	2a 8f       	std	Y+26, r18	; 0x1a
     676:	3b 8f       	std	Y+27, r19	; 0x1b
     678:	4c 8f       	std	Y+28, r20	; 0x1c
     67a:	5d 8f       	std	Y+29, r21	; 0x1d
     67c:	6e 8f       	std	Y+30, r22	; 0x1e
     67e:	7f 8f       	std	Y+31, r23	; 0x1f
     680:	88 a3       	std	Y+32, r24	; 0x20
     682:	99 a3       	std	Y+33, r25	; 0x21
	
	// Two's complement of m
	mant0 = ~mant0;
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9b 85       	ldd	r25, Y+11	; 0x0b
     688:	ac 85       	ldd	r26, Y+12	; 0x0c
     68a:	bd 85       	ldd	r27, Y+13	; 0x0d
     68c:	80 95       	com	r24
     68e:	90 95       	com	r25
     690:	a0 95       	com	r26
     692:	b0 95       	com	r27
     694:	8a 87       	std	Y+10, r24	; 0x0a
     696:	9b 87       	std	Y+11, r25	; 0x0b
     698:	ac 87       	std	Y+12, r26	; 0x0c
     69a:	bd 87       	std	Y+13, r27	; 0x0d
	mant0 += 1;
     69c:	8a 85       	ldd	r24, Y+10	; 0x0a
     69e:	9b 85       	ldd	r25, Y+11	; 0x0b
     6a0:	ac 85       	ldd	r26, Y+12	; 0x0c
     6a2:	bd 85       	ldd	r27, Y+13	; 0x0d
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	a1 1d       	adc	r26, r1
     6a8:	b1 1d       	adc	r27, r1
     6aa:	8a 87       	std	Y+10, r24	; 0x0a
     6ac:	9b 87       	std	Y+11, r25	; 0x0b
     6ae:	ac 87       	std	Y+12, r26	; 0x0c
     6b0:	bd 87       	std	Y+13, r27	; 0x0d
	
	// Fill register S with -m
	S = mant0;
     6b2:	0a 85       	ldd	r16, Y+10	; 0x0a
     6b4:	1b 85       	ldd	r17, Y+11	; 0x0b
     6b6:	2c 85       	ldd	r18, Y+12	; 0x0c
     6b8:	3d 85       	ldd	r19, Y+13	; 0x0d
     6ba:	0a a3       	std	Y+34, r16	; 0x22
     6bc:	1b a3       	std	Y+35, r17	; 0x23
     6be:	2c a3       	std	Y+36, r18	; 0x24
     6c0:	3d a3       	std	Y+37, r19	; 0x25
     6c2:	1e a2       	std	Y+38, r1	; 0x26
     6c4:	1f a2       	std	Y+39, r1	; 0x27
     6c6:	18 a6       	std	Y+40, r1	; 0x28
     6c8:	19 a6       	std	Y+41, r1	; 0x29
	S = S << 26;
     6ca:	2a a1       	ldd	r18, Y+34	; 0x22
     6cc:	3b a1       	ldd	r19, Y+35	; 0x23
     6ce:	4c a1       	ldd	r20, Y+36	; 0x24
     6d0:	5d a1       	ldd	r21, Y+37	; 0x25
     6d2:	6e a1       	ldd	r22, Y+38	; 0x26
     6d4:	7f a1       	ldd	r23, Y+39	; 0x27
     6d6:	88 a5       	ldd	r24, Y+40	; 0x28
     6d8:	99 a5       	ldd	r25, Y+41	; 0x29
     6da:	0a e1       	ldi	r16, 0x1A	; 26
     6dc:	0e 94 bf 08 	call	0x117e	; 0x117e <__ashldi3>
     6e0:	2a a3       	std	Y+34, r18	; 0x22
     6e2:	3b a3       	std	Y+35, r19	; 0x23
     6e4:	4c a3       	std	Y+36, r20	; 0x24
     6e6:	5d a3       	std	Y+37, r21	; 0x25
     6e8:	6e a3       	std	Y+38, r22	; 0x26
     6ea:	7f a3       	std	Y+39, r23	; 0x27
     6ec:	88 a7       	std	Y+40, r24	; 0x28
     6ee:	99 a7       	std	Y+41, r25	; 0x29
	S &= 0x0007FFFFFFFFFFFF;
     6f0:	6a a1       	ldd	r22, Y+34	; 0x22
     6f2:	5b a1       	ldd	r21, Y+35	; 0x23
     6f4:	4c a1       	ldd	r20, Y+36	; 0x24
     6f6:	3d a1       	ldd	r19, Y+37	; 0x25
     6f8:	2e a1       	ldd	r18, Y+38	; 0x26
     6fa:	9f a1       	ldd	r25, Y+39	; 0x27
     6fc:	88 a5       	ldd	r24, Y+40	; 0x28
     6fe:	79 a5       	ldd	r23, Y+41	; 0x29
     700:	87 70       	andi	r24, 0x07	; 7
     702:	6a a3       	std	Y+34, r22	; 0x22
     704:	5b a3       	std	Y+35, r21	; 0x23
     706:	4c a3       	std	Y+36, r20	; 0x24
     708:	3d a3       	std	Y+37, r19	; 0x25
     70a:	2e a3       	std	Y+38, r18	; 0x26
     70c:	9f a3       	std	Y+39, r25	; 0x27
     70e:	88 a7       	std	Y+40, r24	; 0x28
     710:	19 a6       	std	Y+41, r1	; 0x29
	
	// Fill register P with r
	P = mant1 << 1;
     712:	0f 85       	ldd	r16, Y+15	; 0x0f
     714:	18 89       	ldd	r17, Y+16	; 0x10
     716:	29 89       	ldd	r18, Y+17	; 0x11
     718:	3a 89       	ldd	r19, Y+18	; 0x12
     71a:	00 0f       	add	r16, r16
     71c:	11 1f       	adc	r17, r17
     71e:	22 1f       	adc	r18, r18
     720:	33 1f       	adc	r19, r19
     722:	0a a7       	std	Y+42, r16	; 0x2a
     724:	1b a7       	std	Y+43, r17	; 0x2b
     726:	2c a7       	std	Y+44, r18	; 0x2c
     728:	3d a7       	std	Y+45, r19	; 0x2d
     72a:	1e a6       	std	Y+46, r1	; 0x2e
     72c:	1f a6       	std	Y+47, r1	; 0x2f
     72e:	18 aa       	std	Y+48, r1	; 0x30
     730:	19 aa       	std	Y+49, r1	; 0x31
	
	for(i = 0; i < 25; i++)
     732:	19 8e       	std	Y+25, r1	; 0x19
     734:	89 8d       	ldd	r24, Y+25	; 0x19
     736:	89 31       	cpi	r24, 0x19	; 25
     738:	08 f0       	brcs	.+2      	; 0x73c <float_mult+0x240>
     73a:	bf c0       	rjmp	.+382    	; 0x8ba <float_mult+0x3be>
	{
		if((P & 3) == 1)
     73c:	2a a5       	ldd	r18, Y+42	; 0x2a
     73e:	8b a5       	ldd	r24, Y+43	; 0x2b
     740:	8c a5       	ldd	r24, Y+44	; 0x2c
     742:	8d a5       	ldd	r24, Y+45	; 0x2d
     744:	8e a5       	ldd	r24, Y+46	; 0x2e
     746:	8f a5       	ldd	r24, Y+47	; 0x2f
     748:	88 a9       	ldd	r24, Y+48	; 0x30
     74a:	89 a9       	ldd	r24, Y+49	; 0x31
     74c:	23 70       	andi	r18, 0x03	; 3
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	40 e0       	ldi	r20, 0x00	; 0
     752:	50 e0       	ldi	r21, 0x00	; 0
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	a1 e0       	ldi	r26, 0x01	; 1
     75e:	0e 94 ff 08 	call	0x11fe	; 0x11fe <__cmpdi2_s8>
     762:	d9 f4       	brne	.+54     	; 0x79a <float_mult+0x29e>
		{
			P += A;
     764:	2a 8d       	ldd	r18, Y+26	; 0x1a
     766:	3b 8d       	ldd	r19, Y+27	; 0x1b
     768:	4c 8d       	ldd	r20, Y+28	; 0x1c
     76a:	5d 8d       	ldd	r21, Y+29	; 0x1d
     76c:	6e 8d       	ldd	r22, Y+30	; 0x1e
     76e:	7f 8d       	ldd	r23, Y+31	; 0x1f
     770:	88 a1       	ldd	r24, Y+32	; 0x20
     772:	99 a1       	ldd	r25, Y+33	; 0x21
     774:	aa a4       	ldd	r10, Y+42	; 0x2a
     776:	bb a4       	ldd	r11, Y+43	; 0x2b
     778:	cc a4       	ldd	r12, Y+44	; 0x2c
     77a:	dd a4       	ldd	r13, Y+45	; 0x2d
     77c:	ee a4       	ldd	r14, Y+46	; 0x2e
     77e:	ff a4       	ldd	r15, Y+47	; 0x2f
     780:	08 a9       	ldd	r16, Y+48	; 0x30
     782:	19 a9       	ldd	r17, Y+49	; 0x31
     784:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__adddi3>
     788:	2a a7       	std	Y+42, r18	; 0x2a
     78a:	3b a7       	std	Y+43, r19	; 0x2b
     78c:	4c a7       	std	Y+44, r20	; 0x2c
     78e:	5d a7       	std	Y+45, r21	; 0x2d
     790:	6e a7       	std	Y+46, r22	; 0x2e
     792:	7f a7       	std	Y+47, r23	; 0x2f
     794:	88 ab       	std	Y+48, r24	; 0x30
     796:	99 ab       	std	Y+49, r25	; 0x31
     798:	2e c0       	rjmp	.+92     	; 0x7f6 <float_mult+0x2fa>
		}
		else if((P & 3) == 2)
     79a:	2a a5       	ldd	r18, Y+42	; 0x2a
     79c:	8b a5       	ldd	r24, Y+43	; 0x2b
     79e:	8c a5       	ldd	r24, Y+44	; 0x2c
     7a0:	8d a5       	ldd	r24, Y+45	; 0x2d
     7a2:	8e a5       	ldd	r24, Y+46	; 0x2e
     7a4:	8f a5       	ldd	r24, Y+47	; 0x2f
     7a6:	88 a9       	ldd	r24, Y+48	; 0x30
     7a8:	89 a9       	ldd	r24, Y+49	; 0x31
     7aa:	23 70       	andi	r18, 0x03	; 3
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	40 e0       	ldi	r20, 0x00	; 0
     7b0:	50 e0       	ldi	r21, 0x00	; 0
     7b2:	60 e0       	ldi	r22, 0x00	; 0
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	a2 e0       	ldi	r26, 0x02	; 2
     7bc:	0e 94 ff 08 	call	0x11fe	; 0x11fe <__cmpdi2_s8>
     7c0:	d1 f4       	brne	.+52     	; 0x7f6 <float_mult+0x2fa>
		{
			P += S;
     7c2:	2a a1       	ldd	r18, Y+34	; 0x22
     7c4:	3b a1       	ldd	r19, Y+35	; 0x23
     7c6:	4c a1       	ldd	r20, Y+36	; 0x24
     7c8:	5d a1       	ldd	r21, Y+37	; 0x25
     7ca:	6e a1       	ldd	r22, Y+38	; 0x26
     7cc:	7f a1       	ldd	r23, Y+39	; 0x27
     7ce:	88 a5       	ldd	r24, Y+40	; 0x28
     7d0:	99 a5       	ldd	r25, Y+41	; 0x29
     7d2:	aa a4       	ldd	r10, Y+42	; 0x2a
     7d4:	bb a4       	ldd	r11, Y+43	; 0x2b
     7d6:	cc a4       	ldd	r12, Y+44	; 0x2c
     7d8:	dd a4       	ldd	r13, Y+45	; 0x2d
     7da:	ee a4       	ldd	r14, Y+46	; 0x2e
     7dc:	ff a4       	ldd	r15, Y+47	; 0x2f
     7de:	08 a9       	ldd	r16, Y+48	; 0x30
     7e0:	19 a9       	ldd	r17, Y+49	; 0x31
     7e2:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__adddi3>
     7e6:	2a a7       	std	Y+42, r18	; 0x2a
     7e8:	3b a7       	std	Y+43, r19	; 0x2b
     7ea:	4c a7       	std	Y+44, r20	; 0x2c
     7ec:	5d a7       	std	Y+45, r21	; 0x2d
     7ee:	6e a7       	std	Y+46, r22	; 0x2e
     7f0:	7f a7       	std	Y+47, r23	; 0x2f
     7f2:	88 ab       	std	Y+48, r24	; 0x30
     7f4:	99 ab       	std	Y+49, r25	; 0x31
		}
		P &= 0x0007FFFFFFFFFFFF;		// Mask out the overflow
     7f6:	6a a5       	ldd	r22, Y+42	; 0x2a
     7f8:	5b a5       	ldd	r21, Y+43	; 0x2b
     7fa:	4c a5       	ldd	r20, Y+44	; 0x2c
     7fc:	3d a5       	ldd	r19, Y+45	; 0x2d
     7fe:	2e a5       	ldd	r18, Y+46	; 0x2e
     800:	9f a5       	ldd	r25, Y+47	; 0x2f
     802:	88 a9       	ldd	r24, Y+48	; 0x30
     804:	79 a9       	ldd	r23, Y+49	; 0x31
     806:	87 70       	andi	r24, 0x07	; 7
     808:	6a a7       	std	Y+42, r22	; 0x2a
     80a:	5b a7       	std	Y+43, r21	; 0x2b
     80c:	4c a7       	std	Y+44, r20	; 0x2c
     80e:	3d a7       	std	Y+45, r19	; 0x2d
     810:	2e a7       	std	Y+46, r18	; 0x2e
     812:	9f a7       	std	Y+47, r25	; 0x2f
     814:	88 ab       	std	Y+48, r24	; 0x30
     816:	19 aa       	std	Y+49, r1	; 0x31
		
		// Shift negative number
		if(P >= 0x0004000000000000)
     818:	2a a5       	ldd	r18, Y+42	; 0x2a
     81a:	3b a5       	ldd	r19, Y+43	; 0x2b
     81c:	4c a5       	ldd	r20, Y+44	; 0x2c
     81e:	5d a5       	ldd	r21, Y+45	; 0x2d
     820:	6e a5       	ldd	r22, Y+46	; 0x2e
     822:	7f a5       	ldd	r23, Y+47	; 0x2f
     824:	88 a9       	ldd	r24, Y+48	; 0x30
     826:	99 a9       	ldd	r25, Y+49	; 0x31
     828:	2f 3f       	cpi	r18, 0xFF	; 255
     82a:	3f 4f       	sbci	r19, 0xFF	; 255
     82c:	4f 4f       	sbci	r20, 0xFF	; 255
     82e:	5f 4f       	sbci	r21, 0xFF	; 255
     830:	6f 4f       	sbci	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	83 40       	sbci	r24, 0x03	; 3
     836:	91 05       	cpc	r25, r1
     838:	31 f1       	breq	.+76     	; 0x886 <float_mult+0x38a>
     83a:	28 f1       	brcs	.+74     	; 0x886 <float_mult+0x38a>
		{
			P = P >> 1;
     83c:	2a a5       	ldd	r18, Y+42	; 0x2a
     83e:	3b a5       	ldd	r19, Y+43	; 0x2b
     840:	4c a5       	ldd	r20, Y+44	; 0x2c
     842:	5d a5       	ldd	r21, Y+45	; 0x2d
     844:	6e a5       	ldd	r22, Y+46	; 0x2e
     846:	7f a5       	ldd	r23, Y+47	; 0x2f
     848:	88 a9       	ldd	r24, Y+48	; 0x30
     84a:	99 a9       	ldd	r25, Y+49	; 0x31
     84c:	01 e0       	ldi	r16, 0x01	; 1
     84e:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__lshrdi3>
     852:	2a a7       	std	Y+42, r18	; 0x2a
     854:	3b a7       	std	Y+43, r19	; 0x2b
     856:	4c a7       	std	Y+44, r20	; 0x2c
     858:	5d a7       	std	Y+45, r21	; 0x2d
     85a:	6e a7       	std	Y+46, r22	; 0x2e
     85c:	7f a7       	std	Y+47, r23	; 0x2f
     85e:	88 ab       	std	Y+48, r24	; 0x30
     860:	99 ab       	std	Y+49, r25	; 0x31
			P |= 0x0004000000000000;
     862:	7a a5       	ldd	r23, Y+42	; 0x2a
     864:	6b a5       	ldd	r22, Y+43	; 0x2b
     866:	5c a5       	ldd	r21, Y+44	; 0x2c
     868:	4d a5       	ldd	r20, Y+45	; 0x2d
     86a:	3e a5       	ldd	r19, Y+46	; 0x2e
     86c:	2f a5       	ldd	r18, Y+47	; 0x2f
     86e:	88 a9       	ldd	r24, Y+48	; 0x30
     870:	99 a9       	ldd	r25, Y+49	; 0x31
     872:	84 60       	ori	r24, 0x04	; 4
     874:	7a a7       	std	Y+42, r23	; 0x2a
     876:	6b a7       	std	Y+43, r22	; 0x2b
     878:	5c a7       	std	Y+44, r21	; 0x2c
     87a:	4d a7       	std	Y+45, r20	; 0x2d
     87c:	3e a7       	std	Y+46, r19	; 0x2e
     87e:	2f a7       	std	Y+47, r18	; 0x2f
     880:	88 ab       	std	Y+48, r24	; 0x30
     882:	99 ab       	std	Y+49, r25	; 0x31
     884:	13 c0       	rjmp	.+38     	; 0x8ac <float_mult+0x3b0>
		}
		// Shift positive number
		else
			P = P >> 1;
     886:	2a a5       	ldd	r18, Y+42	; 0x2a
     888:	3b a5       	ldd	r19, Y+43	; 0x2b
     88a:	4c a5       	ldd	r20, Y+44	; 0x2c
     88c:	5d a5       	ldd	r21, Y+45	; 0x2d
     88e:	6e a5       	ldd	r22, Y+46	; 0x2e
     890:	7f a5       	ldd	r23, Y+47	; 0x2f
     892:	88 a9       	ldd	r24, Y+48	; 0x30
     894:	99 a9       	ldd	r25, Y+49	; 0x31
     896:	01 e0       	ldi	r16, 0x01	; 1
     898:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__lshrdi3>
     89c:	2a a7       	std	Y+42, r18	; 0x2a
     89e:	3b a7       	std	Y+43, r19	; 0x2b
     8a0:	4c a7       	std	Y+44, r20	; 0x2c
     8a2:	5d a7       	std	Y+45, r21	; 0x2d
     8a4:	6e a7       	std	Y+46, r22	; 0x2e
     8a6:	7f a7       	std	Y+47, r23	; 0x2f
     8a8:	88 ab       	std	Y+48, r24	; 0x30
     8aa:	99 ab       	std	Y+49, r25	; 0x31
	S &= 0x0007FFFFFFFFFFFF;
	
	// Fill register P with r
	P = mant1 << 1;
	
	for(i = 0; i < 25; i++)
     8ac:	89 8d       	ldd	r24, Y+25	; 0x19
     8ae:	8f 5f       	subi	r24, 0xFF	; 255
     8b0:	89 8f       	std	Y+25, r24	; 0x19
     8b2:	89 8d       	ldd	r24, Y+25	; 0x19
     8b4:	89 31       	cpi	r24, 0x19	; 25
     8b6:	08 f4       	brcc	.+2      	; 0x8ba <float_mult+0x3be>
     8b8:	41 cf       	rjmp	.-382    	; 0x73c <float_mult+0x240>
		}
		// Shift positive number
		else
			P = P >> 1;
	}
	P = P >> 1;		// One last shift to complete the Booth algorithm
     8ba:	2a a5       	ldd	r18, Y+42	; 0x2a
     8bc:	3b a5       	ldd	r19, Y+43	; 0x2b
     8be:	4c a5       	ldd	r20, Y+44	; 0x2c
     8c0:	5d a5       	ldd	r21, Y+45	; 0x2d
     8c2:	6e a5       	ldd	r22, Y+46	; 0x2e
     8c4:	7f a5       	ldd	r23, Y+47	; 0x2f
     8c6:	88 a9       	ldd	r24, Y+48	; 0x30
     8c8:	99 a9       	ldd	r25, Y+49	; 0x31
     8ca:	01 e0       	ldi	r16, 0x01	; 1
     8cc:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__lshrdi3>
     8d0:	2a a7       	std	Y+42, r18	; 0x2a
     8d2:	3b a7       	std	Y+43, r19	; 0x2b
     8d4:	4c a7       	std	Y+44, r20	; 0x2c
     8d6:	5d a7       	std	Y+45, r21	; 0x2d
     8d8:	6e a7       	std	Y+46, r22	; 0x2e
     8da:	7f a7       	std	Y+47, r23	; 0x2f
     8dc:	88 ab       	std	Y+48, r24	; 0x30
     8de:	99 ab       	std	Y+49, r25	; 0x31
	
	// Normalize the result
	while(P > 0x00007FFFFFFFFFFF)
     8e0:	2a a5       	ldd	r18, Y+42	; 0x2a
     8e2:	3b a5       	ldd	r19, Y+43	; 0x2b
     8e4:	4c a5       	ldd	r20, Y+44	; 0x2c
     8e6:	5d a5       	ldd	r21, Y+45	; 0x2d
     8e8:	6e a5       	ldd	r22, Y+46	; 0x2e
     8ea:	7f a5       	ldd	r23, Y+47	; 0x2f
     8ec:	88 a9       	ldd	r24, Y+48	; 0x30
     8ee:	99 a9       	ldd	r25, Y+49	; 0x31
     8f0:	2f 3f       	cpi	r18, 0xFF	; 255
     8f2:	3f 4f       	sbci	r19, 0xFF	; 255
     8f4:	4f 4f       	sbci	r20, 0xFF	; 255
     8f6:	5f 4f       	sbci	r21, 0xFF	; 255
     8f8:	6f 4f       	sbci	r22, 0xFF	; 255
     8fa:	7f 47       	sbci	r23, 0x7F	; 127
     8fc:	81 05       	cpc	r24, r1
     8fe:	91 05       	cpc	r25, r1
     900:	59 f1       	breq	.+86     	; 0x958 <__stack+0x59>
     902:	50 f1       	brcs	.+84     	; 0x958 <__stack+0x59>
	{
		P = P >> 1;
     904:	2a a5       	ldd	r18, Y+42	; 0x2a
     906:	3b a5       	ldd	r19, Y+43	; 0x2b
     908:	4c a5       	ldd	r20, Y+44	; 0x2c
     90a:	5d a5       	ldd	r21, Y+45	; 0x2d
     90c:	6e a5       	ldd	r22, Y+46	; 0x2e
     90e:	7f a5       	ldd	r23, Y+47	; 0x2f
     910:	88 a9       	ldd	r24, Y+48	; 0x30
     912:	99 a9       	ldd	r25, Y+49	; 0x31
     914:	01 e0       	ldi	r16, 0x01	; 1
     916:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__lshrdi3>
     91a:	2a a7       	std	Y+42, r18	; 0x2a
     91c:	3b a7       	std	Y+43, r19	; 0x2b
     91e:	4c a7       	std	Y+44, r20	; 0x2c
     920:	5d a7       	std	Y+45, r21	; 0x2d
     922:	6e a7       	std	Y+46, r22	; 0x2e
     924:	7f a7       	std	Y+47, r23	; 0x2f
     926:	88 ab       	std	Y+48, r24	; 0x30
     928:	99 ab       	std	Y+49, r25	; 0x31
		exp += 1;
     92a:	8b 89       	ldd	r24, Y+19	; 0x13
     92c:	9c 89       	ldd	r25, Y+20	; 0x14
     92e:	01 96       	adiw	r24, 0x01	; 1
     930:	9c 8b       	std	Y+20, r25	; 0x14
     932:	8b 8b       	std	Y+19, r24	; 0x13
			P = P >> 1;
	}
	P = P >> 1;		// One last shift to complete the Booth algorithm
	
	// Normalize the result
	while(P > 0x00007FFFFFFFFFFF)
     934:	2a a5       	ldd	r18, Y+42	; 0x2a
     936:	3b a5       	ldd	r19, Y+43	; 0x2b
     938:	4c a5       	ldd	r20, Y+44	; 0x2c
     93a:	5d a5       	ldd	r21, Y+45	; 0x2d
     93c:	6e a5       	ldd	r22, Y+46	; 0x2e
     93e:	7f a5       	ldd	r23, Y+47	; 0x2f
     940:	88 a9       	ldd	r24, Y+48	; 0x30
     942:	99 a9       	ldd	r25, Y+49	; 0x31
     944:	2f 3f       	cpi	r18, 0xFF	; 255
     946:	3f 4f       	sbci	r19, 0xFF	; 255
     948:	4f 4f       	sbci	r20, 0xFF	; 255
     94a:	5f 4f       	sbci	r21, 0xFF	; 255
     94c:	6f 4f       	sbci	r22, 0xFF	; 255
     94e:	7f 47       	sbci	r23, 0x7F	; 127
     950:	81 05       	cpc	r24, r1
     952:	91 05       	cpc	r25, r1
     954:	09 f0       	breq	.+2      	; 0x958 <__stack+0x59>
     956:	b0 f6       	brcc	.-84     	; 0x904 <__stack+0x5>
	{
		P = P >> 1;
		exp += 1;
	}
	while(P < 0x00003FFFFFFFFFFF && P > 0)
     958:	2a a5       	ldd	r18, Y+42	; 0x2a
     95a:	3b a5       	ldd	r19, Y+43	; 0x2b
     95c:	4c a5       	ldd	r20, Y+44	; 0x2c
     95e:	5d a5       	ldd	r21, Y+45	; 0x2d
     960:	6e a5       	ldd	r22, Y+46	; 0x2e
     962:	7f a5       	ldd	r23, Y+47	; 0x2f
     964:	88 a9       	ldd	r24, Y+48	; 0x30
     966:	99 a9       	ldd	r25, Y+49	; 0x31
     968:	2e 3f       	cpi	r18, 0xFE	; 254
     96a:	3f 4f       	sbci	r19, 0xFF	; 255
     96c:	4f 4f       	sbci	r20, 0xFF	; 255
     96e:	5f 4f       	sbci	r21, 0xFF	; 255
     970:	6f 4f       	sbci	r22, 0xFF	; 255
     972:	7f 43       	sbci	r23, 0x3F	; 63
     974:	81 05       	cpc	r24, r1
     976:	91 05       	cpc	r25, r1
     978:	09 f0       	breq	.+2      	; 0x97c <__stack+0x7d>
     97a:	b0 f5       	brcc	.+108    	; 0x9e8 <__stack+0xe9>
     97c:	2a a5       	ldd	r18, Y+42	; 0x2a
     97e:	3b a5       	ldd	r19, Y+43	; 0x2b
     980:	4c a5       	ldd	r20, Y+44	; 0x2c
     982:	5d a5       	ldd	r21, Y+45	; 0x2d
     984:	6e a5       	ldd	r22, Y+46	; 0x2e
     986:	7f a5       	ldd	r23, Y+47	; 0x2f
     988:	88 a9       	ldd	r24, Y+48	; 0x30
     98a:	99 a9       	ldd	r25, Y+49	; 0x31
     98c:	a0 e0       	ldi	r26, 0x00	; 0
     98e:	0e 94 ff 08 	call	0x11fe	; 0x11fe <__cmpdi2_s8>
     992:	51 f1       	breq	.+84     	; 0x9e8 <__stack+0xe9>
	{
		P = P << 1;
     994:	2a a5       	ldd	r18, Y+42	; 0x2a
     996:	3b a5       	ldd	r19, Y+43	; 0x2b
     998:	4c a5       	ldd	r20, Y+44	; 0x2c
     99a:	5d a5       	ldd	r21, Y+45	; 0x2d
     99c:	6e a5       	ldd	r22, Y+46	; 0x2e
     99e:	7f a5       	ldd	r23, Y+47	; 0x2f
     9a0:	88 a9       	ldd	r24, Y+48	; 0x30
     9a2:	99 a9       	ldd	r25, Y+49	; 0x31
     9a4:	01 e0       	ldi	r16, 0x01	; 1
     9a6:	0e 94 bf 08 	call	0x117e	; 0x117e <__ashldi3>
     9aa:	2a a7       	std	Y+42, r18	; 0x2a
     9ac:	3b a7       	std	Y+43, r19	; 0x2b
     9ae:	4c a7       	std	Y+44, r20	; 0x2c
     9b0:	5d a7       	std	Y+45, r21	; 0x2d
     9b2:	6e a7       	std	Y+46, r22	; 0x2e
     9b4:	7f a7       	std	Y+47, r23	; 0x2f
     9b6:	88 ab       	std	Y+48, r24	; 0x30
     9b8:	99 ab       	std	Y+49, r25	; 0x31
		exp -= 1;
     9ba:	8b 89       	ldd	r24, Y+19	; 0x13
     9bc:	9c 89       	ldd	r25, Y+20	; 0x14
     9be:	01 97       	sbiw	r24, 0x01	; 1
     9c0:	9c 8b       	std	Y+20, r25	; 0x14
     9c2:	8b 8b       	std	Y+19, r24	; 0x13
	while(P > 0x00007FFFFFFFFFFF)
	{
		P = P >> 1;
		exp += 1;
	}
	while(P < 0x00003FFFFFFFFFFF && P > 0)
     9c4:	2a a5       	ldd	r18, Y+42	; 0x2a
     9c6:	3b a5       	ldd	r19, Y+43	; 0x2b
     9c8:	4c a5       	ldd	r20, Y+44	; 0x2c
     9ca:	5d a5       	ldd	r21, Y+45	; 0x2d
     9cc:	6e a5       	ldd	r22, Y+46	; 0x2e
     9ce:	7f a5       	ldd	r23, Y+47	; 0x2f
     9d0:	88 a9       	ldd	r24, Y+48	; 0x30
     9d2:	99 a9       	ldd	r25, Y+49	; 0x31
     9d4:	2e 3f       	cpi	r18, 0xFE	; 254
     9d6:	3f 4f       	sbci	r19, 0xFF	; 255
     9d8:	4f 4f       	sbci	r20, 0xFF	; 255
     9da:	5f 4f       	sbci	r21, 0xFF	; 255
     9dc:	6f 4f       	sbci	r22, 0xFF	; 255
     9de:	7f 43       	sbci	r23, 0x3F	; 63
     9e0:	81 05       	cpc	r24, r1
     9e2:	91 05       	cpc	r25, r1
     9e4:	a1 f0       	breq	.+40     	; 0xa0e <__stack+0x10f>
     9e6:	98 f0       	brcs	.+38     	; 0xa0e <__stack+0x10f>
		P = P << 1;
		exp -= 1;
	}

	// Truncate
	while(P >= 0x0000000001000000)
     9e8:	2a a5       	ldd	r18, Y+42	; 0x2a
     9ea:	3b a5       	ldd	r19, Y+43	; 0x2b
     9ec:	4c a5       	ldd	r20, Y+44	; 0x2c
     9ee:	5d a5       	ldd	r21, Y+45	; 0x2d
     9f0:	6e a5       	ldd	r22, Y+46	; 0x2e
     9f2:	7f a5       	ldd	r23, Y+47	; 0x2f
     9f4:	88 a9       	ldd	r24, Y+48	; 0x30
     9f6:	99 a9       	ldd	r25, Y+49	; 0x31
     9f8:	2f 3f       	cpi	r18, 0xFF	; 255
     9fa:	3f 4f       	sbci	r19, 0xFF	; 255
     9fc:	4f 4f       	sbci	r20, 0xFF	; 255
     9fe:	51 05       	cpc	r21, r1
     a00:	61 05       	cpc	r22, r1
     a02:	71 05       	cpc	r23, r1
     a04:	81 05       	cpc	r24, r1
     a06:	91 05       	cpc	r25, r1
     a08:	09 f0       	breq	.+2      	; 0xa0c <__stack+0x10d>
     a0a:	78 f4       	brcc	.+30     	; 0xa2a <__stack+0x12b>
     a0c:	33 c0       	rjmp	.+102    	; 0xa74 <__stack+0x175>
	while(P > 0x00007FFFFFFFFFFF)
	{
		P = P >> 1;
		exp += 1;
	}
	while(P < 0x00003FFFFFFFFFFF && P > 0)
     a0e:	2a a5       	ldd	r18, Y+42	; 0x2a
     a10:	3b a5       	ldd	r19, Y+43	; 0x2b
     a12:	4c a5       	ldd	r20, Y+44	; 0x2c
     a14:	5d a5       	ldd	r21, Y+45	; 0x2d
     a16:	6e a5       	ldd	r22, Y+46	; 0x2e
     a18:	7f a5       	ldd	r23, Y+47	; 0x2f
     a1a:	88 a9       	ldd	r24, Y+48	; 0x30
     a1c:	99 a9       	ldd	r25, Y+49	; 0x31
     a1e:	a0 e0       	ldi	r26, 0x00	; 0
     a20:	0e 94 ff 08 	call	0x11fe	; 0x11fe <__cmpdi2_s8>
     a24:	09 f0       	breq	.+2      	; 0xa28 <__stack+0x129>
     a26:	b6 cf       	rjmp	.-148    	; 0x994 <__stack+0x95>
     a28:	df cf       	rjmp	.-66     	; 0x9e8 <__stack+0xe9>
		exp -= 1;
	}

	// Truncate
	while(P >= 0x0000000001000000)
		P = P >> 1;
     a2a:	2a a5       	ldd	r18, Y+42	; 0x2a
     a2c:	3b a5       	ldd	r19, Y+43	; 0x2b
     a2e:	4c a5       	ldd	r20, Y+44	; 0x2c
     a30:	5d a5       	ldd	r21, Y+45	; 0x2d
     a32:	6e a5       	ldd	r22, Y+46	; 0x2e
     a34:	7f a5       	ldd	r23, Y+47	; 0x2f
     a36:	88 a9       	ldd	r24, Y+48	; 0x30
     a38:	99 a9       	ldd	r25, Y+49	; 0x31
     a3a:	01 e0       	ldi	r16, 0x01	; 1
     a3c:	0e 94 da 08 	call	0x11b4	; 0x11b4 <__lshrdi3>
     a40:	2a a7       	std	Y+42, r18	; 0x2a
     a42:	3b a7       	std	Y+43, r19	; 0x2b
     a44:	4c a7       	std	Y+44, r20	; 0x2c
     a46:	5d a7       	std	Y+45, r21	; 0x2d
     a48:	6e a7       	std	Y+46, r22	; 0x2e
     a4a:	7f a7       	std	Y+47, r23	; 0x2f
     a4c:	88 ab       	std	Y+48, r24	; 0x30
     a4e:	99 ab       	std	Y+49, r25	; 0x31
		P = P << 1;
		exp -= 1;
	}

	// Truncate
	while(P >= 0x0000000001000000)
     a50:	2a a5       	ldd	r18, Y+42	; 0x2a
     a52:	3b a5       	ldd	r19, Y+43	; 0x2b
     a54:	4c a5       	ldd	r20, Y+44	; 0x2c
     a56:	5d a5       	ldd	r21, Y+45	; 0x2d
     a58:	6e a5       	ldd	r22, Y+46	; 0x2e
     a5a:	7f a5       	ldd	r23, Y+47	; 0x2f
     a5c:	88 a9       	ldd	r24, Y+48	; 0x30
     a5e:	99 a9       	ldd	r25, Y+49	; 0x31
     a60:	2f 3f       	cpi	r18, 0xFF	; 255
     a62:	3f 4f       	sbci	r19, 0xFF	; 255
     a64:	4f 4f       	sbci	r20, 0xFF	; 255
     a66:	51 05       	cpc	r21, r1
     a68:	61 05       	cpc	r22, r1
     a6a:	71 05       	cpc	r23, r1
     a6c:	81 05       	cpc	r24, r1
     a6e:	91 05       	cpc	r25, r1
     a70:	09 f0       	breq	.+2      	; 0xa74 <__stack+0x175>
     a72:	d8 f6       	brcc	.-74     	; 0xa2a <__stack+0x12b>
		P = P >> 1;
		
	// Overflow case [Largest value]
	// Exponent cannot be larger than 254 [with bias of +127]
	if(exp > 254)
     a74:	8b 89       	ldd	r24, Y+19	; 0x13
     a76:	9c 89       	ldd	r25, Y+20	; 0x14
     a78:	8f 3f       	cpi	r24, 0xFF	; 255
     a7a:	91 05       	cpc	r25, r1
     a7c:	8c f0       	brlt	.+34     	; 0xaa0 <__stack+0x1a1>
	{
		final |= 0x7FFFFFFF;
     a7e:	8d 89       	ldd	r24, Y+21	; 0x15
     a80:	9e 89       	ldd	r25, Y+22	; 0x16
     a82:	af 89       	ldd	r26, Y+23	; 0x17
     a84:	b8 8d       	ldd	r27, Y+24	; 0x18
     a86:	8f 6f       	ori	r24, 0xFF	; 255
     a88:	9f 6f       	ori	r25, 0xFF	; 255
     a8a:	af 6f       	ori	r26, 0xFF	; 255
     a8c:	bf 67       	ori	r27, 0x7F	; 127
     a8e:	8d 8b       	std	Y+21, r24	; 0x15
     a90:	9e 8b       	std	Y+22, r25	; 0x16
     a92:	af 8b       	std	Y+23, r26	; 0x17
     a94:	b8 8f       	std	Y+24, r27	; 0x18
		return final;
     a96:	6d 89       	ldd	r22, Y+21	; 0x15
     a98:	7e 89       	ldd	r23, Y+22	; 0x16
     a9a:	8f 89       	ldd	r24, Y+23	; 0x17
     a9c:	98 8d       	ldd	r25, Y+24	; 0x18
     a9e:	6e c0       	rjmp	.+220    	; 0xb7c <__stack+0x27d>
	}
	// Underflow case [Smallest number]
	// Exponent cannot be smaller than 0 [with bias of +127]
	else if(exp < 0)
     aa0:	8b 89       	ldd	r24, Y+19	; 0x13
     aa2:	9c 89       	ldd	r25, Y+20	; 0x14
     aa4:	99 23       	and	r25, r25
     aa6:	8c f4       	brge	.+34     	; 0xaca <__stack+0x1cb>
	{
		final &= 0x80000000;
     aa8:	8d 89       	ldd	r24, Y+21	; 0x15
     aaa:	9e 89       	ldd	r25, Y+22	; 0x16
     aac:	af 89       	ldd	r26, Y+23	; 0x17
     aae:	b8 8d       	ldd	r27, Y+24	; 0x18
     ab0:	88 27       	eor	r24, r24
     ab2:	99 27       	eor	r25, r25
     ab4:	aa 27       	eor	r26, r26
     ab6:	b0 78       	andi	r27, 0x80	; 128
     ab8:	8d 8b       	std	Y+21, r24	; 0x15
     aba:	9e 8b       	std	Y+22, r25	; 0x16
     abc:	af 8b       	std	Y+23, r26	; 0x17
     abe:	b8 8f       	std	Y+24, r27	; 0x18
		return final;
     ac0:	6d 89       	ldd	r22, Y+21	; 0x15
     ac2:	7e 89       	ldd	r23, Y+22	; 0x16
     ac4:	8f 89       	ldd	r24, Y+23	; 0x17
     ac6:	98 8d       	ldd	r25, Y+24	; 0x18
     ac8:	59 c0       	rjmp	.+178    	; 0xb7c <__stack+0x27d>
	}
	
	mant0 = exp;
     aca:	8b 89       	ldd	r24, Y+19	; 0x13
     acc:	9c 89       	ldd	r25, Y+20	; 0x14
     ace:	09 2e       	mov	r0, r25
     ad0:	00 0c       	add	r0, r0
     ad2:	aa 0b       	sbc	r26, r26
     ad4:	bb 0b       	sbc	r27, r27
     ad6:	8a 87       	std	Y+10, r24	; 0x0a
     ad8:	9b 87       	std	Y+11, r25	; 0x0b
     ada:	ac 87       	std	Y+12, r26	; 0x0c
     adc:	bd 87       	std	Y+13, r27	; 0x0d
	mant0 = mant0 << 23;		// Extract the final exponent
     ade:	8a 85       	ldd	r24, Y+10	; 0x0a
     ae0:	9b 85       	ldd	r25, Y+11	; 0x0b
     ae2:	ac 85       	ldd	r26, Y+12	; 0x0c
     ae4:	bd 85       	ldd	r27, Y+13	; 0x0d
     ae6:	07 2e       	mov	r0, r23
     ae8:	77 e1       	ldi	r23, 0x17	; 23
     aea:	88 0f       	add	r24, r24
     aec:	99 1f       	adc	r25, r25
     aee:	aa 1f       	adc	r26, r26
     af0:	bb 1f       	adc	r27, r27
     af2:	7a 95       	dec	r23
     af4:	d1 f7       	brne	.-12     	; 0xaea <__stack+0x1eb>
     af6:	70 2d       	mov	r23, r0
     af8:	8a 87       	std	Y+10, r24	; 0x0a
     afa:	9b 87       	std	Y+11, r25	; 0x0b
     afc:	ac 87       	std	Y+12, r26	; 0x0c
     afe:	bd 87       	std	Y+13, r27	; 0x0d
	final |= mant0;				// Insert the exponent into final
     b00:	4a 85       	ldd	r20, Y+10	; 0x0a
     b02:	5b 85       	ldd	r21, Y+11	; 0x0b
     b04:	6c 85       	ldd	r22, Y+12	; 0x0c
     b06:	7d 85       	ldd	r23, Y+13	; 0x0d
     b08:	8d 89       	ldd	r24, Y+21	; 0x15
     b0a:	9e 89       	ldd	r25, Y+22	; 0x16
     b0c:	af 89       	ldd	r26, Y+23	; 0x17
     b0e:	b8 8d       	ldd	r27, Y+24	; 0x18
     b10:	84 2b       	or	r24, r20
     b12:	95 2b       	or	r25, r21
     b14:	a6 2b       	or	r26, r22
     b16:	b7 2b       	or	r27, r23
     b18:	8d 8b       	std	Y+21, r24	; 0x15
     b1a:	9e 8b       	std	Y+22, r25	; 0x16
     b1c:	af 8b       	std	Y+23, r26	; 0x17
     b1e:	b8 8f       	std	Y+24, r27	; 0x18
	mant0 = P;
     b20:	5a a5       	ldd	r21, Y+42	; 0x2a
     b22:	4b a5       	ldd	r20, Y+43	; 0x2b
     b24:	3c a5       	ldd	r19, Y+44	; 0x2c
     b26:	2d a5       	ldd	r18, Y+45	; 0x2d
     b28:	8e a5       	ldd	r24, Y+46	; 0x2e
     b2a:	8f a5       	ldd	r24, Y+47	; 0x2f
     b2c:	88 a9       	ldd	r24, Y+48	; 0x30
     b2e:	89 a9       	ldd	r24, Y+49	; 0x31
     b30:	85 2f       	mov	r24, r21
     b32:	94 2f       	mov	r25, r20
     b34:	a3 2f       	mov	r26, r19
     b36:	b2 2f       	mov	r27, r18
     b38:	8a 87       	std	Y+10, r24	; 0x0a
     b3a:	9b 87       	std	Y+11, r25	; 0x0b
     b3c:	ac 87       	std	Y+12, r26	; 0x0c
     b3e:	bd 87       	std	Y+13, r27	; 0x0d
	mant0 &= 0x007FFFFF;		// Extract the final mantissa
     b40:	8a 85       	ldd	r24, Y+10	; 0x0a
     b42:	9b 85       	ldd	r25, Y+11	; 0x0b
     b44:	ac 85       	ldd	r26, Y+12	; 0x0c
     b46:	bd 85       	ldd	r27, Y+13	; 0x0d
     b48:	af 77       	andi	r26, 0x7F	; 127
     b4a:	bb 27       	eor	r27, r27
     b4c:	8a 87       	std	Y+10, r24	; 0x0a
     b4e:	9b 87       	std	Y+11, r25	; 0x0b
     b50:	ac 87       	std	Y+12, r26	; 0x0c
     b52:	bd 87       	std	Y+13, r27	; 0x0d
	final |= mant0;				// Insert the mantissa into final
     b54:	4a 85       	ldd	r20, Y+10	; 0x0a
     b56:	5b 85       	ldd	r21, Y+11	; 0x0b
     b58:	6c 85       	ldd	r22, Y+12	; 0x0c
     b5a:	7d 85       	ldd	r23, Y+13	; 0x0d
     b5c:	8d 89       	ldd	r24, Y+21	; 0x15
     b5e:	9e 89       	ldd	r25, Y+22	; 0x16
     b60:	af 89       	ldd	r26, Y+23	; 0x17
     b62:	b8 8d       	ldd	r27, Y+24	; 0x18
     b64:	84 2b       	or	r24, r20
     b66:	95 2b       	or	r25, r21
     b68:	a6 2b       	or	r26, r22
     b6a:	b7 2b       	or	r27, r23
     b6c:	8d 8b       	std	Y+21, r24	; 0x15
     b6e:	9e 8b       	std	Y+22, r25	; 0x16
     b70:	af 8b       	std	Y+23, r26	; 0x17
     b72:	b8 8f       	std	Y+24, r27	; 0x18
	return final;
     b74:	6d 89       	ldd	r22, Y+21	; 0x15
     b76:	7e 89       	ldd	r23, Y+22	; 0x16
     b78:	8f 89       	ldd	r24, Y+23	; 0x17
     b7a:	98 8d       	ldd	r25, Y+24	; 0x18
     b7c:	e1 96       	adiw	r28, 0x31	; 49
     b7e:	0f b6       	in	r0, 0x3f	; 63
     b80:	f8 94       	cli
     b82:	de bf       	out	0x3e, r29	; 62
     b84:	0f be       	out	0x3f, r0	; 63
     b86:	cd bf       	out	0x3d, r28	; 61
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	1f 91       	pop	r17
     b8e:	0f 91       	pop	r16
     b90:	ff 90       	pop	r15
     b92:	ef 90       	pop	r14
     b94:	df 90       	pop	r13
     b96:	cf 90       	pop	r12
     b98:	bf 90       	pop	r11
     b9a:	af 90       	pop	r10
     b9c:	08 95       	ret

00000b9e <main>:

uint32_t float_add(uint32_t A, uint32_t B, uint8_t OP);
uint32_t float_mult(uint32_t M, uint32_t R);

int main(void)
{
     b9e:	cf 93       	push	r28
     ba0:	df 93       	push	r29
     ba2:	00 d0       	rcall	.+0      	; 0xba4 <main+0x6>
     ba4:	00 d0       	rcall	.+0      	; 0xba6 <main+0x8>
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t j = 0;
     baa:	19 82       	std	Y+1, r1	; 0x01
     bac:	1a 82       	std	Y+2, r1	; 0x02
     bae:	1b 82       	std	Y+3, r1	; 0x03
     bb0:	1c 82       	std	Y+4, r1	; 0x04
	for(j = 0; j < 26; j++)
     bb2:	19 82       	std	Y+1, r1	; 0x01
     bb4:	1a 82       	std	Y+2, r1	; 0x02
     bb6:	1b 82       	std	Y+3, r1	; 0x03
     bb8:	1c 82       	std	Y+4, r1	; 0x04
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	9a 81       	ldd	r25, Y+2	; 0x02
     bbe:	ab 81       	ldd	r26, Y+3	; 0x03
     bc0:	bc 81       	ldd	r27, Y+4	; 0x04
     bc2:	4a 97       	sbiw	r24, 0x1a	; 26
     bc4:	a1 05       	cpc	r26, r1
     bc6:	b1 05       	cpc	r27, r1
     bc8:	08 f0       	brcs	.+2      	; 0xbcc <main+0x2e>
     bca:	76 c1       	rjmp	.+748    	; 0xeb8 <main+0x31a>
	{
		// dx/dt = SIGMA(y-x)
		dx = float_add(y, x, SUB);
     bcc:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <x>
     bd0:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <x+0x1>
     bd4:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <x+0x2>
     bd8:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <x+0x3>
     bdc:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <y>
     be0:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <y+0x1>
     be4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <y+0x2>
     be8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <y+0x3>
     bec:	01 e0       	ldi	r16, 0x01	; 1
     bee:	0e 94 53 00 	call	0xa6	; 0xa6 <float_add>
     bf2:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <dx>
     bf6:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <dx+0x1>
     bfa:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <dx+0x2>
     bfe:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <dx+0x3>
		dx = float_mult(SIGMA, dx);
     c02:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <dx>
     c06:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <dx+0x1>
     c0a:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <dx+0x2>
     c0e:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <dx+0x3>
     c12:	60 e0       	ldi	r22, 0x00	; 0
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	80 e2       	ldi	r24, 0x20	; 32
     c18:	91 e4       	ldi	r25, 0x41	; 65
     c1a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <float_mult>
     c1e:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <dx>
     c22:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <dx+0x1>
     c26:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <dx+0x2>
     c2a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <dx+0x3>
		dx = float_mult(dx, dt);
     c2e:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <dt>
     c32:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <dt+0x1>
     c36:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <dt+0x2>
     c3a:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <dt+0x3>
     c3e:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <dx>
     c42:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <dx+0x1>
     c46:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <dx+0x2>
     c4a:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <dx+0x3>
     c4e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <float_mult>
     c52:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <dx>
     c56:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <dx+0x1>
     c5a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <dx+0x2>
     c5e:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <dx+0x3>
		
		// dy/dt = x(RHO-z)-y
		dy = float_add(RHO, z, SUB);
     c62:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     c66:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     c6a:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_start+0x2>
     c6e:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_start+0x3>
     c72:	60 e0       	ldi	r22, 0x00	; 0
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	80 ee       	ldi	r24, 0xE0	; 224
     c78:	91 e4       	ldi	r25, 0x41	; 65
     c7a:	0e 94 53 00 	call	0xa6	; 0xa6 <float_add>
     c7e:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <dy>
     c82:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <dy+0x1>
     c86:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <dy+0x2>
     c8a:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <dy+0x3>
		dy = float_mult(dy, x);
     c8e:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <x>
     c92:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <x+0x1>
     c96:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <x+0x2>
     c9a:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <x+0x3>
     c9e:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <dy>
     ca2:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <dy+0x1>
     ca6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <dy+0x2>
     caa:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <dy+0x3>
     cae:	0e 94 7e 02 	call	0x4fc	; 0x4fc <float_mult>
     cb2:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <dy>
     cb6:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <dy+0x1>
     cba:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <dy+0x2>
     cbe:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <dy+0x3>
		dy = float_add(dy, y, SUB);
     cc2:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <y>
     cc6:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <y+0x1>
     cca:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <y+0x2>
     cce:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <y+0x3>
     cd2:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <dy>
     cd6:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <dy+0x1>
     cda:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <dy+0x2>
     cde:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <dy+0x3>
     ce2:	0e 94 53 00 	call	0xa6	; 0xa6 <float_add>
     ce6:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <dy>
     cea:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <dy+0x1>
     cee:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <dy+0x2>
     cf2:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <dy+0x3>
		dy = float_mult(dy, dt);
     cf6:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <dt>
     cfa:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <dt+0x1>
     cfe:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <dt+0x2>
     d02:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <dt+0x3>
     d06:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <dy>
     d0a:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <dy+0x1>
     d0e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <dy+0x2>
     d12:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <dy+0x3>
     d16:	0e 94 7e 02 	call	0x4fc	; 0x4fc <float_mult>
     d1a:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <dy>
     d1e:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <dy+0x1>
     d22:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <dy+0x2>
     d26:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <dy+0x3>
		
		// dz/dt = xy-(BETA)z
		temp = float_mult(x, y);
     d2a:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <y>
     d2e:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <y+0x1>
     d32:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <y+0x2>
     d36:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <y+0x3>
     d3a:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <x>
     d3e:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <x+0x1>
     d42:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <x+0x2>
     d46:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <x+0x3>
     d4a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <float_mult>
     d4e:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <temp>
     d52:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <temp+0x1>
     d56:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <temp+0x2>
     d5a:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <temp+0x3>
		dz = float_mult(BETA, z);
     d5e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     d62:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     d66:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_start+0x2>
     d6a:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_start+0x3>
     d6e:	6b ea       	ldi	r22, 0xAB	; 171
     d70:	7a ea       	ldi	r23, 0xAA	; 170
     d72:	8a e2       	ldi	r24, 0x2A	; 42
     d74:	90 e4       	ldi	r25, 0x40	; 64
     d76:	0e 94 7e 02 	call	0x4fc	; 0x4fc <float_mult>
     d7a:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <__data_end>
     d7e:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <__data_end+0x1>
     d82:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end+0x2>
     d86:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x3>
		dz = float_add(temp, dz, SUB);
     d8a:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__data_end>
     d8e:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__data_end+0x1>
     d92:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__data_end+0x2>
     d96:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__data_end+0x3>
     d9a:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <temp>
     d9e:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <temp+0x1>
     da2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <temp+0x2>
     da6:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <temp+0x3>
     daa:	0e 94 53 00 	call	0xa6	; 0xa6 <float_add>
     dae:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <__data_end>
     db2:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <__data_end+0x1>
     db6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end+0x2>
     dba:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x3>
		dz = float_mult(dz, dt);
     dbe:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <dt>
     dc2:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <dt+0x1>
     dc6:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <dt+0x2>
     dca:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <dt+0x3>
     dce:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <__data_end>
     dd2:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <__data_end+0x1>
     dd6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end+0x2>
     dda:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x3>
     dde:	0e 94 7e 02 	call	0x4fc	; 0x4fc <float_mult>
     de2:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <__data_end>
     de6:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <__data_end+0x1>
     dea:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end+0x2>
     dee:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x3>
		
		x = float_add(x, dx, ADD);
     df2:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <dx>
     df6:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <dx+0x1>
     dfa:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <dx+0x2>
     dfe:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <dx+0x3>
     e02:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <x>
     e06:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <x+0x1>
     e0a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <x+0x2>
     e0e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <x+0x3>
     e12:	00 e0       	ldi	r16, 0x00	; 0
     e14:	0e 94 53 00 	call	0xa6	; 0xa6 <float_add>
     e18:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <x>
     e1c:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <x+0x1>
     e20:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <x+0x2>
     e24:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <x+0x3>
		y = float_add(y, dy, ADD);
     e28:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <dy>
     e2c:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <dy+0x1>
     e30:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <dy+0x2>
     e34:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <dy+0x3>
     e38:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <y>
     e3c:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <y+0x1>
     e40:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <y+0x2>
     e44:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <y+0x3>
     e48:	0e 94 53 00 	call	0xa6	; 0xa6 <float_add>
     e4c:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <y>
     e50:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <y+0x1>
     e54:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <y+0x2>
     e58:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <y+0x3>
		z = float_add(z, dz, ADD);
     e5c:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__data_end>
     e60:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__data_end+0x1>
     e64:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__data_end+0x2>
     e68:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__data_end+0x3>
     e6c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
     e70:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
     e74:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
     e78:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
     e7c:	0e 94 53 00 	call	0xa6	; 0xa6 <float_add>
     e80:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
     e84:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
     e88:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
     e8c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
uint32_t float_mult(uint32_t M, uint32_t R);

int main(void)
{
	volatile uint32_t j = 0;
	for(j = 0; j < 26; j++)
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	9a 81       	ldd	r25, Y+2	; 0x02
     e94:	ab 81       	ldd	r26, Y+3	; 0x03
     e96:	bc 81       	ldd	r27, Y+4	; 0x04
     e98:	01 96       	adiw	r24, 0x01	; 1
     e9a:	a1 1d       	adc	r26, r1
     e9c:	b1 1d       	adc	r27, r1
     e9e:	89 83       	std	Y+1, r24	; 0x01
     ea0:	9a 83       	std	Y+2, r25	; 0x02
     ea2:	ab 83       	std	Y+3, r26	; 0x03
     ea4:	bc 83       	std	Y+4, r27	; 0x04
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	9a 81       	ldd	r25, Y+2	; 0x02
     eaa:	ab 81       	ldd	r26, Y+3	; 0x03
     eac:	bc 81       	ldd	r27, Y+4	; 0x04
     eae:	4a 97       	sbiw	r24, 0x1a	; 26
     eb0:	a1 05       	cpc	r26, r1
     eb2:	b1 05       	cpc	r27, r1
     eb4:	08 f4       	brcc	.+2      	; 0xeb8 <main+0x31a>
     eb6:	8a ce       	rjmp	.-748    	; 0xbcc <main+0x2e>
	}
	
    while (1) 
    {
		// dx/dt = SIGMA(y-x)
		dx = float_add(y, x, SUB);
     eb8:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <x>
     ebc:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <x+0x1>
     ec0:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <x+0x2>
     ec4:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <x+0x3>
     ec8:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <y>
     ecc:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <y+0x1>
     ed0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <y+0x2>
     ed4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <y+0x3>
     ed8:	01 e0       	ldi	r16, 0x01	; 1
     eda:	0e 94 53 00 	call	0xa6	; 0xa6 <float_add>
     ede:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <dx>
     ee2:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <dx+0x1>
     ee6:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <dx+0x2>
     eea:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <dx+0x3>
		dx = float_mult(SIGMA, dx);
     eee:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <dx>
     ef2:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <dx+0x1>
     ef6:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <dx+0x2>
     efa:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <dx+0x3>
     efe:	60 e0       	ldi	r22, 0x00	; 0
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	80 e2       	ldi	r24, 0x20	; 32
     f04:	91 e4       	ldi	r25, 0x41	; 65
     f06:	0e 94 7e 02 	call	0x4fc	; 0x4fc <float_mult>
     f0a:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <dx>
     f0e:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <dx+0x1>
     f12:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <dx+0x2>
     f16:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <dx+0x3>
		dx = float_mult(dx, dt);
     f1a:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <dt>
     f1e:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <dt+0x1>
     f22:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <dt+0x2>
     f26:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <dt+0x3>
     f2a:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <dx>
     f2e:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <dx+0x1>
     f32:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <dx+0x2>
     f36:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <dx+0x3>
     f3a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <float_mult>
     f3e:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <dx>
     f42:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <dx+0x1>
     f46:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <dx+0x2>
     f4a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <dx+0x3>
		
		// dy/dt = x(RHO-z)-y
		dy = float_add(RHO, z, SUB);
     f4e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
     f52:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
     f56:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_start+0x2>
     f5a:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_start+0x3>
     f5e:	60 e0       	ldi	r22, 0x00	; 0
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	80 ee       	ldi	r24, 0xE0	; 224
     f64:	91 e4       	ldi	r25, 0x41	; 65
     f66:	0e 94 53 00 	call	0xa6	; 0xa6 <float_add>
     f6a:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <dy>
     f6e:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <dy+0x1>
     f72:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <dy+0x2>
     f76:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <dy+0x3>
		dy = float_mult(dy, x);
     f7a:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <x>
     f7e:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <x+0x1>
     f82:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <x+0x2>
     f86:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <x+0x3>
     f8a:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <dy>
     f8e:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <dy+0x1>
     f92:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <dy+0x2>
     f96:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <dy+0x3>
     f9a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <float_mult>
     f9e:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <dy>
     fa2:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <dy+0x1>
     fa6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <dy+0x2>
     faa:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <dy+0x3>
		dy = float_add(dy, y, SUB);
     fae:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <y>
     fb2:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <y+0x1>
     fb6:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <y+0x2>
     fba:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <y+0x3>
     fbe:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <dy>
     fc2:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <dy+0x1>
     fc6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <dy+0x2>
     fca:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <dy+0x3>
     fce:	0e 94 53 00 	call	0xa6	; 0xa6 <float_add>
     fd2:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <dy>
     fd6:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <dy+0x1>
     fda:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <dy+0x2>
     fde:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <dy+0x3>
		dy = float_mult(dy, dt);
     fe2:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <dt>
     fe6:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <dt+0x1>
     fea:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <dt+0x2>
     fee:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <dt+0x3>
     ff2:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <dy>
     ff6:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <dy+0x1>
     ffa:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <dy+0x2>
     ffe:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <dy+0x3>
    1002:	0e 94 7e 02 	call	0x4fc	; 0x4fc <float_mult>
    1006:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <dy>
    100a:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <dy+0x1>
    100e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <dy+0x2>
    1012:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <dy+0x3>
		
		// dz/dt = xy-(BETA)z
		temp = float_mult(x, y);
    1016:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <y>
    101a:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <y+0x1>
    101e:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <y+0x2>
    1022:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <y+0x3>
    1026:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <x>
    102a:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <x+0x1>
    102e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <x+0x2>
    1032:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <x+0x3>
    1036:	0e 94 7e 02 	call	0x4fc	; 0x4fc <float_mult>
    103a:	60 93 1c 01 	sts	0x011C, r22	; 0x80011c <temp>
    103e:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <temp+0x1>
    1042:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <temp+0x2>
    1046:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <temp+0x3>
		dz = float_mult(BETA, z);
    104a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    104e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1052:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_start+0x2>
    1056:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_start+0x3>
    105a:	6b ea       	ldi	r22, 0xAB	; 171
    105c:	7a ea       	ldi	r23, 0xAA	; 170
    105e:	8a e2       	ldi	r24, 0x2A	; 42
    1060:	90 e4       	ldi	r25, 0x40	; 64
    1062:	0e 94 7e 02 	call	0x4fc	; 0x4fc <float_mult>
    1066:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <__data_end>
    106a:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <__data_end+0x1>
    106e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end+0x2>
    1072:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x3>
		dz = float_add(temp, dz, SUB);
    1076:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__data_end>
    107a:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__data_end+0x1>
    107e:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__data_end+0x2>
    1082:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__data_end+0x3>
    1086:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <temp>
    108a:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <temp+0x1>
    108e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <temp+0x2>
    1092:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <temp+0x3>
    1096:	0e 94 53 00 	call	0xa6	; 0xa6 <float_add>
    109a:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <__data_end>
    109e:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <__data_end+0x1>
    10a2:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end+0x2>
    10a6:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x3>
		dz = float_mult(dz, dt);
    10aa:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <dt>
    10ae:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <dt+0x1>
    10b2:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <dt+0x2>
    10b6:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <dt+0x3>
    10ba:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <__data_end>
    10be:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <__data_end+0x1>
    10c2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end+0x2>
    10c6:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x3>
    10ca:	0e 94 7e 02 	call	0x4fc	; 0x4fc <float_mult>
    10ce:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <__data_end>
    10d2:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <__data_end+0x1>
    10d6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end+0x2>
    10da:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x3>
		
		x = float_add(x, dx, ADD);
    10de:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <dx>
    10e2:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <dx+0x1>
    10e6:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <dx+0x2>
    10ea:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <dx+0x3>
    10ee:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <x>
    10f2:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <x+0x1>
    10f6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <x+0x2>
    10fa:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <x+0x3>
    10fe:	00 e0       	ldi	r16, 0x00	; 0
    1100:	0e 94 53 00 	call	0xa6	; 0xa6 <float_add>
    1104:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <x>
    1108:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <x+0x1>
    110c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <x+0x2>
    1110:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <x+0x3>
		y = float_add(y, dy, ADD);
    1114:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <dy>
    1118:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <dy+0x1>
    111c:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <dy+0x2>
    1120:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <dy+0x3>
    1124:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <y>
    1128:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <y+0x1>
    112c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <y+0x2>
    1130:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <y+0x3>
    1134:	0e 94 53 00 	call	0xa6	; 0xa6 <float_add>
    1138:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <y>
    113c:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <y+0x1>
    1140:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <y+0x2>
    1144:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <y+0x3>
		z = float_add(z, dz, ADD);
    1148:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__data_end>
    114c:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__data_end+0x1>
    1150:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__data_end+0x2>
    1154:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__data_end+0x3>
    1158:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    115c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    1160:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    1164:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    1168:	0e 94 53 00 	call	0xa6	; 0xa6 <float_add>
    116c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    1170:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    1174:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    1178:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    117c:	9d ce       	rjmp	.-710    	; 0xeb8 <main+0x31a>

0000117e <__ashldi3>:
    117e:	0f 93       	push	r16
    1180:	08 30       	cpi	r16, 0x08	; 8
    1182:	90 f0       	brcs	.+36     	; 0x11a8 <__ashldi3+0x2a>
    1184:	98 2f       	mov	r25, r24
    1186:	87 2f       	mov	r24, r23
    1188:	76 2f       	mov	r23, r22
    118a:	65 2f       	mov	r22, r21
    118c:	54 2f       	mov	r21, r20
    118e:	43 2f       	mov	r20, r19
    1190:	32 2f       	mov	r19, r18
    1192:	22 27       	eor	r18, r18
    1194:	08 50       	subi	r16, 0x08	; 8
    1196:	f4 cf       	rjmp	.-24     	; 0x1180 <__ashldi3+0x2>
    1198:	22 0f       	add	r18, r18
    119a:	33 1f       	adc	r19, r19
    119c:	44 1f       	adc	r20, r20
    119e:	55 1f       	adc	r21, r21
    11a0:	66 1f       	adc	r22, r22
    11a2:	77 1f       	adc	r23, r23
    11a4:	88 1f       	adc	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	0a 95       	dec	r16
    11aa:	b2 f7       	brpl	.-20     	; 0x1198 <__ashldi3+0x1a>
    11ac:	0f 91       	pop	r16
    11ae:	08 95       	ret

000011b0 <__ashrdi3>:
    11b0:	97 fb       	bst	r25, 7
    11b2:	10 f8       	bld	r1, 0

000011b4 <__lshrdi3>:
    11b4:	16 94       	lsr	r1
    11b6:	00 08       	sbc	r0, r0
    11b8:	0f 93       	push	r16
    11ba:	08 30       	cpi	r16, 0x08	; 8
    11bc:	98 f0       	brcs	.+38     	; 0x11e4 <__lshrdi3+0x30>
    11be:	08 50       	subi	r16, 0x08	; 8
    11c0:	23 2f       	mov	r18, r19
    11c2:	34 2f       	mov	r19, r20
    11c4:	45 2f       	mov	r20, r21
    11c6:	56 2f       	mov	r21, r22
    11c8:	67 2f       	mov	r22, r23
    11ca:	78 2f       	mov	r23, r24
    11cc:	89 2f       	mov	r24, r25
    11ce:	90 2d       	mov	r25, r0
    11d0:	f4 cf       	rjmp	.-24     	; 0x11ba <__lshrdi3+0x6>
    11d2:	05 94       	asr	r0
    11d4:	97 95       	ror	r25
    11d6:	87 95       	ror	r24
    11d8:	77 95       	ror	r23
    11da:	67 95       	ror	r22
    11dc:	57 95       	ror	r21
    11de:	47 95       	ror	r20
    11e0:	37 95       	ror	r19
    11e2:	27 95       	ror	r18
    11e4:	0a 95       	dec	r16
    11e6:	aa f7       	brpl	.-22     	; 0x11d2 <__lshrdi3+0x1e>
    11e8:	0f 91       	pop	r16
    11ea:	08 95       	ret

000011ec <__adddi3>:
    11ec:	2a 0d       	add	r18, r10
    11ee:	3b 1d       	adc	r19, r11
    11f0:	4c 1d       	adc	r20, r12
    11f2:	5d 1d       	adc	r21, r13
    11f4:	6e 1d       	adc	r22, r14
    11f6:	7f 1d       	adc	r23, r15
    11f8:	80 1f       	adc	r24, r16
    11fa:	91 1f       	adc	r25, r17
    11fc:	08 95       	ret

000011fe <__cmpdi2_s8>:
    11fe:	00 24       	eor	r0, r0
    1200:	a7 fd       	sbrc	r26, 7
    1202:	00 94       	com	r0
    1204:	2a 17       	cp	r18, r26
    1206:	30 05       	cpc	r19, r0
    1208:	40 05       	cpc	r20, r0
    120a:	50 05       	cpc	r21, r0
    120c:	60 05       	cpc	r22, r0
    120e:	70 05       	cpc	r23, r0
    1210:	80 05       	cpc	r24, r0
    1212:	90 05       	cpc	r25, r0
    1214:	08 95       	ret

00001216 <_exit>:
    1216:	f8 94       	cli

00001218 <__stop_program>:
    1218:	ff cf       	rjmp	.-2      	; 0x1218 <__stop_program>
