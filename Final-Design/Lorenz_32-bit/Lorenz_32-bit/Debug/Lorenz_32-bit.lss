
Lorenz_32-bit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000005a6  0000061a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000622  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000654  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000086b  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000666  00000000  00000000  00000f2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d9  00000000  00000000  00001591  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  0000196c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b3  00000000  00000000  000019f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000025a  00000000  00000000  00001dab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00002005  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ea       	ldi	r30, 0xA6	; 166
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <main>
  9e:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <float_mult>:
	
	return final;
}

uint32_t float_mult(volatile uint32_t a, volatile uint32_t b)
{
  a6:	af 92       	push	r10
  a8:	bf 92       	push	r11
  aa:	cf 92       	push	r12
  ac:	df 92       	push	r13
  ae:	ef 92       	push	r14
  b0:	ff 92       	push	r15
  b2:	0f 93       	push	r16
  b4:	1f 93       	push	r17
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
  be:	e1 97       	sbiw	r28, 0x31	; 49
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	f8 94       	cli
  c4:	de bf       	out	0x3e, r29	; 62
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	cd bf       	out	0x3d, r28	; 61
  ca:	6a a7       	std	Y+42, r22	; 0x2a
  cc:	7b a7       	std	Y+43, r23	; 0x2b
  ce:	8c a7       	std	Y+44, r24	; 0x2c
  d0:	9d a7       	std	Y+45, r25	; 0x2d
  d2:	2e a7       	std	Y+46, r18	; 0x2e
  d4:	3f a7       	std	Y+47, r19	; 0x2f
  d6:	48 ab       	std	Y+48, r20	; 0x30
  d8:	59 ab       	std	Y+49, r21	; 0x31
	// Operand a
	volatile uint8_t exp0 = a >> 23;							// Extract the exponent field of a
  da:	8a a5       	ldd	r24, Y+42	; 0x2a
  dc:	9b a5       	ldd	r25, Y+43	; 0x2b
  de:	ac a5       	ldd	r26, Y+44	; 0x2c
  e0:	bd a5       	ldd	r27, Y+45	; 0x2d
  e2:	07 2e       	mov	r0, r23
  e4:	77 e1       	ldi	r23, 0x17	; 23
  e6:	b6 95       	lsr	r27
  e8:	a7 95       	ror	r26
  ea:	97 95       	ror	r25
  ec:	87 95       	ror	r24
  ee:	7a 95       	dec	r23
  f0:	d1 f7       	brne	.-12     	; 0xe6 <float_mult+0x40>
  f2:	70 2d       	mov	r23, r0
  f4:	89 83       	std	Y+1, r24	; 0x01
	volatile uint32_t mant0 = (a & 0x007FFFFF) | 0x00800000;	// Extract the mantissa field of a
  f6:	8a a5       	ldd	r24, Y+42	; 0x2a
  f8:	9b a5       	ldd	r25, Y+43	; 0x2b
  fa:	ac a5       	ldd	r26, Y+44	; 0x2c
  fc:	bd a5       	ldd	r27, Y+45	; 0x2d
  fe:	af 77       	andi	r26, 0x7F	; 127
 100:	bb 27       	eor	r27, r27
 102:	a0 68       	ori	r26, 0x80	; 128
 104:	8a 83       	std	Y+2, r24	; 0x02
 106:	9b 83       	std	Y+3, r25	; 0x03
 108:	ac 83       	std	Y+4, r26	; 0x04
 10a:	bd 83       	std	Y+5, r27	; 0x05
	
	// Operand b
	volatile uint8_t exp1 = b >> 23;							// Extract the exponent field of b
 10c:	8e a5       	ldd	r24, Y+46	; 0x2e
 10e:	9f a5       	ldd	r25, Y+47	; 0x2f
 110:	a8 a9       	ldd	r26, Y+48	; 0x30
 112:	b9 a9       	ldd	r27, Y+49	; 0x31
 114:	07 2e       	mov	r0, r23
 116:	77 e1       	ldi	r23, 0x17	; 23
 118:	b6 95       	lsr	r27
 11a:	a7 95       	ror	r26
 11c:	97 95       	ror	r25
 11e:	87 95       	ror	r24
 120:	7a 95       	dec	r23
 122:	d1 f7       	brne	.-12     	; 0x118 <float_mult+0x72>
 124:	70 2d       	mov	r23, r0
 126:	8e 83       	std	Y+6, r24	; 0x06
	volatile uint32_t mant1 = (b & 0x007FFFFF) | 0x00800000;	// Extract the mantissa field of b
 128:	8e a5       	ldd	r24, Y+46	; 0x2e
 12a:	9f a5       	ldd	r25, Y+47	; 0x2f
 12c:	a8 a9       	ldd	r26, Y+48	; 0x30
 12e:	b9 a9       	ldd	r27, Y+49	; 0x31
 130:	af 77       	andi	r26, 0x7F	; 127
 132:	bb 27       	eor	r27, r27
 134:	a0 68       	ori	r26, 0x80	; 128
 136:	8f 83       	std	Y+7, r24	; 0x07
 138:	98 87       	std	Y+8, r25	; 0x08
 13a:	a9 87       	std	Y+9, r26	; 0x09
 13c:	ba 87       	std	Y+10, r27	; 0x0a
	volatile uint64_t A;
	volatile uint64_t S;
	volatile uint64_t P;
	
	// Compute the sign
	final |= (a & 0x80000000) ^ (b & 0x80000000);	// Xor the sign bits
 13e:	8a a5       	ldd	r24, Y+42	; 0x2a
 140:	9b a5       	ldd	r25, Y+43	; 0x2b
 142:	ac a5       	ldd	r26, Y+44	; 0x2c
 144:	bd a5       	ldd	r27, Y+45	; 0x2d
 146:	4e a5       	ldd	r20, Y+46	; 0x2e
 148:	5f a5       	ldd	r21, Y+47	; 0x2f
 14a:	68 a9       	ldd	r22, Y+48	; 0x30
 14c:	79 a9       	ldd	r23, Y+49	; 0x31
 14e:	0d 85       	ldd	r16, Y+13	; 0x0d
 150:	1e 85       	ldd	r17, Y+14	; 0x0e
 152:	2f 85       	ldd	r18, Y+15	; 0x0f
 154:	38 89       	ldd	r19, Y+16	; 0x10
 156:	84 27       	eor	r24, r20
 158:	95 27       	eor	r25, r21
 15a:	a6 27       	eor	r26, r22
 15c:	b7 27       	eor	r27, r23
 15e:	88 27       	eor	r24, r24
 160:	99 27       	eor	r25, r25
 162:	aa 27       	eor	r26, r26
 164:	b0 78       	andi	r27, 0x80	; 128
 166:	80 2b       	or	r24, r16
 168:	91 2b       	or	r25, r17
 16a:	a2 2b       	or	r26, r18
 16c:	b3 2b       	or	r27, r19
 16e:	8d 87       	std	Y+13, r24	; 0x0d
 170:	9e 87       	std	Y+14, r25	; 0x0e
 172:	af 87       	std	Y+15, r26	; 0x0f
 174:	b8 8b       	std	Y+16, r27	; 0x10
	
	// Compute the initial exponent
	exp = (exp0 + exp1) - 127;						// Add the exponents and subtract 127 [rid the redundant bias]
 176:	29 81       	ldd	r18, Y+1	; 0x01
 178:	8e 81       	ldd	r24, Y+6	; 0x06
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	82 0f       	add	r24, r18
 17e:	91 1d       	adc	r25, r1
 180:	8f 57       	subi	r24, 0x7F	; 127
 182:	91 09       	sbc	r25, r1
 184:	9c 87       	std	Y+12, r25	; 0x0c
 186:	8b 87       	std	Y+11, r24	; 0x0b
	if(exp > 0x00FF)								// Early check for overflow
 188:	8b 85       	ldd	r24, Y+11	; 0x0b
 18a:	9c 85       	ldd	r25, Y+12	; 0x0c
 18c:	8f 3f       	cpi	r24, 0xFF	; 255
 18e:	91 05       	cpc	r25, r1
 190:	81 f0       	breq	.+32     	; 0x1b2 <float_mult+0x10c>
 192:	78 f0       	brcs	.+30     	; 0x1b2 <float_mult+0x10c>
		return final |= (0x7FFFFFFF);
 194:	8d 85       	ldd	r24, Y+13	; 0x0d
 196:	9e 85       	ldd	r25, Y+14	; 0x0e
 198:	af 85       	ldd	r26, Y+15	; 0x0f
 19a:	b8 89       	ldd	r27, Y+16	; 0x10
 19c:	bc 01       	movw	r22, r24
 19e:	cd 01       	movw	r24, r26
 1a0:	6f 6f       	ori	r22, 0xFF	; 255
 1a2:	7f 6f       	ori	r23, 0xFF	; 255
 1a4:	8f 6f       	ori	r24, 0xFF	; 255
 1a6:	9f 67       	ori	r25, 0x7F	; 127
 1a8:	6d 87       	std	Y+13, r22	; 0x0d
 1aa:	7e 87       	std	Y+14, r23	; 0x0e
 1ac:	8f 87       	std	Y+15, r24	; 0x0f
 1ae:	98 8b       	std	Y+16, r25	; 0x10
 1b0:	88 c1       	rjmp	.+784    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
	// m = mant0		x = 25 bits
	// r = mant1		y = 25 bits
	// A = S = P = x + y + 1 = 51 bits [USE LONG INT]
	
	// Fill register A with m
	A = mant0;
 1b2:	0a 81       	ldd	r16, Y+2	; 0x02
 1b4:	1b 81       	ldd	r17, Y+3	; 0x03
 1b6:	2c 81       	ldd	r18, Y+4	; 0x04
 1b8:	3d 81       	ldd	r19, Y+5	; 0x05
 1ba:	0a 8b       	std	Y+18, r16	; 0x12
 1bc:	1b 8b       	std	Y+19, r17	; 0x13
 1be:	2c 8b       	std	Y+20, r18	; 0x14
 1c0:	3d 8b       	std	Y+21, r19	; 0x15
 1c2:	1e 8a       	std	Y+22, r1	; 0x16
 1c4:	1f 8a       	std	Y+23, r1	; 0x17
 1c6:	18 8e       	std	Y+24, r1	; 0x18
 1c8:	19 8e       	std	Y+25, r1	; 0x19
	A = A << 26;
 1ca:	2a 89       	ldd	r18, Y+18	; 0x12
 1cc:	3b 89       	ldd	r19, Y+19	; 0x13
 1ce:	4c 89       	ldd	r20, Y+20	; 0x14
 1d0:	5d 89       	ldd	r21, Y+21	; 0x15
 1d2:	6e 89       	ldd	r22, Y+22	; 0x16
 1d4:	7f 89       	ldd	r23, Y+23	; 0x17
 1d6:	88 8d       	ldd	r24, Y+24	; 0x18
 1d8:	99 8d       	ldd	r25, Y+25	; 0x19
 1da:	0a e1       	ldi	r16, 0x1A	; 26
 1dc:	0e 94 85 02 	call	0x50a	; 0x50a <__ashldi3>
 1e0:	2a 8b       	std	Y+18, r18	; 0x12
 1e2:	3b 8b       	std	Y+19, r19	; 0x13
 1e4:	4c 8b       	std	Y+20, r20	; 0x14
 1e6:	5d 8b       	std	Y+21, r21	; 0x15
 1e8:	6e 8b       	std	Y+22, r22	; 0x16
 1ea:	7f 8b       	std	Y+23, r23	; 0x17
 1ec:	88 8f       	std	Y+24, r24	; 0x18
 1ee:	99 8f       	std	Y+25, r25	; 0x19
	
	// Two's complement of m
	mant0 = ~mant0;
 1f0:	8a 81       	ldd	r24, Y+2	; 0x02
 1f2:	9b 81       	ldd	r25, Y+3	; 0x03
 1f4:	ac 81       	ldd	r26, Y+4	; 0x04
 1f6:	bd 81       	ldd	r27, Y+5	; 0x05
 1f8:	80 95       	com	r24
 1fa:	90 95       	com	r25
 1fc:	a0 95       	com	r26
 1fe:	b0 95       	com	r27
 200:	8a 83       	std	Y+2, r24	; 0x02
 202:	9b 83       	std	Y+3, r25	; 0x03
 204:	ac 83       	std	Y+4, r26	; 0x04
 206:	bd 83       	std	Y+5, r27	; 0x05
	mant0 += 1;
 208:	8a 81       	ldd	r24, Y+2	; 0x02
 20a:	9b 81       	ldd	r25, Y+3	; 0x03
 20c:	ac 81       	ldd	r26, Y+4	; 0x04
 20e:	bd 81       	ldd	r27, Y+5	; 0x05
 210:	01 96       	adiw	r24, 0x01	; 1
 212:	a1 1d       	adc	r26, r1
 214:	b1 1d       	adc	r27, r1
 216:	8a 83       	std	Y+2, r24	; 0x02
 218:	9b 83       	std	Y+3, r25	; 0x03
 21a:	ac 83       	std	Y+4, r26	; 0x04
 21c:	bd 83       	std	Y+5, r27	; 0x05
	
	// Fill register S with -m
	S = mant0;
 21e:	0a 81       	ldd	r16, Y+2	; 0x02
 220:	1b 81       	ldd	r17, Y+3	; 0x03
 222:	2c 81       	ldd	r18, Y+4	; 0x04
 224:	3d 81       	ldd	r19, Y+5	; 0x05
 226:	0a 8f       	std	Y+26, r16	; 0x1a
 228:	1b 8f       	std	Y+27, r17	; 0x1b
 22a:	2c 8f       	std	Y+28, r18	; 0x1c
 22c:	3d 8f       	std	Y+29, r19	; 0x1d
 22e:	1e 8e       	std	Y+30, r1	; 0x1e
 230:	1f 8e       	std	Y+31, r1	; 0x1f
 232:	18 a2       	std	Y+32, r1	; 0x20
 234:	19 a2       	std	Y+33, r1	; 0x21
	S = S << 26;
 236:	2a 8d       	ldd	r18, Y+26	; 0x1a
 238:	3b 8d       	ldd	r19, Y+27	; 0x1b
 23a:	4c 8d       	ldd	r20, Y+28	; 0x1c
 23c:	5d 8d       	ldd	r21, Y+29	; 0x1d
 23e:	6e 8d       	ldd	r22, Y+30	; 0x1e
 240:	7f 8d       	ldd	r23, Y+31	; 0x1f
 242:	88 a1       	ldd	r24, Y+32	; 0x20
 244:	99 a1       	ldd	r25, Y+33	; 0x21
 246:	0a e1       	ldi	r16, 0x1A	; 26
 248:	0e 94 85 02 	call	0x50a	; 0x50a <__ashldi3>
 24c:	2a 8f       	std	Y+26, r18	; 0x1a
 24e:	3b 8f       	std	Y+27, r19	; 0x1b
 250:	4c 8f       	std	Y+28, r20	; 0x1c
 252:	5d 8f       	std	Y+29, r21	; 0x1d
 254:	6e 8f       	std	Y+30, r22	; 0x1e
 256:	7f 8f       	std	Y+31, r23	; 0x1f
 258:	88 a3       	std	Y+32, r24	; 0x20
 25a:	99 a3       	std	Y+33, r25	; 0x21
	S &= 0x0007FFFFFFFFFFFF;
 25c:	6a 8d       	ldd	r22, Y+26	; 0x1a
 25e:	5b 8d       	ldd	r21, Y+27	; 0x1b
 260:	4c 8d       	ldd	r20, Y+28	; 0x1c
 262:	3d 8d       	ldd	r19, Y+29	; 0x1d
 264:	2e 8d       	ldd	r18, Y+30	; 0x1e
 266:	9f 8d       	ldd	r25, Y+31	; 0x1f
 268:	88 a1       	ldd	r24, Y+32	; 0x20
 26a:	79 a1       	ldd	r23, Y+33	; 0x21
 26c:	87 70       	andi	r24, 0x07	; 7
 26e:	6a 8f       	std	Y+26, r22	; 0x1a
 270:	5b 8f       	std	Y+27, r21	; 0x1b
 272:	4c 8f       	std	Y+28, r20	; 0x1c
 274:	3d 8f       	std	Y+29, r19	; 0x1d
 276:	2e 8f       	std	Y+30, r18	; 0x1e
 278:	9f 8f       	std	Y+31, r25	; 0x1f
 27a:	88 a3       	std	Y+32, r24	; 0x20
 27c:	19 a2       	std	Y+33, r1	; 0x21
	
	// Fill register P with r
	P = mant1 << 1;
 27e:	0f 81       	ldd	r16, Y+7	; 0x07
 280:	18 85       	ldd	r17, Y+8	; 0x08
 282:	29 85       	ldd	r18, Y+9	; 0x09
 284:	3a 85       	ldd	r19, Y+10	; 0x0a
 286:	00 0f       	add	r16, r16
 288:	11 1f       	adc	r17, r17
 28a:	22 1f       	adc	r18, r18
 28c:	33 1f       	adc	r19, r19
 28e:	0a a3       	std	Y+34, r16	; 0x22
 290:	1b a3       	std	Y+35, r17	; 0x23
 292:	2c a3       	std	Y+36, r18	; 0x24
 294:	3d a3       	std	Y+37, r19	; 0x25
 296:	1e a2       	std	Y+38, r1	; 0x26
 298:	1f a2       	std	Y+39, r1	; 0x27
 29a:	18 a6       	std	Y+40, r1	; 0x28
 29c:	19 a6       	std	Y+41, r1	; 0x29
	
	for(i = 0; i < 25; i++)
 29e:	19 8a       	std	Y+17, r1	; 0x11
 2a0:	89 89       	ldd	r24, Y+17	; 0x11
 2a2:	89 31       	cpi	r24, 0x19	; 25
 2a4:	08 f0       	brcs	.+2      	; 0x2a8 <float_mult+0x202>
 2a6:	bf c0       	rjmp	.+382    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	{
		if((P & 3) == 1)
 2a8:	2a a1       	ldd	r18, Y+34	; 0x22
 2aa:	8b a1       	ldd	r24, Y+35	; 0x23
 2ac:	8c a1       	ldd	r24, Y+36	; 0x24
 2ae:	8d a1       	ldd	r24, Y+37	; 0x25
 2b0:	8e a1       	ldd	r24, Y+38	; 0x26
 2b2:	8f a1       	ldd	r24, Y+39	; 0x27
 2b4:	88 a5       	ldd	r24, Y+40	; 0x28
 2b6:	89 a5       	ldd	r24, Y+41	; 0x29
 2b8:	23 70       	andi	r18, 0x03	; 3
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	50 e0       	ldi	r21, 0x00	; 0
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	a1 e0       	ldi	r26, 0x01	; 1
 2ca:	0e 94 c5 02 	call	0x58a	; 0x58a <__cmpdi2_s8>
 2ce:	d9 f4       	brne	.+54     	; 0x306 <float_mult+0x260>
		{
			P += A;
 2d0:	2a 89       	ldd	r18, Y+18	; 0x12
 2d2:	3b 89       	ldd	r19, Y+19	; 0x13
 2d4:	4c 89       	ldd	r20, Y+20	; 0x14
 2d6:	5d 89       	ldd	r21, Y+21	; 0x15
 2d8:	6e 89       	ldd	r22, Y+22	; 0x16
 2da:	7f 89       	ldd	r23, Y+23	; 0x17
 2dc:	88 8d       	ldd	r24, Y+24	; 0x18
 2de:	99 8d       	ldd	r25, Y+25	; 0x19
 2e0:	aa a0       	ldd	r10, Y+34	; 0x22
 2e2:	bb a0       	ldd	r11, Y+35	; 0x23
 2e4:	cc a0       	ldd	r12, Y+36	; 0x24
 2e6:	dd a0       	ldd	r13, Y+37	; 0x25
 2e8:	ee a0       	ldd	r14, Y+38	; 0x26
 2ea:	ff a0       	ldd	r15, Y+39	; 0x27
 2ec:	08 a5       	ldd	r16, Y+40	; 0x28
 2ee:	19 a5       	ldd	r17, Y+41	; 0x29
 2f0:	0e 94 bc 02 	call	0x578	; 0x578 <__adddi3>
 2f4:	2a a3       	std	Y+34, r18	; 0x22
 2f6:	3b a3       	std	Y+35, r19	; 0x23
 2f8:	4c a3       	std	Y+36, r20	; 0x24
 2fa:	5d a3       	std	Y+37, r21	; 0x25
 2fc:	6e a3       	std	Y+38, r22	; 0x26
 2fe:	7f a3       	std	Y+39, r23	; 0x27
 300:	88 a7       	std	Y+40, r24	; 0x28
 302:	99 a7       	std	Y+41, r25	; 0x29
 304:	2e c0       	rjmp	.+92     	; 0x362 <float_mult+0x2bc>
		}
		else if((P & 3) == 2)
 306:	2a a1       	ldd	r18, Y+34	; 0x22
 308:	8b a1       	ldd	r24, Y+35	; 0x23
 30a:	8c a1       	ldd	r24, Y+36	; 0x24
 30c:	8d a1       	ldd	r24, Y+37	; 0x25
 30e:	8e a1       	ldd	r24, Y+38	; 0x26
 310:	8f a1       	ldd	r24, Y+39	; 0x27
 312:	88 a5       	ldd	r24, Y+40	; 0x28
 314:	89 a5       	ldd	r24, Y+41	; 0x29
 316:	23 70       	andi	r18, 0x03	; 3
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	40 e0       	ldi	r20, 0x00	; 0
 31c:	50 e0       	ldi	r21, 0x00	; 0
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	70 e0       	ldi	r23, 0x00	; 0
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	a2 e0       	ldi	r26, 0x02	; 2
 328:	0e 94 c5 02 	call	0x58a	; 0x58a <__cmpdi2_s8>
 32c:	d1 f4       	brne	.+52     	; 0x362 <float_mult+0x2bc>
		{
			P += S;
 32e:	2a 8d       	ldd	r18, Y+26	; 0x1a
 330:	3b 8d       	ldd	r19, Y+27	; 0x1b
 332:	4c 8d       	ldd	r20, Y+28	; 0x1c
 334:	5d 8d       	ldd	r21, Y+29	; 0x1d
 336:	6e 8d       	ldd	r22, Y+30	; 0x1e
 338:	7f 8d       	ldd	r23, Y+31	; 0x1f
 33a:	88 a1       	ldd	r24, Y+32	; 0x20
 33c:	99 a1       	ldd	r25, Y+33	; 0x21
 33e:	aa a0       	ldd	r10, Y+34	; 0x22
 340:	bb a0       	ldd	r11, Y+35	; 0x23
 342:	cc a0       	ldd	r12, Y+36	; 0x24
 344:	dd a0       	ldd	r13, Y+37	; 0x25
 346:	ee a0       	ldd	r14, Y+38	; 0x26
 348:	ff a0       	ldd	r15, Y+39	; 0x27
 34a:	08 a5       	ldd	r16, Y+40	; 0x28
 34c:	19 a5       	ldd	r17, Y+41	; 0x29
 34e:	0e 94 bc 02 	call	0x578	; 0x578 <__adddi3>
 352:	2a a3       	std	Y+34, r18	; 0x22
 354:	3b a3       	std	Y+35, r19	; 0x23
 356:	4c a3       	std	Y+36, r20	; 0x24
 358:	5d a3       	std	Y+37, r21	; 0x25
 35a:	6e a3       	std	Y+38, r22	; 0x26
 35c:	7f a3       	std	Y+39, r23	; 0x27
 35e:	88 a7       	std	Y+40, r24	; 0x28
 360:	99 a7       	std	Y+41, r25	; 0x29
		}
		P &= 0x0007FFFFFFFFFFFF;		// Mask out the overflow
 362:	6a a1       	ldd	r22, Y+34	; 0x22
 364:	5b a1       	ldd	r21, Y+35	; 0x23
 366:	4c a1       	ldd	r20, Y+36	; 0x24
 368:	3d a1       	ldd	r19, Y+37	; 0x25
 36a:	2e a1       	ldd	r18, Y+38	; 0x26
 36c:	9f a1       	ldd	r25, Y+39	; 0x27
 36e:	88 a5       	ldd	r24, Y+40	; 0x28
 370:	79 a5       	ldd	r23, Y+41	; 0x29
 372:	87 70       	andi	r24, 0x07	; 7
 374:	6a a3       	std	Y+34, r22	; 0x22
 376:	5b a3       	std	Y+35, r21	; 0x23
 378:	4c a3       	std	Y+36, r20	; 0x24
 37a:	3d a3       	std	Y+37, r19	; 0x25
 37c:	2e a3       	std	Y+38, r18	; 0x26
 37e:	9f a3       	std	Y+39, r25	; 0x27
 380:	88 a7       	std	Y+40, r24	; 0x28
 382:	19 a6       	std	Y+41, r1	; 0x29
		
		// Shift negative number
		if(P >= 0x0004000000000000)
 384:	2a a1       	ldd	r18, Y+34	; 0x22
 386:	3b a1       	ldd	r19, Y+35	; 0x23
 388:	4c a1       	ldd	r20, Y+36	; 0x24
 38a:	5d a1       	ldd	r21, Y+37	; 0x25
 38c:	6e a1       	ldd	r22, Y+38	; 0x26
 38e:	7f a1       	ldd	r23, Y+39	; 0x27
 390:	88 a5       	ldd	r24, Y+40	; 0x28
 392:	99 a5       	ldd	r25, Y+41	; 0x29
 394:	2f 3f       	cpi	r18, 0xFF	; 255
 396:	3f 4f       	sbci	r19, 0xFF	; 255
 398:	4f 4f       	sbci	r20, 0xFF	; 255
 39a:	5f 4f       	sbci	r21, 0xFF	; 255
 39c:	6f 4f       	sbci	r22, 0xFF	; 255
 39e:	7f 4f       	sbci	r23, 0xFF	; 255
 3a0:	83 40       	sbci	r24, 0x03	; 3
 3a2:	91 05       	cpc	r25, r1
 3a4:	31 f1       	breq	.+76     	; 0x3f2 <float_mult+0x34c>
 3a6:	28 f1       	brcs	.+74     	; 0x3f2 <float_mult+0x34c>
		{
			P = P >> 1;
 3a8:	2a a1       	ldd	r18, Y+34	; 0x22
 3aa:	3b a1       	ldd	r19, Y+35	; 0x23
 3ac:	4c a1       	ldd	r20, Y+36	; 0x24
 3ae:	5d a1       	ldd	r21, Y+37	; 0x25
 3b0:	6e a1       	ldd	r22, Y+38	; 0x26
 3b2:	7f a1       	ldd	r23, Y+39	; 0x27
 3b4:	88 a5       	ldd	r24, Y+40	; 0x28
 3b6:	99 a5       	ldd	r25, Y+41	; 0x29
 3b8:	01 e0       	ldi	r16, 0x01	; 1
 3ba:	0e 94 a0 02 	call	0x540	; 0x540 <__lshrdi3>
 3be:	2a a3       	std	Y+34, r18	; 0x22
 3c0:	3b a3       	std	Y+35, r19	; 0x23
 3c2:	4c a3       	std	Y+36, r20	; 0x24
 3c4:	5d a3       	std	Y+37, r21	; 0x25
 3c6:	6e a3       	std	Y+38, r22	; 0x26
 3c8:	7f a3       	std	Y+39, r23	; 0x27
 3ca:	88 a7       	std	Y+40, r24	; 0x28
 3cc:	99 a7       	std	Y+41, r25	; 0x29
			P |= 0x0004000000000000;
 3ce:	7a a1       	ldd	r23, Y+34	; 0x22
 3d0:	6b a1       	ldd	r22, Y+35	; 0x23
 3d2:	5c a1       	ldd	r21, Y+36	; 0x24
 3d4:	4d a1       	ldd	r20, Y+37	; 0x25
 3d6:	3e a1       	ldd	r19, Y+38	; 0x26
 3d8:	2f a1       	ldd	r18, Y+39	; 0x27
 3da:	88 a5       	ldd	r24, Y+40	; 0x28
 3dc:	99 a5       	ldd	r25, Y+41	; 0x29
 3de:	84 60       	ori	r24, 0x04	; 4
 3e0:	7a a3       	std	Y+34, r23	; 0x22
 3e2:	6b a3       	std	Y+35, r22	; 0x23
 3e4:	5c a3       	std	Y+36, r21	; 0x24
 3e6:	4d a3       	std	Y+37, r20	; 0x25
 3e8:	3e a3       	std	Y+38, r19	; 0x26
 3ea:	2f a3       	std	Y+39, r18	; 0x27
 3ec:	88 a7       	std	Y+40, r24	; 0x28
 3ee:	99 a7       	std	Y+41, r25	; 0x29
 3f0:	13 c0       	rjmp	.+38     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		}
		// Shift positive number
		else
			P = P >> 1;
 3f2:	2a a1       	ldd	r18, Y+34	; 0x22
 3f4:	3b a1       	ldd	r19, Y+35	; 0x23
 3f6:	4c a1       	ldd	r20, Y+36	; 0x24
 3f8:	5d a1       	ldd	r21, Y+37	; 0x25
 3fa:	6e a1       	ldd	r22, Y+38	; 0x26
 3fc:	7f a1       	ldd	r23, Y+39	; 0x27
 3fe:	88 a5       	ldd	r24, Y+40	; 0x28
 400:	99 a5       	ldd	r25, Y+41	; 0x29
 402:	01 e0       	ldi	r16, 0x01	; 1
 404:	0e 94 a0 02 	call	0x540	; 0x540 <__lshrdi3>
 408:	2a a3       	std	Y+34, r18	; 0x22
 40a:	3b a3       	std	Y+35, r19	; 0x23
 40c:	4c a3       	std	Y+36, r20	; 0x24
 40e:	5d a3       	std	Y+37, r21	; 0x25
 410:	6e a3       	std	Y+38, r22	; 0x26
 412:	7f a3       	std	Y+39, r23	; 0x27
 414:	88 a7       	std	Y+40, r24	; 0x28
 416:	99 a7       	std	Y+41, r25	; 0x29
	S &= 0x0007FFFFFFFFFFFF;
	
	// Fill register P with r
	P = mant1 << 1;
	
	for(i = 0; i < 25; i++)
 418:	89 89       	ldd	r24, Y+17	; 0x11
 41a:	8f 5f       	subi	r24, 0xFF	; 255
 41c:	89 8b       	std	Y+17, r24	; 0x11
 41e:	89 89       	ldd	r24, Y+17	; 0x11
 420:	89 31       	cpi	r24, 0x19	; 25
 422:	08 f4       	brcc	.+2      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 424:	41 cf       	rjmp	.-382    	; 0x2a8 <float_mult+0x202>
		}
		// Shift positive number
		else
			P = P >> 1;
	}
	P = P >> 1;		// One last shift to complete the Booth algorithm
 426:	2a a1       	ldd	r18, Y+34	; 0x22
 428:	3b a1       	ldd	r19, Y+35	; 0x23
 42a:	4c a1       	ldd	r20, Y+36	; 0x24
 42c:	5d a1       	ldd	r21, Y+37	; 0x25
 42e:	6e a1       	ldd	r22, Y+38	; 0x26
 430:	7f a1       	ldd	r23, Y+39	; 0x27
 432:	88 a5       	ldd	r24, Y+40	; 0x28
 434:	99 a5       	ldd	r25, Y+41	; 0x29
 436:	01 e0       	ldi	r16, 0x01	; 1
 438:	0e 94 a0 02 	call	0x540	; 0x540 <__lshrdi3>
 43c:	2a a3       	std	Y+34, r18	; 0x22
 43e:	3b a3       	std	Y+35, r19	; 0x23
 440:	4c a3       	std	Y+36, r20	; 0x24
 442:	5d a3       	std	Y+37, r21	; 0x25
 444:	6e a3       	std	Y+38, r22	; 0x26
 446:	7f a3       	std	Y+39, r23	; 0x27
 448:	88 a7       	std	Y+40, r24	; 0x28
 44a:	99 a7       	std	Y+41, r25	; 0x29
	
	// Normalize the result
	while(P >= 0x0000000001000000)
 44c:	2a a1       	ldd	r18, Y+34	; 0x22
 44e:	3b a1       	ldd	r19, Y+35	; 0x23
 450:	4c a1       	ldd	r20, Y+36	; 0x24
 452:	5d a1       	ldd	r21, Y+37	; 0x25
 454:	6e a1       	ldd	r22, Y+38	; 0x26
 456:	7f a1       	ldd	r23, Y+39	; 0x27
 458:	88 a5       	ldd	r24, Y+40	; 0x28
 45a:	99 a5       	ldd	r25, Y+41	; 0x29
 45c:	2f 3f       	cpi	r18, 0xFF	; 255
 45e:	3f 4f       	sbci	r19, 0xFF	; 255
 460:	4f 4f       	sbci	r20, 0xFF	; 255
 462:	51 05       	cpc	r21, r1
 464:	61 05       	cpc	r22, r1
 466:	71 05       	cpc	r23, r1
 468:	81 05       	cpc	r24, r1
 46a:	91 05       	cpc	r25, r1
 46c:	31 f1       	breq	.+76     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 46e:	28 f1       	brcs	.+74     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
	{
		P = P >> 1;
 470:	2a a1       	ldd	r18, Y+34	; 0x22
 472:	3b a1       	ldd	r19, Y+35	; 0x23
 474:	4c a1       	ldd	r20, Y+36	; 0x24
 476:	5d a1       	ldd	r21, Y+37	; 0x25
 478:	6e a1       	ldd	r22, Y+38	; 0x26
 47a:	7f a1       	ldd	r23, Y+39	; 0x27
 47c:	88 a5       	ldd	r24, Y+40	; 0x28
 47e:	99 a5       	ldd	r25, Y+41	; 0x29
 480:	01 e0       	ldi	r16, 0x01	; 1
 482:	0e 94 a0 02 	call	0x540	; 0x540 <__lshrdi3>
 486:	2a a3       	std	Y+34, r18	; 0x22
 488:	3b a3       	std	Y+35, r19	; 0x23
 48a:	4c a3       	std	Y+36, r20	; 0x24
 48c:	5d a3       	std	Y+37, r21	; 0x25
 48e:	6e a3       	std	Y+38, r22	; 0x26
 490:	7f a3       	std	Y+39, r23	; 0x27
 492:	88 a7       	std	Y+40, r24	; 0x28
 494:	99 a7       	std	Y+41, r25	; 0x29
			P = P >> 1;
	}
	P = P >> 1;		// One last shift to complete the Booth algorithm
	
	// Normalize the result
	while(P >= 0x0000000001000000)
 496:	2a a1       	ldd	r18, Y+34	; 0x22
 498:	3b a1       	ldd	r19, Y+35	; 0x23
 49a:	4c a1       	ldd	r20, Y+36	; 0x24
 49c:	5d a1       	ldd	r21, Y+37	; 0x25
 49e:	6e a1       	ldd	r22, Y+38	; 0x26
 4a0:	7f a1       	ldd	r23, Y+39	; 0x27
 4a2:	88 a5       	ldd	r24, Y+40	; 0x28
 4a4:	99 a5       	ldd	r25, Y+41	; 0x29
 4a6:	2f 3f       	cpi	r18, 0xFF	; 255
 4a8:	3f 4f       	sbci	r19, 0xFF	; 255
 4aa:	4f 4f       	sbci	r20, 0xFF	; 255
 4ac:	51 05       	cpc	r21, r1
 4ae:	61 05       	cpc	r22, r1
 4b0:	71 05       	cpc	r23, r1
 4b2:	81 05       	cpc	r24, r1
 4b4:	91 05       	cpc	r25, r1
 4b6:	09 f0       	breq	.+2      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4b8:	d8 f6       	brcc	.-74     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
	{
		P = P >> 1;
		//exp += 1;
	}
	return final;
 4ba:	6d 85       	ldd	r22, Y+13	; 0x0d
 4bc:	7e 85       	ldd	r23, Y+14	; 0x0e
 4be:	8f 85       	ldd	r24, Y+15	; 0x0f
 4c0:	98 89       	ldd	r25, Y+16	; 0x10
 4c2:	e1 96       	adiw	r28, 0x31	; 49
 4c4:	0f b6       	in	r0, 0x3f	; 63
 4c6:	f8 94       	cli
 4c8:	de bf       	out	0x3e, r29	; 62
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	cd bf       	out	0x3d, r28	; 61
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	1f 91       	pop	r17
 4d4:	0f 91       	pop	r16
 4d6:	ff 90       	pop	r15
 4d8:	ef 90       	pop	r14
 4da:	df 90       	pop	r13
 4dc:	cf 90       	pop	r12
 4de:	bf 90       	pop	r11
 4e0:	af 90       	pop	r10
 4e2:	08 95       	ret

000004e4 <main>:
uint32_t float_add(volatile uint32_t a, volatile uint32_t b);
uint32_t float_mult(volatile uint32_t a, volatile uint32_t b);

int main(void)
{
    float_mult(num0, num1);
 4e4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 4e8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 4ec:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_start+0x2>
 4f0:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_start+0x3>
 4f4:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <num0>
 4f8:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <num0+0x1>
 4fc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <num0+0x2>
 500:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <num0+0x3>
 504:	0e 94 53 00 	call	0xa6	; 0xa6 <float_mult>
 508:	ff cf       	rjmp	.-2      	; 0x508 <main+0x24>

0000050a <__ashldi3>:
 50a:	0f 93       	push	r16
 50c:	08 30       	cpi	r16, 0x08	; 8
 50e:	90 f0       	brcs	.+36     	; 0x534 <__ashldi3+0x2a>
 510:	98 2f       	mov	r25, r24
 512:	87 2f       	mov	r24, r23
 514:	76 2f       	mov	r23, r22
 516:	65 2f       	mov	r22, r21
 518:	54 2f       	mov	r21, r20
 51a:	43 2f       	mov	r20, r19
 51c:	32 2f       	mov	r19, r18
 51e:	22 27       	eor	r18, r18
 520:	08 50       	subi	r16, 0x08	; 8
 522:	f4 cf       	rjmp	.-24     	; 0x50c <__ashldi3+0x2>
 524:	22 0f       	add	r18, r18
 526:	33 1f       	adc	r19, r19
 528:	44 1f       	adc	r20, r20
 52a:	55 1f       	adc	r21, r21
 52c:	66 1f       	adc	r22, r22
 52e:	77 1f       	adc	r23, r23
 530:	88 1f       	adc	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	0a 95       	dec	r16
 536:	b2 f7       	brpl	.-20     	; 0x524 <__ashldi3+0x1a>
 538:	0f 91       	pop	r16
 53a:	08 95       	ret

0000053c <__ashrdi3>:
 53c:	97 fb       	bst	r25, 7
 53e:	10 f8       	bld	r1, 0

00000540 <__lshrdi3>:
 540:	16 94       	lsr	r1
 542:	00 08       	sbc	r0, r0
 544:	0f 93       	push	r16
 546:	08 30       	cpi	r16, 0x08	; 8
 548:	98 f0       	brcs	.+38     	; 0x570 <__lshrdi3+0x30>
 54a:	08 50       	subi	r16, 0x08	; 8
 54c:	23 2f       	mov	r18, r19
 54e:	34 2f       	mov	r19, r20
 550:	45 2f       	mov	r20, r21
 552:	56 2f       	mov	r21, r22
 554:	67 2f       	mov	r22, r23
 556:	78 2f       	mov	r23, r24
 558:	89 2f       	mov	r24, r25
 55a:	90 2d       	mov	r25, r0
 55c:	f4 cf       	rjmp	.-24     	; 0x546 <__lshrdi3+0x6>
 55e:	05 94       	asr	r0
 560:	97 95       	ror	r25
 562:	87 95       	ror	r24
 564:	77 95       	ror	r23
 566:	67 95       	ror	r22
 568:	57 95       	ror	r21
 56a:	47 95       	ror	r20
 56c:	37 95       	ror	r19
 56e:	27 95       	ror	r18
 570:	0a 95       	dec	r16
 572:	aa f7       	brpl	.-22     	; 0x55e <__lshrdi3+0x1e>
 574:	0f 91       	pop	r16
 576:	08 95       	ret

00000578 <__adddi3>:
 578:	2a 0d       	add	r18, r10
 57a:	3b 1d       	adc	r19, r11
 57c:	4c 1d       	adc	r20, r12
 57e:	5d 1d       	adc	r21, r13
 580:	6e 1d       	adc	r22, r14
 582:	7f 1d       	adc	r23, r15
 584:	80 1f       	adc	r24, r16
 586:	91 1f       	adc	r25, r17
 588:	08 95       	ret

0000058a <__cmpdi2_s8>:
 58a:	00 24       	eor	r0, r0
 58c:	a7 fd       	sbrc	r26, 7
 58e:	00 94       	com	r0
 590:	2a 17       	cp	r18, r26
 592:	30 05       	cpc	r19, r0
 594:	40 05       	cpc	r20, r0
 596:	50 05       	cpc	r21, r0
 598:	60 05       	cpc	r22, r0
 59a:	70 05       	cpc	r23, r0
 59c:	80 05       	cpc	r24, r0
 59e:	90 05       	cpc	r25, r0
 5a0:	08 95       	ret

000005a2 <_exit>:
 5a2:	f8 94       	cli

000005a4 <__stop_program>:
 5a4:	ff cf       	rjmp	.-2      	; 0x5a4 <__stop_program>
