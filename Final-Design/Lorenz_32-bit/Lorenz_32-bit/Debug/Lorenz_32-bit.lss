
Lorenz_32-bit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000004d6  0000054a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000552  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000584  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000078e  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000666  00000000  00000000  00000d76  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fe  00000000  00000000  000013dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000016dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039e  00000000  00000000  00001720  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012f  00000000  00000000  00001abe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001bed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ed       	ldi	r30, 0xD6	; 214
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 56 02 	call	0x4ac	; 0x4ac <main>
  9e:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <float_add>:
    {
    }
}

uint32_t float_add(volatile uint32_t a, volatile uint32_t b)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	a0 97       	sbiw	r28, 0x20	; 32
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
  ba:	69 8f       	std	Y+25, r22	; 0x19
  bc:	7a 8f       	std	Y+26, r23	; 0x1a
  be:	8b 8f       	std	Y+27, r24	; 0x1b
  c0:	9c 8f       	std	Y+28, r25	; 0x1c
  c2:	2d 8f       	std	Y+29, r18	; 0x1d
  c4:	3e 8f       	std	Y+30, r19	; 0x1e
  c6:	4f 8f       	std	Y+31, r20	; 0x1f
  c8:	58 a3       	std	Y+32, r21	; 0x20
	// Operand a
	volatile uint8_t exp0 = a >> 23;							// Extract the exponent field of a
  ca:	89 8d       	ldd	r24, Y+25	; 0x19
  cc:	9a 8d       	ldd	r25, Y+26	; 0x1a
  ce:	ab 8d       	ldd	r26, Y+27	; 0x1b
  d0:	bc 8d       	ldd	r27, Y+28	; 0x1c
  d2:	07 2e       	mov	r0, r23
  d4:	77 e1       	ldi	r23, 0x17	; 23
  d6:	b6 95       	lsr	r27
  d8:	a7 95       	ror	r26
  da:	97 95       	ror	r25
  dc:	87 95       	ror	r24
  de:	7a 95       	dec	r23
  e0:	d1 f7       	brne	.-12     	; 0xd6 <float_add+0x30>
  e2:	70 2d       	mov	r23, r0
  e4:	89 83       	std	Y+1, r24	; 0x01
	volatile uint32_t mant0 = (a & 0x007FFFFF) | 0x00800000;	// Extract the mantissa field of a
  e6:	89 8d       	ldd	r24, Y+25	; 0x19
  e8:	9a 8d       	ldd	r25, Y+26	; 0x1a
  ea:	ab 8d       	ldd	r26, Y+27	; 0x1b
  ec:	bc 8d       	ldd	r27, Y+28	; 0x1c
  ee:	af 77       	andi	r26, 0x7F	; 127
  f0:	bb 27       	eor	r27, r27
  f2:	a0 68       	ori	r26, 0x80	; 128
  f4:	8a 83       	std	Y+2, r24	; 0x02
  f6:	9b 83       	std	Y+3, r25	; 0x03
  f8:	ac 83       	std	Y+4, r26	; 0x04
  fa:	bd 83       	std	Y+5, r27	; 0x05
	
	// Operand b
	volatile uint8_t exp1 = b >> 23;							// Extract the exponent field of b
  fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
  fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
 100:	af 8d       	ldd	r26, Y+31	; 0x1f
 102:	b8 a1       	ldd	r27, Y+32	; 0x20
 104:	07 2e       	mov	r0, r23
 106:	77 e1       	ldi	r23, 0x17	; 23
 108:	b6 95       	lsr	r27
 10a:	a7 95       	ror	r26
 10c:	97 95       	ror	r25
 10e:	87 95       	ror	r24
 110:	7a 95       	dec	r23
 112:	d1 f7       	brne	.-12     	; 0x108 <float_add+0x62>
 114:	70 2d       	mov	r23, r0
 116:	8e 83       	std	Y+6, r24	; 0x06
	volatile uint32_t mant1 = (b & 0x007FFFFF) | 0x00800000;	// Extract the mantissa field of b
 118:	8d 8d       	ldd	r24, Y+29	; 0x1d
 11a:	9e 8d       	ldd	r25, Y+30	; 0x1e
 11c:	af 8d       	ldd	r26, Y+31	; 0x1f
 11e:	b8 a1       	ldd	r27, Y+32	; 0x20
 120:	af 77       	andi	r26, 0x7F	; 127
 122:	bb 27       	eor	r27, r27
 124:	a0 68       	ori	r26, 0x80	; 128
 126:	8f 83       	std	Y+7, r24	; 0x07
 128:	98 87       	std	Y+8, r25	; 0x08
 12a:	a9 87       	std	Y+9, r26	; 0x09
 12c:	ba 87       	std	Y+10, r27	; 0x0a
	
	// Temporary variables
	volatile uint32_t temp;
	
	// Adjust and compute the exponent
	if(exp0 > exp1)						// exp(a) > exp(b)
 12e:	99 81       	ldd	r25, Y+1	; 0x01
 130:	8e 81       	ldd	r24, Y+6	; 0x06
 132:	89 17       	cp	r24, r25
 134:	28 f5       	brcc	.+74     	; 0x180 <float_add+0xda>
	{
		temp = exp0 - exp1;				// shift amount = exp(a) - exp(b)
 136:	89 81       	ldd	r24, Y+1	; 0x01
 138:	2e 81       	ldd	r18, Y+6	; 0x06
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	82 1b       	sub	r24, r18
 13e:	91 09       	sbc	r25, r1
 140:	09 2e       	mov	r0, r25
 142:	00 0c       	add	r0, r0
 144:	aa 0b       	sbc	r26, r26
 146:	bb 0b       	sbc	r27, r27
 148:	8d 8b       	std	Y+21, r24	; 0x15
 14a:	9e 8b       	std	Y+22, r25	; 0x16
 14c:	af 8b       	std	Y+23, r26	; 0x17
 14e:	b8 8f       	std	Y+24, r27	; 0x18
		exp = exp0;
 150:	89 81       	ldd	r24, Y+1	; 0x01
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	9c 87       	std	Y+12, r25	; 0x0c
 156:	8b 87       	std	Y+11, r24	; 0x0b
		mant1 = mant1 >> temp;			// Adjust B
 158:	8f 81       	ldd	r24, Y+7	; 0x07
 15a:	98 85       	ldd	r25, Y+8	; 0x08
 15c:	a9 85       	ldd	r26, Y+9	; 0x09
 15e:	ba 85       	ldd	r27, Y+10	; 0x0a
 160:	4d 89       	ldd	r20, Y+21	; 0x15
 162:	5e 89       	ldd	r21, Y+22	; 0x16
 164:	6f 89       	ldd	r22, Y+23	; 0x17
 166:	78 8d       	ldd	r23, Y+24	; 0x18
 168:	04 c0       	rjmp	.+8      	; 0x172 <float_add+0xcc>
 16a:	b6 95       	lsr	r27
 16c:	a7 95       	ror	r26
 16e:	97 95       	ror	r25
 170:	87 95       	ror	r24
 172:	4a 95       	dec	r20
 174:	d2 f7       	brpl	.-12     	; 0x16a <float_add+0xc4>
 176:	8f 83       	std	Y+7, r24	; 0x07
 178:	98 87       	std	Y+8, r25	; 0x08
 17a:	a9 87       	std	Y+9, r26	; 0x09
 17c:	ba 87       	std	Y+10, r27	; 0x0a
 17e:	2d c0       	rjmp	.+90     	; 0x1da <float_add+0x134>
	}
	else if(exp1 > exp0)				// b > a
 180:	9e 81       	ldd	r25, Y+6	; 0x06
 182:	89 81       	ldd	r24, Y+1	; 0x01
 184:	89 17       	cp	r24, r25
 186:	28 f5       	brcc	.+74     	; 0x1d2 <float_add+0x12c>
	{
		temp = exp1 - exp0;				// shift amount = exp(b) - exp(a)
 188:	8e 81       	ldd	r24, Y+6	; 0x06
 18a:	29 81       	ldd	r18, Y+1	; 0x01
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	82 1b       	sub	r24, r18
 190:	91 09       	sbc	r25, r1
 192:	09 2e       	mov	r0, r25
 194:	00 0c       	add	r0, r0
 196:	aa 0b       	sbc	r26, r26
 198:	bb 0b       	sbc	r27, r27
 19a:	8d 8b       	std	Y+21, r24	; 0x15
 19c:	9e 8b       	std	Y+22, r25	; 0x16
 19e:	af 8b       	std	Y+23, r26	; 0x17
 1a0:	b8 8f       	std	Y+24, r27	; 0x18
		exp = exp1;
 1a2:	8e 81       	ldd	r24, Y+6	; 0x06
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	9c 87       	std	Y+12, r25	; 0x0c
 1a8:	8b 87       	std	Y+11, r24	; 0x0b
		mant0 = mant0 >> temp;			// Adjust A
 1aa:	8a 81       	ldd	r24, Y+2	; 0x02
 1ac:	9b 81       	ldd	r25, Y+3	; 0x03
 1ae:	ac 81       	ldd	r26, Y+4	; 0x04
 1b0:	bd 81       	ldd	r27, Y+5	; 0x05
 1b2:	4d 89       	ldd	r20, Y+21	; 0x15
 1b4:	5e 89       	ldd	r21, Y+22	; 0x16
 1b6:	6f 89       	ldd	r22, Y+23	; 0x17
 1b8:	78 8d       	ldd	r23, Y+24	; 0x18
 1ba:	04 c0       	rjmp	.+8      	; 0x1c4 <float_add+0x11e>
 1bc:	b6 95       	lsr	r27
 1be:	a7 95       	ror	r26
 1c0:	97 95       	ror	r25
 1c2:	87 95       	ror	r24
 1c4:	4a 95       	dec	r20
 1c6:	d2 f7       	brpl	.-12     	; 0x1bc <float_add+0x116>
 1c8:	8a 83       	std	Y+2, r24	; 0x02
 1ca:	9b 83       	std	Y+3, r25	; 0x03
 1cc:	ac 83       	std	Y+4, r26	; 0x04
 1ce:	bd 83       	std	Y+5, r27	; 0x05
 1d0:	04 c0       	rjmp	.+8      	; 0x1da <float_add+0x134>
	}
	else
	{
		exp = exp0;						// Equal exponents
 1d2:	89 81       	ldd	r24, Y+1	; 0x01
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	9c 87       	std	Y+12, r25	; 0x0c
 1d8:	8b 87       	std	Y+11, r24	; 0x0b
	}
	
	// Same signs [a + b] or [(-a) + (-b)]
	if((a & 0x80000000) == (b & 0x80000000))
 1da:	49 8d       	ldd	r20, Y+25	; 0x19
 1dc:	5a 8d       	ldd	r21, Y+26	; 0x1a
 1de:	6b 8d       	ldd	r22, Y+27	; 0x1b
 1e0:	7c 8d       	ldd	r23, Y+28	; 0x1c
 1e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
 1e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
 1e6:	af 8d       	ldd	r26, Y+31	; 0x1f
 1e8:	b8 a1       	ldd	r27, Y+32	; 0x20
 1ea:	84 27       	eor	r24, r20
 1ec:	95 27       	eor	r25, r21
 1ee:	a6 27       	eor	r26, r22
 1f0:	b7 27       	eor	r27, r23
 1f2:	bb 23       	and	r27, r27
 1f4:	0c f4       	brge	.+2      	; 0x1f8 <float_add+0x152>
 1f6:	3f c0       	rjmp	.+126    	; 0x276 <float_add+0x1d0>
	{
		final |= (a & 0x80000000);		// Set sign
 1f8:	89 8d       	ldd	r24, Y+25	; 0x19
 1fa:	9a 8d       	ldd	r25, Y+26	; 0x1a
 1fc:	ab 8d       	ldd	r26, Y+27	; 0x1b
 1fe:	bc 8d       	ldd	r27, Y+28	; 0x1c
 200:	4d 85       	ldd	r20, Y+13	; 0x0d
 202:	5e 85       	ldd	r21, Y+14	; 0x0e
 204:	6f 85       	ldd	r22, Y+15	; 0x0f
 206:	78 89       	ldd	r23, Y+16	; 0x10
 208:	88 27       	eor	r24, r24
 20a:	99 27       	eor	r25, r25
 20c:	aa 27       	eor	r26, r26
 20e:	b0 78       	andi	r27, 0x80	; 128
 210:	84 2b       	or	r24, r20
 212:	95 2b       	or	r25, r21
 214:	a6 2b       	or	r26, r22
 216:	b7 2b       	or	r27, r23
 218:	8d 87       	std	Y+13, r24	; 0x0d
 21a:	9e 87       	std	Y+14, r25	; 0x0e
 21c:	af 87       	std	Y+15, r26	; 0x0f
 21e:	b8 8b       	std	Y+16, r27	; 0x10
		mant = mant0 + mant1;			// Add the two mantissas
 220:	4a 81       	ldd	r20, Y+2	; 0x02
 222:	5b 81       	ldd	r21, Y+3	; 0x03
 224:	6c 81       	ldd	r22, Y+4	; 0x04
 226:	7d 81       	ldd	r23, Y+5	; 0x05
 228:	8f 81       	ldd	r24, Y+7	; 0x07
 22a:	98 85       	ldd	r25, Y+8	; 0x08
 22c:	a9 85       	ldd	r26, Y+9	; 0x09
 22e:	ba 85       	ldd	r27, Y+10	; 0x0a
 230:	84 0f       	add	r24, r20
 232:	95 1f       	adc	r25, r21
 234:	a6 1f       	adc	r26, r22
 236:	b7 1f       	adc	r27, r23
 238:	89 8b       	std	Y+17, r24	; 0x11
 23a:	9a 8b       	std	Y+18, r25	; 0x12
 23c:	ab 8b       	std	Y+19, r26	; 0x13
 23e:	bc 8b       	std	Y+20, r27	; 0x14
		
		// Normalize the mantissa
		if(mant > 0x00FFFFFF)
 240:	89 89       	ldd	r24, Y+17	; 0x11
 242:	9a 89       	ldd	r25, Y+18	; 0x12
 244:	ab 89       	ldd	r26, Y+19	; 0x13
 246:	bc 89       	ldd	r27, Y+20	; 0x14
 248:	00 97       	sbiw	r24, 0x00	; 0
 24a:	a1 05       	cpc	r26, r1
 24c:	b1 40       	sbci	r27, 0x01	; 1
 24e:	08 f4       	brcc	.+2      	; 0x252 <float_add+0x1ac>
 250:	b0 c0       	rjmp	.+352    	; 0x3b2 <float_add+0x30c>
		{
			mant = mant >> 1;			// Shift mantissa to adjust the floating point
 252:	89 89       	ldd	r24, Y+17	; 0x11
 254:	9a 89       	ldd	r25, Y+18	; 0x12
 256:	ab 89       	ldd	r26, Y+19	; 0x13
 258:	bc 89       	ldd	r27, Y+20	; 0x14
 25a:	b6 95       	lsr	r27
 25c:	a7 95       	ror	r26
 25e:	97 95       	ror	r25
 260:	87 95       	ror	r24
 262:	89 8b       	std	Y+17, r24	; 0x11
 264:	9a 8b       	std	Y+18, r25	; 0x12
 266:	ab 8b       	std	Y+19, r26	; 0x13
 268:	bc 8b       	std	Y+20, r27	; 0x14
			exp += 1;					// Increment the exponent
 26a:	8b 85       	ldd	r24, Y+11	; 0x0b
 26c:	9c 85       	ldd	r25, Y+12	; 0x0c
 26e:	01 96       	adiw	r24, 0x01	; 1
 270:	9c 87       	std	Y+12, r25	; 0x0c
 272:	8b 87       	std	Y+11, r24	; 0x0b
 274:	9e c0       	rjmp	.+316    	; 0x3b2 <float_add+0x30c>
	}
	// Different signs
	else
	{
		// [a - b]
		if((b & 0x80000000) == 0x80000000)
 276:	8d 8d       	ldd	r24, Y+29	; 0x1d
 278:	9e 8d       	ldd	r25, Y+30	; 0x1e
 27a:	af 8d       	ldd	r26, Y+31	; 0x1f
 27c:	b8 a1       	ldd	r27, Y+32	; 0x20
 27e:	bb 23       	and	r27, r27
 280:	44 f5       	brge	.+80     	; 0x2d2 <float_add+0x22c>
		{
			// Two's complement
			mant1 = ~mant1;
 282:	8f 81       	ldd	r24, Y+7	; 0x07
 284:	98 85       	ldd	r25, Y+8	; 0x08
 286:	a9 85       	ldd	r26, Y+9	; 0x09
 288:	ba 85       	ldd	r27, Y+10	; 0x0a
 28a:	80 95       	com	r24
 28c:	90 95       	com	r25
 28e:	a0 95       	com	r26
 290:	b0 95       	com	r27
 292:	8f 83       	std	Y+7, r24	; 0x07
 294:	98 87       	std	Y+8, r25	; 0x08
 296:	a9 87       	std	Y+9, r26	; 0x09
 298:	ba 87       	std	Y+10, r27	; 0x0a
			mant1 += 1;
 29a:	8f 81       	ldd	r24, Y+7	; 0x07
 29c:	98 85       	ldd	r25, Y+8	; 0x08
 29e:	a9 85       	ldd	r26, Y+9	; 0x09
 2a0:	ba 85       	ldd	r27, Y+10	; 0x0a
 2a2:	01 96       	adiw	r24, 0x01	; 1
 2a4:	a1 1d       	adc	r26, r1
 2a6:	b1 1d       	adc	r27, r1
 2a8:	8f 83       	std	Y+7, r24	; 0x07
 2aa:	98 87       	std	Y+8, r25	; 0x08
 2ac:	a9 87       	std	Y+9, r26	; 0x09
 2ae:	ba 87       	std	Y+10, r27	; 0x0a
			// Perform the subtraction
			mant = mant0 + mant1;
 2b0:	4a 81       	ldd	r20, Y+2	; 0x02
 2b2:	5b 81       	ldd	r21, Y+3	; 0x03
 2b4:	6c 81       	ldd	r22, Y+4	; 0x04
 2b6:	7d 81       	ldd	r23, Y+5	; 0x05
 2b8:	8f 81       	ldd	r24, Y+7	; 0x07
 2ba:	98 85       	ldd	r25, Y+8	; 0x08
 2bc:	a9 85       	ldd	r26, Y+9	; 0x09
 2be:	ba 85       	ldd	r27, Y+10	; 0x0a
 2c0:	84 0f       	add	r24, r20
 2c2:	95 1f       	adc	r25, r21
 2c4:	a6 1f       	adc	r26, r22
 2c6:	b7 1f       	adc	r27, r23
 2c8:	89 8b       	std	Y+17, r24	; 0x11
 2ca:	9a 8b       	std	Y+18, r25	; 0x12
 2cc:	ab 8b       	std	Y+19, r26	; 0x13
 2ce:	bc 8b       	std	Y+20, r27	; 0x14
 2d0:	27 c0       	rjmp	.+78     	; 0x320 <float_add+0x27a>
		}
		// [b - a]
		else
		{
			// Two's complement
			mant0 = ~mant0;
 2d2:	8a 81       	ldd	r24, Y+2	; 0x02
 2d4:	9b 81       	ldd	r25, Y+3	; 0x03
 2d6:	ac 81       	ldd	r26, Y+4	; 0x04
 2d8:	bd 81       	ldd	r27, Y+5	; 0x05
 2da:	80 95       	com	r24
 2dc:	90 95       	com	r25
 2de:	a0 95       	com	r26
 2e0:	b0 95       	com	r27
 2e2:	8a 83       	std	Y+2, r24	; 0x02
 2e4:	9b 83       	std	Y+3, r25	; 0x03
 2e6:	ac 83       	std	Y+4, r26	; 0x04
 2e8:	bd 83       	std	Y+5, r27	; 0x05
			mant0 += 1;
 2ea:	8a 81       	ldd	r24, Y+2	; 0x02
 2ec:	9b 81       	ldd	r25, Y+3	; 0x03
 2ee:	ac 81       	ldd	r26, Y+4	; 0x04
 2f0:	bd 81       	ldd	r27, Y+5	; 0x05
 2f2:	01 96       	adiw	r24, 0x01	; 1
 2f4:	a1 1d       	adc	r26, r1
 2f6:	b1 1d       	adc	r27, r1
 2f8:	8a 83       	std	Y+2, r24	; 0x02
 2fa:	9b 83       	std	Y+3, r25	; 0x03
 2fc:	ac 83       	std	Y+4, r26	; 0x04
 2fe:	bd 83       	std	Y+5, r27	; 0x05
			// Perform the subtraction
			mant = mant0 + mant1;
 300:	4a 81       	ldd	r20, Y+2	; 0x02
 302:	5b 81       	ldd	r21, Y+3	; 0x03
 304:	6c 81       	ldd	r22, Y+4	; 0x04
 306:	7d 81       	ldd	r23, Y+5	; 0x05
 308:	8f 81       	ldd	r24, Y+7	; 0x07
 30a:	98 85       	ldd	r25, Y+8	; 0x08
 30c:	a9 85       	ldd	r26, Y+9	; 0x09
 30e:	ba 85       	ldd	r27, Y+10	; 0x0a
 310:	84 0f       	add	r24, r20
 312:	95 1f       	adc	r25, r21
 314:	a6 1f       	adc	r26, r22
 316:	b7 1f       	adc	r27, r23
 318:	89 8b       	std	Y+17, r24	; 0x11
 31a:	9a 8b       	std	Y+18, r25	; 0x12
 31c:	ab 8b       	std	Y+19, r26	; 0x13
 31e:	bc 8b       	std	Y+20, r27	; 0x14
		}
		
		// Check if the value is negative, if so, absolute value the mantissa and set sign bit to 1
		if(mant > 0x00FFFFFF)
 320:	89 89       	ldd	r24, Y+17	; 0x11
 322:	9a 89       	ldd	r25, Y+18	; 0x12
 324:	ab 89       	ldd	r26, Y+19	; 0x13
 326:	bc 89       	ldd	r27, Y+20	; 0x14
 328:	00 97       	sbiw	r24, 0x00	; 0
 32a:	a1 05       	cpc	r26, r1
 32c:	b1 40       	sbci	r27, 0x01	; 1
 32e:	00 f1       	brcs	.+64     	; 0x370 <float_add+0x2ca>
		{
			mant = ~mant;
 330:	89 89       	ldd	r24, Y+17	; 0x11
 332:	9a 89       	ldd	r25, Y+18	; 0x12
 334:	ab 89       	ldd	r26, Y+19	; 0x13
 336:	bc 89       	ldd	r27, Y+20	; 0x14
 338:	80 95       	com	r24
 33a:	90 95       	com	r25
 33c:	a0 95       	com	r26
 33e:	b0 95       	com	r27
 340:	89 8b       	std	Y+17, r24	; 0x11
 342:	9a 8b       	std	Y+18, r25	; 0x12
 344:	ab 8b       	std	Y+19, r26	; 0x13
 346:	bc 8b       	std	Y+20, r27	; 0x14
			mant += 1;
 348:	89 89       	ldd	r24, Y+17	; 0x11
 34a:	9a 89       	ldd	r25, Y+18	; 0x12
 34c:	ab 89       	ldd	r26, Y+19	; 0x13
 34e:	bc 89       	ldd	r27, Y+20	; 0x14
 350:	01 96       	adiw	r24, 0x01	; 1
 352:	a1 1d       	adc	r26, r1
 354:	b1 1d       	adc	r27, r1
 356:	89 8b       	std	Y+17, r24	; 0x11
 358:	9a 8b       	std	Y+18, r25	; 0x12
 35a:	ab 8b       	std	Y+19, r26	; 0x13
 35c:	bc 8b       	std	Y+20, r27	; 0x14
			// Set sign as negative
			final |= 0x80000000;
 35e:	8d 85       	ldd	r24, Y+13	; 0x0d
 360:	9e 85       	ldd	r25, Y+14	; 0x0e
 362:	af 85       	ldd	r26, Y+15	; 0x0f
 364:	b8 89       	ldd	r27, Y+16	; 0x10
 366:	b0 68       	ori	r27, 0x80	; 128
 368:	8d 87       	std	Y+13, r24	; 0x0d
 36a:	9e 87       	std	Y+14, r25	; 0x0e
 36c:	af 87       	std	Y+15, r26	; 0x0f
 36e:	b8 8b       	std	Y+16, r27	; 0x10
		}
		
		// Normalize the mantissa
		while(mant < 0x00800000)
 370:	89 89       	ldd	r24, Y+17	; 0x11
 372:	9a 89       	ldd	r25, Y+18	; 0x12
 374:	ab 89       	ldd	r26, Y+19	; 0x13
 376:	bc 89       	ldd	r27, Y+20	; 0x14
 378:	00 97       	sbiw	r24, 0x00	; 0
 37a:	a0 48       	sbci	r26, 0x80	; 128
 37c:	b1 05       	cpc	r27, r1
 37e:	c8 f4       	brcc	.+50     	; 0x3b2 <float_add+0x30c>
		{
			mant = mant << 1;
 380:	89 89       	ldd	r24, Y+17	; 0x11
 382:	9a 89       	ldd	r25, Y+18	; 0x12
 384:	ab 89       	ldd	r26, Y+19	; 0x13
 386:	bc 89       	ldd	r27, Y+20	; 0x14
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	aa 1f       	adc	r26, r26
 38e:	bb 1f       	adc	r27, r27
 390:	89 8b       	std	Y+17, r24	; 0x11
 392:	9a 8b       	std	Y+18, r25	; 0x12
 394:	ab 8b       	std	Y+19, r26	; 0x13
 396:	bc 8b       	std	Y+20, r27	; 0x14
			exp -= 1;
 398:	8b 85       	ldd	r24, Y+11	; 0x0b
 39a:	9c 85       	ldd	r25, Y+12	; 0x0c
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	9c 87       	std	Y+12, r25	; 0x0c
 3a0:	8b 87       	std	Y+11, r24	; 0x0b
			// Set sign as negative
			final |= 0x80000000;
		}
		
		// Normalize the mantissa
		while(mant < 0x00800000)
 3a2:	89 89       	ldd	r24, Y+17	; 0x11
 3a4:	9a 89       	ldd	r25, Y+18	; 0x12
 3a6:	ab 89       	ldd	r26, Y+19	; 0x13
 3a8:	bc 89       	ldd	r27, Y+20	; 0x14
 3aa:	00 97       	sbiw	r24, 0x00	; 0
 3ac:	a0 48       	sbci	r26, 0x80	; 128
 3ae:	b1 05       	cpc	r27, r1
 3b0:	38 f3       	brcs	.-50     	; 0x380 <float_add+0x2da>
		}
	}
	
	// Overflow case [Largest value]
	// Exponent cannot be larger than 254 [with bias of +127]
	if(exp > 254)
 3b2:	8b 85       	ldd	r24, Y+11	; 0x0b
 3b4:	9c 85       	ldd	r25, Y+12	; 0x0c
 3b6:	8f 3f       	cpi	r24, 0xFF	; 255
 3b8:	91 05       	cpc	r25, r1
 3ba:	8c f0       	brlt	.+34     	; 0x3de <float_add+0x338>
	{
		final |= 0x7FFFFFFF;
 3bc:	8d 85       	ldd	r24, Y+13	; 0x0d
 3be:	9e 85       	ldd	r25, Y+14	; 0x0e
 3c0:	af 85       	ldd	r26, Y+15	; 0x0f
 3c2:	b8 89       	ldd	r27, Y+16	; 0x10
 3c4:	8f 6f       	ori	r24, 0xFF	; 255
 3c6:	9f 6f       	ori	r25, 0xFF	; 255
 3c8:	af 6f       	ori	r26, 0xFF	; 255
 3ca:	bf 67       	ori	r27, 0x7F	; 127
 3cc:	8d 87       	std	Y+13, r24	; 0x0d
 3ce:	9e 87       	std	Y+14, r25	; 0x0e
 3d0:	af 87       	std	Y+15, r26	; 0x0f
 3d2:	b8 8b       	std	Y+16, r27	; 0x10
		return final;
 3d4:	6d 85       	ldd	r22, Y+13	; 0x0d
 3d6:	7e 85       	ldd	r23, Y+14	; 0x0e
 3d8:	8f 85       	ldd	r24, Y+15	; 0x0f
 3da:	98 89       	ldd	r25, Y+16	; 0x10
 3dc:	5e c0       	rjmp	.+188    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
	}
	// Underflow case [Smallest number]
	// Exponent cannot be smaller than 0 [with bias of +127]
	else if(exp < 0)
 3de:	8b 85       	ldd	r24, Y+11	; 0x0b
 3e0:	9c 85       	ldd	r25, Y+12	; 0x0c
 3e2:	99 23       	and	r25, r25
 3e4:	8c f4       	brge	.+34     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	{
		final &= 0x80000000;
 3e6:	8d 85       	ldd	r24, Y+13	; 0x0d
 3e8:	9e 85       	ldd	r25, Y+14	; 0x0e
 3ea:	af 85       	ldd	r26, Y+15	; 0x0f
 3ec:	b8 89       	ldd	r27, Y+16	; 0x10
 3ee:	88 27       	eor	r24, r24
 3f0:	99 27       	eor	r25, r25
 3f2:	aa 27       	eor	r26, r26
 3f4:	b0 78       	andi	r27, 0x80	; 128
 3f6:	8d 87       	std	Y+13, r24	; 0x0d
 3f8:	9e 87       	std	Y+14, r25	; 0x0e
 3fa:	af 87       	std	Y+15, r26	; 0x0f
 3fc:	b8 8b       	std	Y+16, r27	; 0x10
		return final;
 3fe:	6d 85       	ldd	r22, Y+13	; 0x0d
 400:	7e 85       	ldd	r23, Y+14	; 0x0e
 402:	8f 85       	ldd	r24, Y+15	; 0x0f
 404:	98 89       	ldd	r25, Y+16	; 0x10
 406:	49 c0       	rjmp	.+146    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
	}
	
	mant &= 0x007FFFFF;		// Remove implicit 1
 408:	89 89       	ldd	r24, Y+17	; 0x11
 40a:	9a 89       	ldd	r25, Y+18	; 0x12
 40c:	ab 89       	ldd	r26, Y+19	; 0x13
 40e:	bc 89       	ldd	r27, Y+20	; 0x14
 410:	af 77       	andi	r26, 0x7F	; 127
 412:	bb 27       	eor	r27, r27
 414:	89 8b       	std	Y+17, r24	; 0x11
 416:	9a 8b       	std	Y+18, r25	; 0x12
 418:	ab 8b       	std	Y+19, r26	; 0x13
 41a:	bc 8b       	std	Y+20, r27	; 0x14
	temp = exp;
 41c:	8b 85       	ldd	r24, Y+11	; 0x0b
 41e:	9c 85       	ldd	r25, Y+12	; 0x0c
 420:	09 2e       	mov	r0, r25
 422:	00 0c       	add	r0, r0
 424:	aa 0b       	sbc	r26, r26
 426:	bb 0b       	sbc	r27, r27
 428:	8d 8b       	std	Y+21, r24	; 0x15
 42a:	9e 8b       	std	Y+22, r25	; 0x16
 42c:	af 8b       	std	Y+23, r26	; 0x17
 42e:	b8 8f       	std	Y+24, r27	; 0x18
	temp = temp << 23;		// Shift the exponent into the correct exponent field
 430:	8d 89       	ldd	r24, Y+21	; 0x15
 432:	9e 89       	ldd	r25, Y+22	; 0x16
 434:	af 89       	ldd	r26, Y+23	; 0x17
 436:	b8 8d       	ldd	r27, Y+24	; 0x18
 438:	07 2e       	mov	r0, r23
 43a:	77 e1       	ldi	r23, 0x17	; 23
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	aa 1f       	adc	r26, r26
 442:	bb 1f       	adc	r27, r27
 444:	7a 95       	dec	r23
 446:	d1 f7       	brne	.-12     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 448:	70 2d       	mov	r23, r0
 44a:	8d 8b       	std	Y+21, r24	; 0x15
 44c:	9e 8b       	std	Y+22, r25	; 0x16
 44e:	af 8b       	std	Y+23, r26	; 0x17
 450:	b8 8f       	std	Y+24, r27	; 0x18
	final |= temp;			// Insert exponent into the final
 452:	4d 89       	ldd	r20, Y+21	; 0x15
 454:	5e 89       	ldd	r21, Y+22	; 0x16
 456:	6f 89       	ldd	r22, Y+23	; 0x17
 458:	78 8d       	ldd	r23, Y+24	; 0x18
 45a:	8d 85       	ldd	r24, Y+13	; 0x0d
 45c:	9e 85       	ldd	r25, Y+14	; 0x0e
 45e:	af 85       	ldd	r26, Y+15	; 0x0f
 460:	b8 89       	ldd	r27, Y+16	; 0x10
 462:	84 2b       	or	r24, r20
 464:	95 2b       	or	r25, r21
 466:	a6 2b       	or	r26, r22
 468:	b7 2b       	or	r27, r23
 46a:	8d 87       	std	Y+13, r24	; 0x0d
 46c:	9e 87       	std	Y+14, r25	; 0x0e
 46e:	af 87       	std	Y+15, r26	; 0x0f
 470:	b8 8b       	std	Y+16, r27	; 0x10
	final |= mant;			// Insert mantissa into the final
 472:	49 89       	ldd	r20, Y+17	; 0x11
 474:	5a 89       	ldd	r21, Y+18	; 0x12
 476:	6b 89       	ldd	r22, Y+19	; 0x13
 478:	7c 89       	ldd	r23, Y+20	; 0x14
 47a:	8d 85       	ldd	r24, Y+13	; 0x0d
 47c:	9e 85       	ldd	r25, Y+14	; 0x0e
 47e:	af 85       	ldd	r26, Y+15	; 0x0f
 480:	b8 89       	ldd	r27, Y+16	; 0x10
 482:	84 2b       	or	r24, r20
 484:	95 2b       	or	r25, r21
 486:	a6 2b       	or	r26, r22
 488:	b7 2b       	or	r27, r23
 48a:	8d 87       	std	Y+13, r24	; 0x0d
 48c:	9e 87       	std	Y+14, r25	; 0x0e
 48e:	af 87       	std	Y+15, r26	; 0x0f
 490:	b8 8b       	std	Y+16, r27	; 0x10
	
	return final;
 492:	6d 85       	ldd	r22, Y+13	; 0x0d
 494:	7e 85       	ldd	r23, Y+14	; 0x0e
 496:	8f 85       	ldd	r24, Y+15	; 0x0f
 498:	98 89       	ldd	r25, Y+16	; 0x10
 49a:	a0 96       	adiw	r28, 0x20	; 32
 49c:	0f b6       	in	r0, 0x3f	; 63
 49e:	f8 94       	cli
 4a0:	de bf       	out	0x3e, r29	; 62
 4a2:	0f be       	out	0x3f, r0	; 63
 4a4:	cd bf       	out	0x3d, r28	; 61
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	08 95       	ret

000004ac <main>:
uint32_t float_add(volatile uint32_t a, volatile uint32_t b);
uint32_t float_mult(volatile uint32_t a, volatile uint32_t b);

int main(void)
{
    float_add(num0, num1);
 4ac:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 4b0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 4b4:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_start+0x2>
 4b8:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_start+0x3>
 4bc:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <num0>
 4c0:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <num0+0x1>
 4c4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <num0+0x2>
 4c8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <num0+0x3>
 4cc:	0e 94 53 00 	call	0xa6	; 0xa6 <float_add>
 4d0:	ff cf       	rjmp	.-2      	; 0x4d0 <main+0x24>

000004d2 <_exit>:
 4d2:	f8 94       	cli

000004d4 <__stop_program>:
 4d4:	ff cf       	rjmp	.-2      	; 0x4d4 <__stop_program>
