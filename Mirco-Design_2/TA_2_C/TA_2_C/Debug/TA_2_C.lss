
TA_2_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000069b  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000619  00000000  00000000  00000847  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000250  00000000  00000000  00000e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000342  00000000  00000000  000010e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001426  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <T1Delay>:
// Delay subroutine for Timer1 [Delay for 1 second]
// F = 0.5 MHz
void T1Delay()
{
	// Set the TCNT1 = 65536-62500 = 3036 [0xBDC]
	TCNT1H = 0x0B;
  80:	8b e0       	ldi	r24, 0x0B	; 11
  82:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	TCNT1L = 0xDC;
  86:	8c ed       	ldi	r24, 0xDC	; 220
  88:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	// Start Timer1 with prescalar 8
	TCCR1A = 0x00;
  8c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = 0x02;
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	while((TIFR1&(1<<TOV1)) == 0x00);	// Check TOV flag
  96:	b0 9b       	sbis	0x16, 0	; 22
  98:	fe cf       	rjmp	.-4      	; 0x96 <T1Delay+0x16>
	TCCR1B = 0x00;						// Stop Timer1
  9a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIFR1 |= (1<<TOV1);					// Reset TOV flag in TIFR1 register
  9e:	b0 9a       	sbi	0x16, 0	; 22
  a0:	08 95       	ret

000000a2 <main>:

void T1Delay();

int main(void)
{
	DDRD = 0x00;		// Set PORTD.2 as input
  a2:	1a b8       	out	0x0a, r1	; 10
	PORTD |= (1<<2);	// Pull up the resistor of PORTD.2
  a4:	5a 9a       	sbi	0x0b, 2	; 11
	DDRB = (1<<2);		// Set PORTB.2 as output
  a6:	84 e0       	ldi	r24, 0x04	; 4
  a8:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;		// Clear PORTB
  aa:	15 b8       	out	0x05, r1	; 5
	// Poll until switch is pressed
	while(1)
	{
		if((PIND&0x04) == 0x00)
		{
			PORTB = (1<<2);				// Turn on LED
  ac:	c4 e0       	ldi	r28, 0x04	; 4
	PORTB = 0x00;		// Clear PORTB
	
	// Poll until switch is pressed
	while(1)
	{
		if((PIND&0x04) == 0x00)
  ae:	4a 99       	sbic	0x09, 2	; 9
  b0:	05 c0       	rjmp	.+10     	; 0xbc <main+0x1a>
		{
			PORTB = (1<<2);				// Turn on LED
  b2:	c5 b9       	out	0x05, r28	; 5
			while((PIND&0x04) == 0x00);	// Poll until switch is turned off
  b4:	4a 9b       	sbis	0x09, 2	; 9
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <main+0x12>
			T1Delay();					// Call the delay after switch is turned off
  b8:	0e 94 40 00 	call	0x80	; 0x80 <T1Delay>
		}
		PORTB = 0x00;					// Turn off LED
  bc:	15 b8       	out	0x05, r1	; 5
	}
  be:	f7 cf       	rjmp	.-18     	; 0xae <main+0xc>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
