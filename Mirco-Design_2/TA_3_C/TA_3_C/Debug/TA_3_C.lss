
TA_3_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000000fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000000fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000069b  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000619  00000000  00000000  0000082f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000022a  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001074  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000342  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  000013ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  78:	0c 94 53 00 	jmp	0xa6	; 0xa6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <T0Delay>:

// Delay for 0.25 second
// Delay subroutine using Timer0 (F = 0.5 MHz)
void T0Delay()
{
	TCNT0 = 0x86;		// Set TCNT0 = 256-122 = 134
  80:	86 e8       	ldi	r24, 0x86	; 134
  82:	86 bd       	out	0x26, r24	; 38
	TCCR0A = 0x00;
  84:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0x05;		// Start the timer0 with a prescalar of 1024
  86:	85 e0       	ldi	r24, 0x05	; 5
  88:	85 bd       	out	0x25, r24	; 37
	while((TIFR0&0x01) == 0);
  8a:	a8 9b       	sbis	0x15, 0	; 21
  8c:	fe cf       	rjmp	.-4      	; 0x8a <T0Delay+0xa>
	TCCR0B = 0x00;		// Stop timer0
  8e:	15 bc       	out	0x25, r1	; 37
	TIFR1 |= (1<<TOV0); // Reset TOV flag
  90:	b0 9a       	sbi	0x16, 0	; 22
  92:	08 95       	ret

00000094 <main>:

void T0Delay();

int main(void)
{
	DDRB |= 0x04;		// Set PORTB.2 as output
  94:	22 9a       	sbi	0x04, 2	; 4
	PORTB = 0x00;		// Clear PORTB
  96:	15 b8       	out	0x05, r1	; 5
	while(1)
	{
		T0Delay();		// Call delay
		PORTB ^= 0x04;	// Toggle the LED
  98:	c4 e0       	ldi	r28, 0x04	; 4
{
	DDRB |= 0x04;		// Set PORTB.2 as output
	PORTB = 0x00;		// Clear PORTB
	while(1)
	{
		T0Delay();		// Call delay
  9a:	0e 94 40 00 	call	0x80	; 0x80 <T0Delay>
		PORTB ^= 0x04;	// Toggle the LED
  9e:	85 b1       	in	r24, 0x05	; 5
  a0:	8c 27       	eor	r24, r28
  a2:	85 b9       	out	0x05, r24	; 5
  a4:	fa cf       	rjmp	.-12     	; 0x9a <main+0x6>

000000a6 <_exit>:
  a6:	f8 94       	cli

000000a8 <__stop_program>:
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <__stop_program>
