
TA_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000128  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b5  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000628  00000000  00000000  000008c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000266  00000000  00000000  00000eed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001154  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000334  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000084  00000000  00000000  000014dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_1>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/interrupt.h>
#include <util/delay.h>


int main(void)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	00 d0       	rcall	.+0      	; 0x86 <main+0x6>
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
	volatile uint16_t ADCvalue;
	DDRD |= (1 << 6);					// PD.6 is output [PWM]
  8a:	56 9a       	sbi	0x0a, 6	; 10
	PORTD |= (1 << 2);					// Pull up the resistor for INT0
  8c:	5a 9a       	sbi	0x0b, 2	; 11
	EIMSK |= (1 << INT0);				// Enable interrupt for INT0
  8e:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= 0x2;						// Trigger on falling edge
  90:	e9 e6       	ldi	r30, 0x69	; 105
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	82 60       	ori	r24, 0x02	; 2
  98:	80 83       	st	Z, r24
	
	// ADC settings
	ADMUX |= (1 << REFS0);									// AVcc with external capacitor at AREF pin
  9a:	ec e7       	ldi	r30, 0x7C	; 124
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	80 64       	ori	r24, 0x40	; 64
  a2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);	// Set prescalar to 128 for 16 MHz
  a4:	ea e7       	ldi	r30, 0x7A	; 122
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	87 60       	ori	r24, 0x07	; 7
  ac:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);									// Enable ADC
  ae:	80 81       	ld	r24, Z
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	80 83       	st	Z, r24
	
	// PWM Settings
	DDRD = (1 << 6);										// Set OC0A as output (PD6)
  b4:	80 e4       	ldi	r24, 0x40	; 64
  b6:	8a b9       	out	0x0a, r24	; 10
	TCCR0A |= (1 << COM0A1) | (1 << COM0A0);				// Inverting mode
  b8:	84 b5       	in	r24, 0x24	; 36
  ba:	80 6c       	ori	r24, 0xC0	; 192
  bc:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << WGM01) | (1 << WGM00);					// Fast PWM mode
  be:	84 b5       	in	r24, 0x24	; 36
  c0:	83 60       	ori	r24, 0x03	; 3
  c2:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02) | (1 << CS00);					// Fosc/1024
  c4:	85 b5       	in	r24, 0x25	; 37
  c6:	85 60       	ori	r24, 0x05	; 5
  c8:	85 bd       	out	0x25, r24	; 37
	
	sei();
  ca:	78 94       	sei
	
    while (1) 
    {
		ADCSRA |= (1 << ADSC);				// Start conversion
		while((ADCSRA & (1 << ADIF)) == 0);	// Wait for conversion
		ADCvalue = ADC >> 2;
  cc:	a8 e7       	ldi	r26, 0x78	; 120
  ce:	b0 e0       	ldi	r27, 0x00	; 0
		ADCvalue = 0xFF - ADCvalue;
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	30 e0       	ldi	r19, 0x00	; 0
	
	sei();
	
    while (1) 
    {
		ADCSRA |= (1 << ADSC);				// Start conversion
  d4:	80 81       	ld	r24, Z
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	80 83       	st	Z, r24
		while((ADCSRA & (1 << ADIF)) == 0);	// Wait for conversion
  da:	80 81       	ld	r24, Z
  dc:	84 ff       	sbrs	r24, 4
  de:	fd cf       	rjmp	.-6      	; 0xda <main+0x5a>
		ADCvalue = ADC >> 2;
  e0:	8d 91       	ld	r24, X+
  e2:	9c 91       	ld	r25, X
  e4:	11 97       	sbiw	r26, 0x01	; 1
  e6:	96 95       	lsr	r25
  e8:	87 95       	ror	r24
  ea:	96 95       	lsr	r25
  ec:	87 95       	ror	r24
  ee:	9a 83       	std	Y+2, r25	; 0x02
  f0:	89 83       	std	Y+1, r24	; 0x01
		ADCvalue = 0xFF - ADCvalue;
  f2:	89 81       	ldd	r24, Y+1	; 0x01
  f4:	9a 81       	ldd	r25, Y+2	; 0x02
  f6:	a9 01       	movw	r20, r18
  f8:	48 1b       	sub	r20, r24
  fa:	59 0b       	sbc	r21, r25
  fc:	5a 83       	std	Y+2, r21	; 0x02
  fe:	49 83       	std	Y+1, r20	; 0x01
		OCR0A = ADCvalue;
 100:	89 81       	ldd	r24, Y+1	; 0x01
 102:	9a 81       	ldd	r25, Y+2	; 0x02
 104:	87 bd       	out	0x27, r24	; 39
    }
 106:	e6 cf       	rjmp	.-52     	; 0xd4 <main+0x54>

00000108 <__vector_1>:
	return 0;
}

ISR(INT0_vect)
{
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	8f 93       	push	r24
	EIFR = (1 << INTF0);
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	8c bb       	out	0x1c, r24	; 28
 118:	8f 91       	pop	r24
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
