
TA_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000120  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000687  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f8  00000000  00000000  00000887  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000022c  00000000  00000000  00000e7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000347  00000000  00000000  000010d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001417  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 8e 00 	jmp	0x11c	; 0x11c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <stdint.h>

int main(void)
{
	// ADC settings
	ADMUX |= (1 << REFS0);									// AVcc with external capacitor at AREF pin
  80:	ec e7       	ldi	r30, 0x7C	; 124
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	80 64       	ori	r24, 0x40	; 64
  88:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);	// Set prescalar to 128 for 16 MHz
  8a:	ea e7       	ldi	r30, 0x7A	; 122
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	87 60       	ori	r24, 0x07	; 7
  92:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);									// Enable ADC
  94:	80 81       	ld	r24, Z
  96:	80 68       	ori	r24, 0x80	; 128
  98:	80 83       	st	Z, r24
	
	// PWM Settings
	DDRB = (1 << 1);										// Set OC1A as output (PD6)
  9a:	82 e0       	ldi	r24, 0x02	; 2
  9c:	84 b9       	out	0x04, r24	; 4
	ICR1 = 5000;											// Set top
  9e:	88 e8       	ldi	r24, 0x88	; 136
  a0:	93 e1       	ldi	r25, 0x13	; 19
  a2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  a6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1);				// Set OC1A high on compare
  aa:	e0 e8       	ldi	r30, 0x80	; 128
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	80 6a       	ori	r24, 0xA0	; 160
  b2:	80 83       	st	Z, r24
	TCCR1A |= (1 << WGM11);
  b4:	80 81       	ld	r24, Z
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << WGM13);					// Fast PWM Mode
  ba:	e1 e8       	ldi	r30, 0x81	; 129
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	88 61       	ori	r24, 0x18	; 24
  c2:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS11) | (1 << CS10);					// Clocked divided by 64
  c4:	80 81       	ld	r24, Z
  c6:	83 60       	ori	r24, 0x03	; 3
  c8:	80 83       	st	Z, r24
	
    while (1) 
    {
		ADCSRA |= (1 << ADSC);								// Start ADC conversion
  ca:	ea e7       	ldi	r30, 0x7A	; 122
  cc:	f0 e0       	ldi	r31, 0x00	; 0
		while((ADCSRA & (1 << ADIF)) == 0);					// Wait for conversion
		OCR1A = (ADC/3) + 200;								// Assign ADC value to PWM
  ce:	48 e7       	ldi	r20, 0x78	; 120
  d0:	50 e0       	ldi	r21, 0x00	; 0
  d2:	c8 e8       	ldi	r28, 0x88	; 136
  d4:	d0 e0       	ldi	r29, 0x00	; 0
	TCCR1B |= (1 << WGM12) | (1 << WGM13);					// Fast PWM Mode
	TCCR1B |= (1 << CS11) | (1 << CS10);					// Clocked divided by 64
	
    while (1) 
    {
		ADCSRA |= (1 << ADSC);								// Start ADC conversion
  d6:	80 81       	ld	r24, Z
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	80 83       	st	Z, r24
		while((ADCSRA & (1 << ADIF)) == 0);					// Wait for conversion
  dc:	80 81       	ld	r24, Z
  de:	84 ff       	sbrs	r24, 4
  e0:	fd cf       	rjmp	.-6      	; 0xdc <main+0x5c>
		OCR1A = (ADC/3) + 200;								// Assign ADC value to PWM
  e2:	da 01       	movw	r26, r20
  e4:	2d 91       	ld	r18, X+
  e6:	3c 91       	ld	r19, X
  e8:	ab ea       	ldi	r26, 0xAB	; 171
  ea:	ba ea       	ldi	r27, 0xAA	; 170
  ec:	0e 94 7f 00 	call	0xfe	; 0xfe <__umulhisi3>
  f0:	96 95       	lsr	r25
  f2:	87 95       	ror	r24
  f4:	88 53       	subi	r24, 0x38	; 56
  f6:	9f 4f       	sbci	r25, 0xFF	; 255
  f8:	99 83       	std	Y+1, r25	; 0x01
  fa:	88 83       	st	Y, r24
	}
  fc:	ec cf       	rjmp	.-40     	; 0xd6 <main+0x56>

000000fe <__umulhisi3>:
  fe:	a2 9f       	mul	r26, r18
 100:	b0 01       	movw	r22, r0
 102:	b3 9f       	mul	r27, r19
 104:	c0 01       	movw	r24, r0
 106:	a3 9f       	mul	r26, r19
 108:	70 0d       	add	r23, r0
 10a:	81 1d       	adc	r24, r1
 10c:	11 24       	eor	r1, r1
 10e:	91 1d       	adc	r25, r1
 110:	b2 9f       	mul	r27, r18
 112:	70 0d       	add	r23, r0
 114:	81 1d       	adc	r24, r1
 116:	11 24       	eor	r1, r1
 118:	91 1d       	adc	r25, r1
 11a:	08 95       	ret

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
